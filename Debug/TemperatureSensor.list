
TemperatureSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e90  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08009030  08009030  0000a030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a0  080094a0  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080094a0  080094a0  0000a4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094a8  080094a8  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094a8  080094a8  0000a4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080094ac  080094ac  0000a4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080094b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          00000328  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004fc  200004fc  0000b1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011cfb  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000244d  00000000  00000000  0001ceff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  0001f350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c33  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228ff  00000000  00000000  00020f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014649  00000000  00000000  0004381a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5427  00000000  00000000  00057e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d28a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005330  00000000  00000000  0012d2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00132600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009018 	.word	0x08009018

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009018 	.word	0x08009018

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000bbe:	f000 fd39 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 f92b 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f000 faa7 	bl	8001118 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bca:	f000 fa87 	bl	80010dc <MX_DMA_Init>
  MX_ADC1_Init();
 8000bce:	f000 f987 	bl	8000ee0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000bd2:	f000 fa53 	bl	800107c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000bd6:	f000 fa03 	bl	8000fe0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); // Start Timer3 (Trigger Source For ADC1)
 8000bda:	487a      	ldr	r0, [pc, #488]	@ (8000dc4 <main+0x20c>)
 8000bdc:	f004 faba 	bl	8005154 <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000be0:	2100      	movs	r1, #0
 8000be2:	4879      	ldr	r0, [pc, #484]	@ (8000dc8 <main+0x210>)
 8000be4:	f001 fba6 	bl	8002334 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AD_RES, 2);   // Start ADC Conversion
 8000be8:	2202      	movs	r2, #2
 8000bea:	4978      	ldr	r1, [pc, #480]	@ (8000dcc <main+0x214>)
 8000bec:	4876      	ldr	r0, [pc, #472]	@ (8000dc8 <main+0x210>)
 8000bee:	f000 ff9f 	bl	8001b30 <HAL_ADC_Start_DMA>
  sprintf(TxBuffer, "attempt!\r\n Here are calibration data:\r\n");
 8000bf2:	4977      	ldr	r1, [pc, #476]	@ (8000dd0 <main+0x218>)
 8000bf4:	4877      	ldr	r0, [pc, #476]	@ (8000dd4 <main+0x21c>)
 8000bf6:	f006 f8e1 	bl	8006dbc <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8000bfa:	4876      	ldr	r0, [pc, #472]	@ (8000dd4 <main+0x21c>)
 8000bfc:	f7ff fb40 	bl	8000280 <strlen>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
 8000c08:	4972      	ldr	r1, [pc, #456]	@ (8000dd4 <main+0x21c>)
 8000c0a:	4873      	ldr	r0, [pc, #460]	@ (8000dd8 <main+0x220>)
 8000c0c:	f004 ff44 	bl	8005a98 <HAL_UART_Transmit>
  sprintf(TxBuffer, "Vref_calib = %d\r\n", *V_REF_INT_CAL_ADDR);
 8000c10:	4b72      	ldr	r3, [pc, #456]	@ (8000ddc <main+0x224>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4972      	ldr	r1, [pc, #456]	@ (8000de0 <main+0x228>)
 8000c18:	486e      	ldr	r0, [pc, #440]	@ (8000dd4 <main+0x21c>)
 8000c1a:	f006 f8cf 	bl	8006dbc <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8000c1e:	486d      	ldr	r0, [pc, #436]	@ (8000dd4 <main+0x21c>)
 8000c20:	f7ff fb2e 	bl	8000280 <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	4969      	ldr	r1, [pc, #420]	@ (8000dd4 <main+0x21c>)
 8000c2e:	486a      	ldr	r0, [pc, #424]	@ (8000dd8 <main+0x220>)
 8000c30:	f004 ff32 	bl	8005a98 <HAL_UART_Transmit>
  sprintf(TxBuffer, "TS_CAL1 = %d, TS_CAL2 = %d\r\n",*TS_CAL1_ADDR,*TS_CAL2_ADDR);
 8000c34:	4b6b      	ldr	r3, [pc, #428]	@ (8000de4 <main+0x22c>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b6b      	ldr	r3, [pc, #428]	@ (8000de8 <main+0x230>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	496b      	ldr	r1, [pc, #428]	@ (8000dec <main+0x234>)
 8000c40:	4864      	ldr	r0, [pc, #400]	@ (8000dd4 <main+0x21c>)
 8000c42:	f006 f8bb 	bl	8006dbc <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8000c46:	4863      	ldr	r0, [pc, #396]	@ (8000dd4 <main+0x21c>)
 8000c48:	f7ff fb1a 	bl	8000280 <strlen>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	495f      	ldr	r1, [pc, #380]	@ (8000dd4 <main+0x21c>)
 8000c56:	4860      	ldr	r0, [pc, #384]	@ (8000dd8 <main+0x220>)
 8000c58:	f004 ff1e 	bl	8005a98 <HAL_UART_Transmit>
  sprintf(TxBuffer, "T_slope = %f\r\n",TS_AVG_SLOPE);
 8000c5c:	4b62      	ldr	r3, [pc, #392]	@ (8000de8 <main+0x230>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	ee07 3a90 	vmov	s15, r3
 8000c64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c68:	4b5e      	ldr	r3, [pc, #376]	@ (8000de4 <main+0x22c>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	ee07 3a90 	vmov	s15, r3
 8000c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c78:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8000df0 <main+0x238>
 8000c7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c80:	ee16 0a90 	vmov	r0, s13
 8000c84:	f7ff fc68 	bl	8000558 <__aeabi_f2d>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4959      	ldr	r1, [pc, #356]	@ (8000df4 <main+0x23c>)
 8000c8e:	4851      	ldr	r0, [pc, #324]	@ (8000dd4 <main+0x21c>)
 8000c90:	f006 f894 	bl	8006dbc <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8000c94:	484f      	ldr	r0, [pc, #316]	@ (8000dd4 <main+0x21c>)
 8000c96:	f7ff faf3 	bl	8000280 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	494c      	ldr	r1, [pc, #304]	@ (8000dd4 <main+0x21c>)
 8000ca4:	484c      	ldr	r0, [pc, #304]	@ (8000dd8 <main+0x220>)
 8000ca6:	f004 fef7 	bl	8005a98 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if(UpdateEvent){
 8000caa:	4b53      	ldr	r3, [pc, #332]	@ (8000df8 <main+0x240>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0fb      	beq.n	8000caa <main+0xf2>
          sprintf(TxBuffer, "ADC_CH1_raw = %d , ADC_CH2_raw = %d [V]\r\n", AD_RES[1], AD_RES[0]);
 8000cb2:	4b46      	ldr	r3, [pc, #280]	@ (8000dcc <main+0x214>)
 8000cb4:	885b      	ldrh	r3, [r3, #2]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b44      	ldr	r3, [pc, #272]	@ (8000dcc <main+0x214>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	494f      	ldr	r1, [pc, #316]	@ (8000dfc <main+0x244>)
 8000cbe:	4845      	ldr	r0, [pc, #276]	@ (8000dd4 <main+0x21c>)
 8000cc0:	f006 f87c 	bl	8006dbc <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8000cc4:	4843      	ldr	r0, [pc, #268]	@ (8000dd4 <main+0x21c>)
 8000cc6:	f7ff fadb 	bl	8000280 <strlen>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	4940      	ldr	r1, [pc, #256]	@ (8000dd4 <main+0x21c>)
 8000cd4:	4840      	ldr	r0, [pc, #256]	@ (8000dd8 <main+0x220>)
 8000cd6:	f004 fedf 	bl	8005a98 <HAL_UART_Transmit>
          Vdda_meas = VDDA_CALC(AD_RES[0]);
 8000cda:	4b40      	ldr	r3, [pc, #256]	@ (8000ddc <main+0x224>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	ee07 3a90 	vmov	s15, r3
 8000ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8000e00 <main+0x248>
 8000cea:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000cee:	4b37      	ldr	r3, [pc, #220]	@ (8000dcc <main+0x214>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000cfe:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8000e04 <main+0x24c>
 8000d02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d06:	4b40      	ldr	r3, [pc, #256]	@ (8000e08 <main+0x250>)
 8000d08:	edc3 7a00 	vstr	s15, [r3]
          Vref_meas = VREF_CALC(Vdda_meas, AD_RES[0]);
 8000d0c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e08 <main+0x250>)
 8000d0e:	edd3 7a00 	vldr	s15, [r3]
 8000d12:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000e0c <main+0x254>
 8000d16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dcc <main+0x214>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	ee07 3a90 	vmov	s15, r3
 8000d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d2a:	4b39      	ldr	r3, [pc, #228]	@ (8000e10 <main+0x258>)
 8000d2c:	edc3 7a00 	vstr	s15, [r3]
          Temperature_meas = TS_CALC(AD_RES[1]);
 8000d30:	4b26      	ldr	r3, [pc, #152]	@ (8000dcc <main+0x214>)
 8000d32:	885b      	ldrh	r3, [r3, #2]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <main+0x22c>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	ee07 3a90 	vmov	s15, r3
 8000d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d44:	4b28      	ldr	r3, [pc, #160]	@ (8000de8 <main+0x230>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	ee07 3a90 	vmov	s15, r3
 8000d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d50:	4b24      	ldr	r3, [pc, #144]	@ (8000de4 <main+0x22c>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d60:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 8000df0 <main+0x238>
 8000d64:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000d70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d74:	4b27      	ldr	r3, [pc, #156]	@ (8000e14 <main+0x25c>)
 8000d76:	edc3 7a00 	vstr	s15, [r3]
          sprintf(TxBuffer, "Vdda = %5.3f [V] , Temp = %4.2f [degC]\r\n", Vdda_meas, Temperature_meas);
 8000d7a:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <main+0x250>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fbea 	bl	8000558 <__aeabi_f2d>
 8000d84:	4604      	mov	r4, r0
 8000d86:	460d      	mov	r5, r1
 8000d88:	4b22      	ldr	r3, [pc, #136]	@ (8000e14 <main+0x25c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fbe3 	bl	8000558 <__aeabi_f2d>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	e9cd 2300 	strd	r2, r3, [sp]
 8000d9a:	4622      	mov	r2, r4
 8000d9c:	462b      	mov	r3, r5
 8000d9e:	491e      	ldr	r1, [pc, #120]	@ (8000e18 <main+0x260>)
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <main+0x21c>)
 8000da2:	f006 f80b 	bl	8006dbc <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)TxBuffer, strlen(TxBuffer), HAL_MAX_DELAY);
 8000da6:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <main+0x21c>)
 8000da8:	f7ff fa6a 	bl	8000280 <strlen>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
 8000db4:	4907      	ldr	r1, [pc, #28]	@ (8000dd4 <main+0x21c>)
 8000db6:	4808      	ldr	r0, [pc, #32]	@ (8000dd8 <main+0x220>)
 8000db8:	f004 fe6e 	bl	8005a98 <HAL_UART_Transmit>
          UpdateEvent = 0;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <main+0x240>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
      if(UpdateEvent){
 8000dc2:	e772      	b.n	8000caa <main+0xf2>
 8000dc4:	20000284 	.word	0x20000284
 8000dc8:	200001f0 	.word	0x200001f0
 8000dcc:	2000035c 	.word	0x2000035c
 8000dd0:	08009030 	.word	0x08009030
 8000dd4:	2000036c 	.word	0x2000036c
 8000dd8:	200002d0 	.word	0x200002d0
 8000ddc:	1ffff7ba 	.word	0x1ffff7ba
 8000de0:	08009058 	.word	0x08009058
 8000de4:	1ffff7b8 	.word	0x1ffff7b8
 8000de8:	1ffff7c2 	.word	0x1ffff7c2
 8000dec:	0800906c 	.word	0x0800906c
 8000df0:	42a00000 	.word	0x42a00000
 8000df4:	0800908c 	.word	0x0800908c
 8000df8:	20000358 	.word	0x20000358
 8000dfc:	0800909c 	.word	0x0800909c
 8000e00:	454e4000 	.word	0x454e4000
 8000e04:	447a0000 	.word	0x447a0000
 8000e08:	20000364 	.word	0x20000364
 8000e0c:	457ff000 	.word	0x457ff000
 8000e10:	20000368 	.word	0x20000368
 8000e14:	20000360 	.word	0x20000360
 8000e18:	080090c8 	.word	0x080090c8

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0a6      	sub	sp, #152	@ 0x98
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e26:	2228      	movs	r2, #40	@ 0x28
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f006 f829 	bl	8006e82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2258      	movs	r2, #88	@ 0x58
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f006 f81b 	bl	8006e82 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e50:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e54:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e56:	2301      	movs	r3, #1
 8000e58:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000e68:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000e6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e76:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 fc80 	bl	8003780 <HAL_RCC_OscConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e86:	f000 f9a3 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8a:	230f      	movs	r3, #15
 8000e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e9e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 fcbf 	bl	8004828 <HAL_RCC_ClockConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000eb0:	f000 f98e 	bl	80011d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM34;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <SystemClock_Config+0xc0>)
 8000eb6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fed0 	bl	8004c68 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000ece:	f000 f97f 	bl	80011d0 <Error_Handler>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3798      	adds	r7, #152	@ 0x98
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	00200002 	.word	0x00200002

08000ee0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	@ 0x28
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f02:	4b36      	ldr	r3, [pc, #216]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f04:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f0a:	4b34      	ldr	r3, [pc, #208]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f0c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f12:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f18:	4b30      	ldr	r3, [pc, #192]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f24:	4b2d      	ldr	r3, [pc, #180]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f34:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f48:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f50:	4b22      	ldr	r3, [pc, #136]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f52:	2204      	movs	r2, #4
 8000f54:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f56:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f62:	481e      	ldr	r0, [pc, #120]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f64:	f000 fbea 	bl	800173c <HAL_ADC_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f6e:	f000 f92f 	bl	80011d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4817      	ldr	r0, [pc, #92]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000f7e:	f001 fd5d 	bl	8002a3c <HAL_ADCEx_MultiModeConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f88:	f000 f922 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480c      	ldr	r0, [pc, #48]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000faa:	f001 fa5d 	bl	8002468 <HAL_ADC_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000fb4:	f000 f90c 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <MX_ADC1_Init+0xfc>)
 8000fc6:	f001 fa4f 	bl	8002468 <HAL_ADC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000fd0:	f000 f8fe 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	@ 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200001f0 	.word	0x200001f0

08000fe0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <MX_TIM3_Init+0x94>)
 8001000:	4a1d      	ldr	r2, [pc, #116]	@ (8001078 <MX_TIM3_Init+0x98>)
 8001002:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8001004:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <MX_TIM3_Init+0x94>)
 8001006:	221c      	movs	r2, #28
 8001008:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100a:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <MX_TIM3_Init+0x94>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 17140;
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <MX_TIM3_Init+0x94>)
 8001012:	f244 22f4 	movw	r2, #17140	@ 0x42f4
 8001016:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <MX_TIM3_Init+0x94>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <MX_TIM3_Init+0x94>)
 8001020:	2280      	movs	r2, #128	@ 0x80
 8001022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001024:	4813      	ldr	r0, [pc, #76]	@ (8001074 <MX_TIM3_Init+0x94>)
 8001026:	f004 f83d 	bl	80050a4 <HAL_TIM_Base_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001030:	f000 f8ce 	bl	80011d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001034:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001038:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	@ (8001074 <MX_TIM3_Init+0x94>)
 8001042:	f004 f9f1 	bl	8005428 <HAL_TIM_ConfigClockSource>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800104c:	f000 f8c0 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001050:	2320      	movs	r3, #32
 8001052:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_TIM3_Init+0x94>)
 800105e:	f004 fc23 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001068:	f000 f8b2 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000284 	.word	0x20000284
 8001078:	40000400 	.word	0x40000400

0800107c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 8001082:	4a15      	ldr	r2, [pc, #84]	@ (80010d8 <MX_USART2_UART_Init+0x5c>)
 8001084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 8001088:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800108c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <MX_USART2_UART_Init+0x58>)
 80010c0:	f004 fc9c 	bl	80059fc <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ca:	f000 f881 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200002d0 	.word	0x200002d0
 80010d8:	40004400 	.word	0x40004400

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <MX_DMA_Init+0x38>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <MX_DMA_Init+0x38>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6153      	str	r3, [r2, #20]
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <MX_DMA_Init+0x38>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	200b      	movs	r0, #11
 8001100:	f001 ff99 	bl	8003036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001104:	200b      	movs	r0, #11
 8001106:	f001 ffb2 	bl	800306e <HAL_NVIC_EnableIRQ>

}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <MX_GPIO_Init+0x90>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4a1d      	ldr	r2, [pc, #116]	@ (80011a8 <MX_GPIO_Init+0x90>)
 8001134:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001138:	6153      	str	r3, [r2, #20]
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_GPIO_Init+0x90>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <MX_GPIO_Init+0x90>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <MX_GPIO_Init+0x90>)
 800114c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001150:	6153      	str	r3, [r2, #20]
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <MX_GPIO_Init+0x90>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_GPIO_Init+0x90>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	4a11      	ldr	r2, [pc, #68]	@ (80011a8 <MX_GPIO_Init+0x90>)
 8001164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001168:	6153      	str	r3, [r2, #20]
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_GPIO_Init+0x90>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2120      	movs	r1, #32
 800117a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117e:	f002 facd 	bl	800371c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001182:	2320      	movs	r3, #32
 8001184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f002 f934 	bl	8003408 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000

080011ac <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Toggle Interrupt Rate Indicator Pin
 80011b4:	2120      	movs	r1, #32
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ba:	f002 fac7 	bl	800374c <HAL_GPIO_TogglePin>
    UpdateEvent = 1;
 80011be:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <HAL_ADC_ConvCpltCallback+0x20>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000358 	.word	0x20000358

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <Error_Handler+0x8>

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <HAL_MspInit+0x44>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001220 <HAL_MspInit+0x44>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6193      	str	r3, [r2, #24]
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <HAL_MspInit+0x44>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <HAL_MspInit+0x44>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a08      	ldr	r2, [pc, #32]	@ (8001220 <HAL_MspInit+0x44>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_MspInit+0x44>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001234:	d13b      	bne.n	80012ae <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001236:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <HAL_ADC_MspInit+0x94>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a1f      	ldr	r2, [pc, #124]	@ (80012b8 <HAL_ADC_MspInit+0x94>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <HAL_ADC_MspInit+0x94>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800124e:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <HAL_ADC_MspInit+0x98>)
 8001250:	4a1b      	ldr	r2, [pc, #108]	@ (80012c0 <HAL_ADC_MspInit+0x9c>)
 8001252:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <HAL_ADC_MspInit+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800125a:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <HAL_ADC_MspInit+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <HAL_ADC_MspInit+0x98>)
 8001262:	2280      	movs	r2, #128	@ 0x80
 8001264:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <HAL_ADC_MspInit+0x98>)
 8001268:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800126c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <HAL_ADC_MspInit+0x98>)
 8001270:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001274:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <HAL_ADC_MspInit+0x98>)
 8001278:	2220      	movs	r2, #32
 800127a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <HAL_ADC_MspInit+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001282:	480e      	ldr	r0, [pc, #56]	@ (80012bc <HAL_ADC_MspInit+0x98>)
 8001284:	f001 ff0d 	bl	80030a2 <HAL_DMA_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800128e:	f7ff ff9f 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a09      	ldr	r2, [pc, #36]	@ (80012bc <HAL_ADC_MspInit+0x98>)
 8001296:	639a      	str	r2, [r3, #56]	@ 0x38
 8001298:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <HAL_ADC_MspInit+0x98>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2012      	movs	r0, #18
 80012a4:	f001 fec7 	bl	8003036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012a8:	2012      	movs	r0, #18
 80012aa:	f001 fee0 	bl	800306e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	20000240 	.word	0x20000240
 80012c0:	40020008 	.word	0x40020008

080012c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001308 <HAL_TIM_Base_MspInit+0x44>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d113      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_TIM_Base_MspInit+0x48>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4a0c      	ldr	r2, [pc, #48]	@ (800130c <HAL_TIM_Base_MspInit+0x48>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	61d3      	str	r3, [r2, #28]
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_TIM_Base_MspInit+0x48>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	201d      	movs	r0, #29
 80012f4:	f001 fe9f 	bl	8003036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012f8:	201d      	movs	r0, #29
 80012fa:	f001 feb8 	bl	800306e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40000400 	.word	0x40000400
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a17      	ldr	r2, [pc, #92]	@ (800138c <HAL_UART_MspInit+0x7c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d128      	bne.n	8001384 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_UART_MspInit+0x80>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <HAL_UART_MspInit+0x80>)
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <HAL_UART_MspInit+0x80>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HAL_UART_MspInit+0x80>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a10      	ldr	r2, [pc, #64]	@ (8001390 <HAL_UART_MspInit+0x80>)
 8001350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001354:	6153      	str	r3, [r2, #20]
 8001356:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <HAL_UART_MspInit+0x80>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001362:	230c      	movs	r3, #12
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001372:	2307      	movs	r3, #7
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001380:	f002 f842 	bl	8003408 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	@ 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40004400 	.word	0x40004400
 8001390:	40021000 	.word	0x40021000

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <NMI_Handler+0x4>

0800139c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <MemManage_Handler+0x4>

080013ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <UsageFault_Handler+0x4>

080013bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ea:	f000 f969 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <DMA1_Channel1_IRQHandler+0x10>)
 80013fa:	f001 fef8 	bl	80031ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000240 	.word	0x20000240

08001408 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <ADC1_2_IRQHandler+0x10>)
 800140e:	f000 fcab 	bl	8001d68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200001f0 	.word	0x200001f0

0800141c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <TIM3_IRQHandler+0x10>)
 8001422:	f003 feff 	bl	8005224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000284 	.word	0x20000284

08001430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return 1;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_kill>:

int _kill(int pid, int sig)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800144a:	f005 fd6d 	bl	8006f28 <__errno>
 800144e:	4603      	mov	r3, r0
 8001450:	2216      	movs	r2, #22
 8001452:	601a      	str	r2, [r3, #0]
  return -1;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <_exit>:

void _exit (int status)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ffe7 	bl	8001440 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001472:	bf00      	nop
 8001474:	e7fd      	b.n	8001472 <_exit+0x12>

08001476 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e00a      	b.n	800149e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001488:	f3af 8000 	nop.w
 800148c:	4601      	mov	r1, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	60ba      	str	r2, [r7, #8]
 8001494:	b2ca      	uxtb	r2, r1
 8001496:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dbf0      	blt.n	8001488 <_read+0x12>
  }

  return len;
 80014a6:	687b      	ldr	r3, [r7, #4]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e009      	b.n	80014d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	60ba      	str	r2, [r7, #8]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	dbf1      	blt.n	80014c2 <_write+0x12>
  }
  return len;
 80014de:	687b      	ldr	r3, [r7, #4]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_close>:

int _close(int file)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001510:	605a      	str	r2, [r3, #4]
  return 0;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_isatty>:

int _isatty(int file)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001528:	2301      	movs	r3, #1
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001536:	b480      	push	{r7}
 8001538:	b085      	sub	sp, #20
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	@ (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f005 fcd2 	bl	8006f28 <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20010000 	.word	0x20010000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	200003a8 	.word	0x200003a8
 80015b8:	20000500 	.word	0x20000500

080015bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <SystemInit+0x20>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <SystemInit+0x20>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001618 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e4:	f7ff ffea 	bl	80015bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <LoopForever+0x6>)
  ldr r1, =_edata
 80015ea:	490d      	ldr	r1, [pc, #52]	@ (8001620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <LoopForever+0xe>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001600:	4c0a      	ldr	r4, [pc, #40]	@ (800162c <LoopForever+0x16>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160e:	f005 fc91 	bl	8006f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001612:	f7ff fad1 	bl	8000bb8 <main>

08001616 <LoopForever>:

LoopForever:
    b LoopForever
 8001616:	e7fe      	b.n	8001616 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001618:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001624:	080094b0 	.word	0x080094b0
  ldr r2, =_sbss
 8001628:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800162c:	200004fc 	.word	0x200004fc

08001630 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC3_IRQHandler>
	...

08001634 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <HAL_Init+0x28>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	@ (800165c <HAL_Init+0x28>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f001 fceb 	bl	8003020 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	200f      	movs	r0, #15
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fdc4 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000

08001660 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f001 fd03 	bl	800308a <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f001 fccb 	bl	8003036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	@ (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008
 80016e4:	200003ac 	.word	0x200003ac

080016e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200003ac 	.word	0x200003ac

08001700 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b09a      	sub	sp, #104	@ 0x68
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e1e3      	b.n	8001b24 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	d176      	bne.n	800185c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	2b00      	cmp	r3, #0
 8001774:	d152      	bne.n	800181c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fd47 	bl	8001224 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d13b      	bne.n	800181c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f001 fb05 	bl	8002db4 <ADC_Disable>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d12f      	bne.n	800181c <HAL_ADC_Init+0xe0>
 80017bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d12b      	bne.n	800181c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017cc:	f023 0302 	bic.w	r3, r3, #2
 80017d0:	f043 0202 	orr.w	r2, r3, #2
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017e6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80017f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017f8:	4b92      	ldr	r3, [pc, #584]	@ (8001a44 <HAL_ADC_Init+0x308>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a92      	ldr	r2, [pc, #584]	@ (8001a48 <HAL_ADC_Init+0x30c>)
 80017fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001802:	0c9a      	lsrs	r2, r3, #18
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800180e:	e002      	b.n	8001816 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	3b01      	subs	r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f9      	bne.n	8001810 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001838:	d110      	bne.n	800185c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f023 0312 	bic.w	r3, r3, #18
 8001842:	f043 0210 	orr.w	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	f043 0201 	orr.w	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	f040 8150 	bne.w	8001b0a <HAL_ADC_Init+0x3ce>
 800186a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 814b 	bne.w	8001b0a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800187e:	2b00      	cmp	r3, #0
 8001880:	f040 8143 	bne.w	8001b0a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800188c:	f043 0202 	orr.w	r2, r3, #2
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800189c:	d004      	beq.n	80018a8 <HAL_ADC_Init+0x16c>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6a      	ldr	r2, [pc, #424]	@ (8001a4c <HAL_ADC_Init+0x310>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_ADC_Init+0x170>
 80018a8:	4b69      	ldr	r3, [pc, #420]	@ (8001a50 <HAL_ADC_Init+0x314>)
 80018aa:	e000      	b.n	80018ae <HAL_ADC_Init+0x172>
 80018ac:	4b69      	ldr	r3, [pc, #420]	@ (8001a54 <HAL_ADC_Init+0x318>)
 80018ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018b8:	d102      	bne.n	80018c0 <HAL_ADC_Init+0x184>
 80018ba:	4b64      	ldr	r3, [pc, #400]	@ (8001a4c <HAL_ADC_Init+0x310>)
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e01a      	b.n	80018f6 <HAL_ADC_Init+0x1ba>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a61      	ldr	r2, [pc, #388]	@ (8001a4c <HAL_ADC_Init+0x310>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d103      	bne.n	80018d2 <HAL_ADC_Init+0x196>
 80018ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e011      	b.n	80018f6 <HAL_ADC_Init+0x1ba>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a60      	ldr	r2, [pc, #384]	@ (8001a58 <HAL_ADC_Init+0x31c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d102      	bne.n	80018e2 <HAL_ADC_Init+0x1a6>
 80018dc:	4b5f      	ldr	r3, [pc, #380]	@ (8001a5c <HAL_ADC_Init+0x320>)
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e009      	b.n	80018f6 <HAL_ADC_Init+0x1ba>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a5d      	ldr	r2, [pc, #372]	@ (8001a5c <HAL_ADC_Init+0x320>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d102      	bne.n	80018f2 <HAL_ADC_Init+0x1b6>
 80018ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001a58 <HAL_ADC_Init+0x31c>)
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e001      	b.n	80018f6 <HAL_ADC_Init+0x1ba>
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b01      	cmp	r3, #1
 8001902:	d108      	bne.n	8001916 <HAL_ADC_Init+0x1da>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_ADC_Init+0x1da>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_ADC_Init+0x1dc>
 8001916:	2300      	movs	r3, #0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d11c      	bne.n	8001956 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800191c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800191e:	2b00      	cmp	r3, #0
 8001920:	d010      	beq.n	8001944 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d107      	bne.n	800193e <HAL_ADC_Init+0x202>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_ADC_Init+0x202>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_ADC_Init+0x204>
 800193e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001940:	2b00      	cmp	r3, #0
 8001942:	d108      	bne.n	8001956 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001944:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	431a      	orrs	r2, r3
 8001952:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001954:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7e5b      	ldrb	r3, [r3, #25]
 800195a:	035b      	lsls	r3, r3, #13
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001960:	2a01      	cmp	r2, #1
 8001962:	d002      	beq.n	800196a <HAL_ADC_Init+0x22e>
 8001964:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001968:	e000      	b.n	800196c <HAL_ADC_Init+0x230>
 800196a:	2200      	movs	r2, #0
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4313      	orrs	r3, r2
 800197a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800197c:	4313      	orrs	r3, r2
 800197e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d11b      	bne.n	80019c2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7e5b      	ldrb	r3, [r3, #25]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	3b01      	subs	r3, #1
 8001998:	045a      	lsls	r2, r3, #17
 800199a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800199c:	4313      	orrs	r3, r2
 800199e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80019a4:	e00d      	b.n	80019c2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80019ae:	f043 0220 	orr.w	r2, r3, #32
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d054      	beq.n	8001a74 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a22      	ldr	r2, [pc, #136]	@ (8001a58 <HAL_ADC_Init+0x31c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d004      	beq.n	80019de <HAL_ADC_Init+0x2a2>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a20      	ldr	r2, [pc, #128]	@ (8001a5c <HAL_ADC_Init+0x320>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d140      	bne.n	8001a60 <HAL_ADC_Init+0x324>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e2:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80019e6:	d02a      	beq.n	8001a3e <HAL_ADC_Init+0x302>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019f0:	d022      	beq.n	8001a38 <HAL_ADC_Init+0x2fc>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f6:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80019fa:	d01a      	beq.n	8001a32 <HAL_ADC_Init+0x2f6>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001a04:	d012      	beq.n	8001a2c <HAL_ADC_Init+0x2f0>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8001a0e:	d00a      	beq.n	8001a26 <HAL_ADC_Init+0x2ea>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a14:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001a18:	d002      	beq.n	8001a20 <HAL_ADC_Init+0x2e4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1e:	e023      	b.n	8001a68 <HAL_ADC_Init+0x32c>
 8001a20:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a24:	e020      	b.n	8001a68 <HAL_ADC_Init+0x32c>
 8001a26:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001a2a:	e01d      	b.n	8001a68 <HAL_ADC_Init+0x32c>
 8001a2c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001a30:	e01a      	b.n	8001a68 <HAL_ADC_Init+0x32c>
 8001a32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a36:	e017      	b.n	8001a68 <HAL_ADC_Init+0x32c>
 8001a38:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001a3c:	e014      	b.n	8001a68 <HAL_ADC_Init+0x32c>
 8001a3e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001a42:	e011      	b.n	8001a68 <HAL_ADC_Init+0x32c>
 8001a44:	20000000 	.word	0x20000000
 8001a48:	431bde83 	.word	0x431bde83
 8001a4c:	50000100 	.word	0x50000100
 8001a50:	50000300 	.word	0x50000300
 8001a54:	50000700 	.word	0x50000700
 8001a58:	50000400 	.word	0x50000400
 8001a5c:	50000500 	.word	0x50000500
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a70:	4313      	orrs	r3, r2
 8001a72:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d114      	bne.n	8001aac <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a90:	f023 0302 	bic.w	r3, r3, #2
 8001a94:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7e1b      	ldrb	r3, [r3, #24]
 8001a9a:	039a      	lsls	r2, r3, #14
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <HAL_ADC_Init+0x3f0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001abc:	430b      	orrs	r3, r1
 8001abe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f023 010f 	bic.w	r1, r3, #15
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	1e5a      	subs	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ae0:	e007      	b.n	8001af2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 020f 	bic.w	r2, r2, #15
 8001af0:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afc:	f023 0303 	bic.w	r3, r3, #3
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b08:	e00a      	b.n	8001b20 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f023 0312 	bic.w	r3, r3, #18
 8001b12:	f043 0210 	orr.w	r2, r3, #16
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b20:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3768      	adds	r7, #104	@ 0x68
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	fff0c007 	.word	0xfff0c007

08001b30 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 80f7 	bne.w	8001d3e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Start_DMA+0x2e>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e0f2      	b.n	8001d44 <HAL_ADC_Start_DMA+0x214>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b6e:	d004      	beq.n	8001b7a <HAL_ADC_Start_DMA+0x4a>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a75      	ldr	r2, [pc, #468]	@ (8001d4c <HAL_ADC_Start_DMA+0x21c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d109      	bne.n	8001b8e <HAL_ADC_Start_DMA+0x5e>
 8001b7a:	4b75      	ldr	r3, [pc, #468]	@ (8001d50 <HAL_ADC_Start_DMA+0x220>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bf0c      	ite	eq
 8001b86:	2301      	moveq	r3, #1
 8001b88:	2300      	movne	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	e008      	b.n	8001ba0 <HAL_ADC_Start_DMA+0x70>
 8001b8e:	4b71      	ldr	r3, [pc, #452]	@ (8001d54 <HAL_ADC_Start_DMA+0x224>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf0c      	ite	eq
 8001b9a:	2301      	moveq	r3, #1
 8001b9c:	2300      	movne	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80c5 	beq.w	8001d30 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f001 f8a0 	bl	8002cec <ADC_Enable>
 8001bac:	4603      	mov	r3, r0
 8001bae:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 80b7 	bne.w	8001d26 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bd4:	d004      	beq.n	8001be0 <HAL_ADC_Start_DMA+0xb0>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a5c      	ldr	r2, [pc, #368]	@ (8001d4c <HAL_ADC_Start_DMA+0x21c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d106      	bne.n	8001bee <HAL_ADC_Start_DMA+0xbe>
 8001be0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d50 <HAL_ADC_Start_DMA+0x220>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d010      	beq.n	8001c0e <HAL_ADC_Start_DMA+0xde>
 8001bec:	e005      	b.n	8001bfa <HAL_ADC_Start_DMA+0xca>
 8001bee:	4b59      	ldr	r3, [pc, #356]	@ (8001d54 <HAL_ADC_Start_DMA+0x224>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_ADC_Start_DMA+0xde>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c02:	d004      	beq.n	8001c0e <HAL_ADC_Start_DMA+0xde>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a53      	ldr	r2, [pc, #332]	@ (8001d58 <HAL_ADC_Start_DMA+0x228>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d115      	bne.n	8001c3a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d036      	beq.n	8001c96 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c38:	e02d      	b.n	8001c96 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c4e:	d004      	beq.n	8001c5a <HAL_ADC_Start_DMA+0x12a>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a3d      	ldr	r2, [pc, #244]	@ (8001d4c <HAL_ADC_Start_DMA+0x21c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10a      	bne.n	8001c70 <HAL_ADC_Start_DMA+0x140>
 8001c5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	e008      	b.n	8001c82 <HAL_ADC_Start_DMA+0x152>
 8001c70:	4b39      	ldr	r3, [pc, #228]	@ (8001d58 <HAL_ADC_Start_DMA+0x228>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf14      	ite	ne
 8001c7c:	2301      	movne	r3, #1
 8001c7e:	2300      	moveq	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d007      	beq.n	8001c96 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ca2:	d106      	bne.n	8001cb2 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca8:	f023 0206 	bic.w	r2, r3, #6
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cb0:	e002      	b.n	8001cb8 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc4:	4a25      	ldr	r2, [pc, #148]	@ (8001d5c <HAL_ADC_Start_DMA+0x22c>)
 8001cc6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ccc:	4a24      	ldr	r2, [pc, #144]	@ (8001d60 <HAL_ADC_Start_DMA+0x230>)
 8001cce:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd4:	4a23      	ldr	r2, [pc, #140]	@ (8001d64 <HAL_ADC_Start_DMA+0x234>)
 8001cd6:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	221c      	movs	r2, #28
 8001cde:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0210 	orr.w	r2, r2, #16
 8001cee:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3340      	adds	r3, #64	@ 0x40
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f001 fa0e 	bl	8003130 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0204 	orr.w	r2, r2, #4
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	e00d      	b.n	8001d42 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001d2e:	e008      	b.n	8001d42 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001d3c:	e001      	b.n	8001d42 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	50000100 	.word	0x50000100
 8001d50:	50000300 	.word	0x50000300
 8001d54:	50000700 	.word	0x50000700
 8001d58:	50000400 	.word	0x50000400
 8001d5c:	08002c21 	.word	0x08002c21
 8001d60:	08002c9b 	.word	0x08002c9b
 8001d64:	08002cb7 	.word	0x08002cb7

08001d68 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x38>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10b      	bne.n	8001db8 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80bc 	beq.w	8001f24 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80b6 	beq.w	8001f24 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dd8:	d004      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x7c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a90      	ldr	r2, [pc, #576]	@ (8002020 <HAL_ADC_IRQHandler+0x2b8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d106      	bne.n	8001df2 <HAL_ADC_IRQHandler+0x8a>
 8001de4:	4b8f      	ldr	r3, [pc, #572]	@ (8002024 <HAL_ADC_IRQHandler+0x2bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d03e      	beq.n	8001e6e <HAL_ADC_IRQHandler+0x106>
 8001df0:	e005      	b.n	8001dfe <HAL_ADC_IRQHandler+0x96>
 8001df2:	4b8d      	ldr	r3, [pc, #564]	@ (8002028 <HAL_ADC_IRQHandler+0x2c0>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d037      	beq.n	8001e6e <HAL_ADC_IRQHandler+0x106>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e06:	d004      	beq.n	8001e12 <HAL_ADC_IRQHandler+0xaa>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a84      	ldr	r2, [pc, #528]	@ (8002020 <HAL_ADC_IRQHandler+0x2b8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d106      	bne.n	8001e20 <HAL_ADC_IRQHandler+0xb8>
 8001e12:	4b84      	ldr	r3, [pc, #528]	@ (8002024 <HAL_ADC_IRQHandler+0x2bc>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d027      	beq.n	8001e6e <HAL_ADC_IRQHandler+0x106>
 8001e1e:	e005      	b.n	8001e2c <HAL_ADC_IRQHandler+0xc4>
 8001e20:	4b81      	ldr	r3, [pc, #516]	@ (8002028 <HAL_ADC_IRQHandler+0x2c0>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d020      	beq.n	8001e6e <HAL_ADC_IRQHandler+0x106>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e34:	d004      	beq.n	8001e40 <HAL_ADC_IRQHandler+0xd8>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a79      	ldr	r2, [pc, #484]	@ (8002020 <HAL_ADC_IRQHandler+0x2b8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d106      	bne.n	8001e4e <HAL_ADC_IRQHandler+0xe6>
 8001e40:	4b78      	ldr	r3, [pc, #480]	@ (8002024 <HAL_ADC_IRQHandler+0x2bc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	2b09      	cmp	r3, #9
 8001e4a:	d010      	beq.n	8001e6e <HAL_ADC_IRQHandler+0x106>
 8001e4c:	e005      	b.n	8001e5a <HAL_ADC_IRQHandler+0xf2>
 8001e4e:	4b76      	ldr	r3, [pc, #472]	@ (8002028 <HAL_ADC_IRQHandler+0x2c0>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	2b09      	cmp	r3, #9
 8001e58:	d009      	beq.n	8001e6e <HAL_ADC_IRQHandler+0x106>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e62:	d004      	beq.n	8001e6e <HAL_ADC_IRQHandler+0x106>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a70      	ldr	r2, [pc, #448]	@ (800202c <HAL_ADC_IRQHandler+0x2c4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d104      	bne.n	8001e78 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	e00f      	b.n	8001e98 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e80:	d004      	beq.n	8001e8c <HAL_ADC_IRQHandler+0x124>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a66      	ldr	r2, [pc, #408]	@ (8002020 <HAL_ADC_IRQHandler+0x2b8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d102      	bne.n	8001e92 <HAL_ADC_IRQHandler+0x12a>
 8001e8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e90:	e000      	b.n	8001e94 <HAL_ADC_IRQHandler+0x12c>
 8001e92:	4b66      	ldr	r3, [pc, #408]	@ (800202c <HAL_ADC_IRQHandler+0x2c4>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d137      	bne.n	8001f16 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d132      	bne.n	8001f16 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d02d      	beq.n	8001f16 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d11a      	bne.n	8001efe <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 020c 	bic.w	r2, r2, #12
 8001ed6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d112      	bne.n	8001f16 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001efc:	e00b      	b.n	8001f16 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f043 0210 	orr.w	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	f043 0201 	orr.w	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff f948 	bl	80011ac <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	220c      	movs	r2, #12
 8001f22:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d004      	beq.n	8001f38 <HAL_ADC_IRQHandler+0x1d0>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10b      	bne.n	8001f50 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8138 	beq.w	80021b4 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8132 	beq.w	80021b4 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f64:	d004      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x208>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002020 <HAL_ADC_IRQHandler+0x2b8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d106      	bne.n	8001f7e <HAL_ADC_IRQHandler+0x216>
 8001f70:	4b2c      	ldr	r3, [pc, #176]	@ (8002024 <HAL_ADC_IRQHandler+0x2bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d03e      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x292>
 8001f7c:	e005      	b.n	8001f8a <HAL_ADC_IRQHandler+0x222>
 8001f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002028 <HAL_ADC_IRQHandler+0x2c0>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d037      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x292>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f92:	d004      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x236>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <HAL_ADC_IRQHandler+0x2b8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d106      	bne.n	8001fac <HAL_ADC_IRQHandler+0x244>
 8001f9e:	4b21      	ldr	r3, [pc, #132]	@ (8002024 <HAL_ADC_IRQHandler+0x2bc>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	2b05      	cmp	r3, #5
 8001fa8:	d027      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x292>
 8001faa:	e005      	b.n	8001fb8 <HAL_ADC_IRQHandler+0x250>
 8001fac:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <HAL_ADC_IRQHandler+0x2c0>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d020      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x292>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fc0:	d004      	beq.n	8001fcc <HAL_ADC_IRQHandler+0x264>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a16      	ldr	r2, [pc, #88]	@ (8002020 <HAL_ADC_IRQHandler+0x2b8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d106      	bne.n	8001fda <HAL_ADC_IRQHandler+0x272>
 8001fcc:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_ADC_IRQHandler+0x2bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2b09      	cmp	r3, #9
 8001fd6:	d010      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x292>
 8001fd8:	e005      	b.n	8001fe6 <HAL_ADC_IRQHandler+0x27e>
 8001fda:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <HAL_ADC_IRQHandler+0x2c0>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	2b09      	cmp	r3, #9
 8001fe4:	d009      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x292>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fee:	d004      	beq.n	8001ffa <HAL_ADC_IRQHandler+0x292>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800202c <HAL_ADC_IRQHandler+0x2c4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d104      	bne.n	8002004 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	e018      	b.n	8002036 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800200c:	d004      	beq.n	8002018 <HAL_ADC_IRQHandler+0x2b0>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a03      	ldr	r2, [pc, #12]	@ (8002020 <HAL_ADC_IRQHandler+0x2b8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d10b      	bne.n	8002030 <HAL_ADC_IRQHandler+0x2c8>
 8002018:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800201c:	e009      	b.n	8002032 <HAL_ADC_IRQHandler+0x2ca>
 800201e:	bf00      	nop
 8002020:	50000100 	.word	0x50000100
 8002024:	50000300 	.word	0x50000300
 8002028:	50000700 	.word	0x50000700
 800202c:	50000400 	.word	0x50000400
 8002030:	4b92      	ldr	r3, [pc, #584]	@ (800227c <HAL_ADC_IRQHandler+0x514>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002040:	2b00      	cmp	r3, #0
 8002042:	f040 80b0 	bne.w	80021a6 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00d      	beq.n	800206c <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 80a3 	bne.w	80021a6 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 809d 	bne.w	80021a6 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8097 	beq.w	80021a6 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002080:	d004      	beq.n	800208c <HAL_ADC_IRQHandler+0x324>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7e      	ldr	r2, [pc, #504]	@ (8002280 <HAL_ADC_IRQHandler+0x518>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d106      	bne.n	800209a <HAL_ADC_IRQHandler+0x332>
 800208c:	4b7d      	ldr	r3, [pc, #500]	@ (8002284 <HAL_ADC_IRQHandler+0x51c>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	2b00      	cmp	r3, #0
 8002096:	d03e      	beq.n	8002116 <HAL_ADC_IRQHandler+0x3ae>
 8002098:	e005      	b.n	80020a6 <HAL_ADC_IRQHandler+0x33e>
 800209a:	4b7b      	ldr	r3, [pc, #492]	@ (8002288 <HAL_ADC_IRQHandler+0x520>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d037      	beq.n	8002116 <HAL_ADC_IRQHandler+0x3ae>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ae:	d004      	beq.n	80020ba <HAL_ADC_IRQHandler+0x352>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a72      	ldr	r2, [pc, #456]	@ (8002280 <HAL_ADC_IRQHandler+0x518>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d106      	bne.n	80020c8 <HAL_ADC_IRQHandler+0x360>
 80020ba:	4b72      	ldr	r3, [pc, #456]	@ (8002284 <HAL_ADC_IRQHandler+0x51c>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d027      	beq.n	8002116 <HAL_ADC_IRQHandler+0x3ae>
 80020c6:	e005      	b.n	80020d4 <HAL_ADC_IRQHandler+0x36c>
 80020c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002288 <HAL_ADC_IRQHandler+0x520>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d020      	beq.n	8002116 <HAL_ADC_IRQHandler+0x3ae>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020dc:	d004      	beq.n	80020e8 <HAL_ADC_IRQHandler+0x380>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a67      	ldr	r2, [pc, #412]	@ (8002280 <HAL_ADC_IRQHandler+0x518>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d106      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x38e>
 80020e8:	4b66      	ldr	r3, [pc, #408]	@ (8002284 <HAL_ADC_IRQHandler+0x51c>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	2b07      	cmp	r3, #7
 80020f2:	d010      	beq.n	8002116 <HAL_ADC_IRQHandler+0x3ae>
 80020f4:	e005      	b.n	8002102 <HAL_ADC_IRQHandler+0x39a>
 80020f6:	4b64      	ldr	r3, [pc, #400]	@ (8002288 <HAL_ADC_IRQHandler+0x520>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2b07      	cmp	r3, #7
 8002100:	d009      	beq.n	8002116 <HAL_ADC_IRQHandler+0x3ae>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800210a:	d004      	beq.n	8002116 <HAL_ADC_IRQHandler+0x3ae>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a5a      	ldr	r2, [pc, #360]	@ (800227c <HAL_ADC_IRQHandler+0x514>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d104      	bne.n	8002120 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e00f      	b.n	8002140 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002128:	d004      	beq.n	8002134 <HAL_ADC_IRQHandler+0x3cc>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a54      	ldr	r2, [pc, #336]	@ (8002280 <HAL_ADC_IRQHandler+0x518>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d102      	bne.n	800213a <HAL_ADC_IRQHandler+0x3d2>
 8002134:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002138:	e000      	b.n	800213c <HAL_ADC_IRQHandler+0x3d4>
 800213a:	4b50      	ldr	r3, [pc, #320]	@ (800227c <HAL_ADC_IRQHandler+0x514>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d12d      	bne.n	80021a6 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d11a      	bne.n	800218e <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002166:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d112      	bne.n	80021a6 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	@ 0x40
 800218c:	e00b      	b.n	80021a6 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f043 0210 	orr.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f936 	bl	8002418 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2260      	movs	r2, #96	@ 0x60
 80021b2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d011      	beq.n	80021e2 <HAL_ADC_IRQHandler+0x47a>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00c      	beq.n	80021e2 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff fa9d 	bl	8001714 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2280      	movs	r2, #128	@ 0x80
 80021e0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d012      	beq.n	8002212 <HAL_ADC_IRQHandler+0x4aa>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00d      	beq.n	8002212 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f91c 	bl	8002440 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002210:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002218:	2b00      	cmp	r3, #0
 800221a:	d012      	beq.n	8002242 <HAL_ADC_IRQHandler+0x4da>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f90e 	bl	8002454 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002240:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d04f      	beq.n	80022ec <HAL_ADC_IRQHandler+0x584>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d04a      	beq.n	80022ec <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 800225e:	2301      	movs	r3, #1
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e02d      	b.n	80022c0 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800226c:	d004      	beq.n	8002278 <HAL_ADC_IRQHandler+0x510>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a03      	ldr	r2, [pc, #12]	@ (8002280 <HAL_ADC_IRQHandler+0x518>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d109      	bne.n	800228c <HAL_ADC_IRQHandler+0x524>
 8002278:	4b02      	ldr	r3, [pc, #8]	@ (8002284 <HAL_ADC_IRQHandler+0x51c>)
 800227a:	e008      	b.n	800228e <HAL_ADC_IRQHandler+0x526>
 800227c:	50000400 	.word	0x50000400
 8002280:	50000100 	.word	0x50000100
 8002284:	50000300 	.word	0x50000300
 8002288:	50000700 	.word	0x50000700
 800228c:	4b28      	ldr	r3, [pc, #160]	@ (8002330 <HAL_ADC_IRQHandler+0x5c8>)
 800228e:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	2b00      	cmp	r3, #0
 800229a:	d109      	bne.n	80022b0 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d10a      	bne.n	80022c0 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80022aa:	2301      	movs	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	e007      	b.n	80022c0 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80022bc:	2301      	movs	r3, #1
 80022be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10e      	bne.n	80022e4 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	f043 0202 	orr.w	r2, r3, #2
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff fa22 	bl	8001728 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2210      	movs	r2, #16
 80022ea:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d018      	beq.n	8002328 <HAL_ADC_IRQHandler+0x5c0>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002310:	f043 0208 	orr.w	r2, r3, #8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002320:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f882 	bl	800242c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002328:	bf00      	nop
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	50000700 	.word	0x50000700

08002334 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_ADCEx_Calibration_Start+0x1c>
 800234c:	2302      	movs	r3, #2
 800234e:	e05f      	b.n	8002410 <HAL_ADCEx_Calibration_Start+0xdc>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fd2b 	bl	8002db4 <ADC_Disable>
 800235e:	4603      	mov	r3, r0
 8002360:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d14e      	bne.n	8002406 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800237c:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d107      	bne.n	8002394 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002392:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80023a2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80023a4:	f7ff f9a0 	bl	80016e8 <HAL_GetTick>
 80023a8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80023aa:	e01c      	b.n	80023e6 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023ac:	f7ff f99c 	bl	80016e8 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b0a      	cmp	r3, #10
 80023b8:	d915      	bls.n	80023e6 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023c8:	d10d      	bne.n	80023e6 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f023 0312 	bic.w	r3, r3, #18
 80023d2:	f043 0210 	orr.w	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e014      	b.n	8002410 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80023f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023f4:	d0da      	beq.n	80023ac <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002468:	b480      	push	{r7}
 800246a:	b09b      	sub	sp, #108	@ 0x6c
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_ADC_ConfigChannel+0x22>
 8002486:	2302      	movs	r3, #2
 8002488:	e2c8      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x5b4>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	f040 82ac 	bne.w	80029fa <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d81c      	bhi.n	80024e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	461a      	mov	r2, r3
 80024be:	231f      	movs	r3, #31
 80024c0:	4093      	lsls	r3, r2
 80024c2:	43db      	mvns	r3, r3
 80024c4:	4019      	ands	r1, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fa00 f203 	lsl.w	r2, r0, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80024e2:	e063      	b.n	80025ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b09      	cmp	r3, #9
 80024ea:	d81e      	bhi.n	800252a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	3b1e      	subs	r3, #30
 8002500:	221f      	movs	r2, #31
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	4019      	ands	r1, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	3b1e      	subs	r3, #30
 800251c:	fa00 f203 	lsl.w	r2, r0, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	635a      	str	r2, [r3, #52]	@ 0x34
 8002528:	e040      	b.n	80025ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b0e      	cmp	r3, #14
 8002530:	d81e      	bhi.n	8002570 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	3b3c      	subs	r3, #60	@ 0x3c
 8002546:	221f      	movs	r2, #31
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	4019      	ands	r1, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	3b3c      	subs	r3, #60	@ 0x3c
 8002562:	fa00 f203 	lsl.w	r2, r0, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	639a      	str	r2, [r3, #56]	@ 0x38
 800256e:	e01d      	b.n	80025ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	3b5a      	subs	r3, #90	@ 0x5a
 8002584:	221f      	movs	r2, #31
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	4019      	ands	r1, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	3b5a      	subs	r3, #90	@ 0x5a
 80025a0:	fa00 f203 	lsl.w	r2, r0, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 80e5 	bne.w	8002786 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b09      	cmp	r3, #9
 80025c2:	d91c      	bls.n	80025fe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6999      	ldr	r1, [r3, #24]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	3b1e      	subs	r3, #30
 80025d6:	2207      	movs	r2, #7
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	4019      	ands	r1, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6898      	ldr	r0, [r3, #8]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	3b1e      	subs	r3, #30
 80025f0:	fa00 f203 	lsl.w	r2, r0, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	619a      	str	r2, [r3, #24]
 80025fc:	e019      	b.n	8002632 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6959      	ldr	r1, [r3, #20]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	2207      	movs	r2, #7
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	4019      	ands	r1, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6898      	ldr	r0, [r3, #8]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	fa00 f203 	lsl.w	r2, r0, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	08db      	lsrs	r3, r3, #3
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	3b01      	subs	r3, #1
 8002650:	2b03      	cmp	r3, #3
 8002652:	d84f      	bhi.n	80026f4 <HAL_ADC_ConfigChannel+0x28c>
 8002654:	a201      	add	r2, pc, #4	@ (adr r2, 800265c <HAL_ADC_ConfigChannel+0x1f4>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	0800266d 	.word	0x0800266d
 8002660:	0800268f 	.word	0x0800268f
 8002664:	080026b1 	.word	0x080026b1
 8002668:	080026d3 	.word	0x080026d3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002672:	4b99      	ldr	r3, [pc, #612]	@ (80028d8 <HAL_ADC_ConfigChannel+0x470>)
 8002674:	4013      	ands	r3, r2
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	0691      	lsls	r1, r2, #26
 800267c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800267e:	430a      	orrs	r2, r1
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800268a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800268c:	e07b      	b.n	8002786 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002694:	4b90      	ldr	r3, [pc, #576]	@ (80028d8 <HAL_ADC_ConfigChannel+0x470>)
 8002696:	4013      	ands	r3, r2
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	0691      	lsls	r1, r2, #26
 800269e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026a0:	430a      	orrs	r2, r1
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80026ac:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026ae:	e06a      	b.n	8002786 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80026b6:	4b88      	ldr	r3, [pc, #544]	@ (80028d8 <HAL_ADC_ConfigChannel+0x470>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	0691      	lsls	r1, r2, #26
 80026c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026c2:	430a      	orrs	r2, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80026ce:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026d0:	e059      	b.n	8002786 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80026d8:	4b7f      	ldr	r3, [pc, #508]	@ (80028d8 <HAL_ADC_ConfigChannel+0x470>)
 80026da:	4013      	ands	r3, r2
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	0691      	lsls	r1, r2, #26
 80026e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026e4:	430a      	orrs	r2, r1
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80026f0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026f2:	e048      	b.n	8002786 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	069b      	lsls	r3, r3, #26
 8002704:	429a      	cmp	r2, r3
 8002706:	d107      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002716:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800271e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	069b      	lsls	r3, r3, #26
 8002728:	429a      	cmp	r2, r3
 800272a:	d107      	bne.n	800273c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800273a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002742:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	069b      	lsls	r3, r3, #26
 800274c:	429a      	cmp	r2, r3
 800274e:	d107      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800275e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002766:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	069b      	lsls	r3, r3, #26
 8002770:	429a      	cmp	r2, r3
 8002772:	d107      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002782:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002784:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d108      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x33e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x33e>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x340>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 8131 	bne.w	8002a10 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d00f      	beq.n	80027d6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2201      	movs	r2, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43da      	mvns	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	400a      	ands	r2, r1
 80027d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80027d4:	e049      	b.n	800286a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	409a      	lsls	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b09      	cmp	r3, #9
 80027f6:	d91c      	bls.n	8002832 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6999      	ldr	r1, [r3, #24]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	3b1b      	subs	r3, #27
 800280a:	2207      	movs	r2, #7
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	4019      	ands	r1, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6898      	ldr	r0, [r3, #8]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	3b1b      	subs	r3, #27
 8002824:	fa00 f203 	lsl.w	r2, r0, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	619a      	str	r2, [r3, #24]
 8002830:	e01b      	b.n	800286a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6959      	ldr	r1, [r3, #20]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	2207      	movs	r2, #7
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	4019      	ands	r1, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6898      	ldr	r0, [r3, #8]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	fa00 f203 	lsl.w	r2, r0, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002872:	d004      	beq.n	800287e <HAL_ADC_ConfigChannel+0x416>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a18      	ldr	r2, [pc, #96]	@ (80028dc <HAL_ADC_ConfigChannel+0x474>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x41a>
 800287e:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <HAL_ADC_ConfigChannel+0x478>)
 8002880:	e000      	b.n	8002884 <HAL_ADC_ConfigChannel+0x41c>
 8002882:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <HAL_ADC_ConfigChannel+0x47c>)
 8002884:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b10      	cmp	r3, #16
 800288c:	d105      	bne.n	800289a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800288e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002896:	2b00      	cmp	r3, #0
 8002898:	d015      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800289e:	2b11      	cmp	r3, #17
 80028a0:	d105      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028b2:	2b12      	cmp	r3, #18
 80028b4:	f040 80ac 	bne.w	8002a10 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80028b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 80a5 	bne.w	8002a10 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028ce:	d10b      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x480>
 80028d0:	4b02      	ldr	r3, [pc, #8]	@ (80028dc <HAL_ADC_ConfigChannel+0x474>)
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	e023      	b.n	800291e <HAL_ADC_ConfigChannel+0x4b6>
 80028d6:	bf00      	nop
 80028d8:	83fff000 	.word	0x83fff000
 80028dc:	50000100 	.word	0x50000100
 80028e0:	50000300 	.word	0x50000300
 80028e4:	50000700 	.word	0x50000700
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002a28 <HAL_ADC_ConfigChannel+0x5c0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d103      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x492>
 80028f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e011      	b.n	800291e <HAL_ADC_ConfigChannel+0x4b6>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a4b      	ldr	r2, [pc, #300]	@ (8002a2c <HAL_ADC_ConfigChannel+0x5c4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d102      	bne.n	800290a <HAL_ADC_ConfigChannel+0x4a2>
 8002904:	4b4a      	ldr	r3, [pc, #296]	@ (8002a30 <HAL_ADC_ConfigChannel+0x5c8>)
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e009      	b.n	800291e <HAL_ADC_ConfigChannel+0x4b6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a48      	ldr	r2, [pc, #288]	@ (8002a30 <HAL_ADC_ConfigChannel+0x5c8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d102      	bne.n	800291a <HAL_ADC_ConfigChannel+0x4b2>
 8002914:	4b45      	ldr	r3, [pc, #276]	@ (8002a2c <HAL_ADC_ConfigChannel+0x5c4>)
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	e001      	b.n	800291e <HAL_ADC_ConfigChannel+0x4b6>
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d108      	bne.n	800293e <HAL_ADC_ConfigChannel+0x4d6>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x4d6>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_ADC_ConfigChannel+0x4d8>
 800293e:	2300      	movs	r3, #0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d150      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002944:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002946:	2b00      	cmp	r3, #0
 8002948:	d010      	beq.n	800296c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d107      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x4fe>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x4fe>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_ADC_ConfigChannel+0x500>
 8002966:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002968:	2b00      	cmp	r3, #0
 800296a:	d13c      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b10      	cmp	r3, #16
 8002972:	d11d      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x548>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800297c:	d118      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800297e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002988:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800298a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a34 <HAL_ADC_ConfigChannel+0x5cc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2a      	ldr	r2, [pc, #168]	@ (8002a38 <HAL_ADC_ConfigChannel+0x5d0>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	0c9a      	lsrs	r2, r3, #18
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029ae:	e02e      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b11      	cmp	r3, #17
 80029b6:	d10b      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x568>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c0:	d106      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80029c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80029ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029cc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029ce:	e01e      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b12      	cmp	r3, #18
 80029d6:	d11a      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80029d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029e2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029e4:	e013      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80029f8:	e00a      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002a0c:	e000      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a0e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	376c      	adds	r7, #108	@ 0x6c
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	50000100 	.word	0x50000100
 8002a2c:	50000400 	.word	0x50000400
 8002a30:	50000500 	.word	0x50000500
 8002a34:	20000000 	.word	0x20000000
 8002a38:	431bde83 	.word	0x431bde83

08002a3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b099      	sub	sp, #100	@ 0x64
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a54:	d102      	bne.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002a56:	4b6d      	ldr	r3, [pc, #436]	@ (8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	e01a      	b.n	8002a92 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a6a      	ldr	r2, [pc, #424]	@ (8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d103      	bne.n	8002a6e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002a66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	e011      	b.n	8002a92 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a67      	ldr	r2, [pc, #412]	@ (8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d102      	bne.n	8002a7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a78:	4b66      	ldr	r3, [pc, #408]	@ (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	e009      	b.n	8002a92 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a64      	ldr	r2, [pc, #400]	@ (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d102      	bne.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a88:	4b61      	ldr	r3, [pc, #388]	@ (8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	e001      	b.n	8002a92 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b0      	b.n	8002bfe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e0a9      	b.n	8002bfe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 808d 	bne.w	8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 8086 	bne.w	8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ad8:	d004      	beq.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a4b      	ldr	r2, [pc, #300]	@ (8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ae4:	4b4c      	ldr	r3, [pc, #304]	@ (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002ae6:	e000      	b.n	8002aea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002aea:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d040      	beq.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b06:	035b      	lsls	r3, r3, #13
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b0e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d108      	bne.n	8002b30 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002b30:	2300      	movs	r3, #0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d15c      	bne.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d107      	bne.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002b52:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d14b      	bne.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b60:	f023 030f 	bic.w	r3, r3, #15
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	6811      	ldr	r1, [r2, #0]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	6892      	ldr	r2, [r2, #8]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b72:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b74:	e03c      	b.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b80:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d108      	bne.n	8002ba2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d123      	bne.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d107      	bne.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002bc4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d112      	bne.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002bca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bd2:	f023 030f 	bic.w	r3, r3, #15
 8002bd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002bd8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bda:	e009      	b.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002bee:	e000      	b.n	8002bf2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3764      	adds	r7, #100	@ 0x64
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	50000100 	.word	0x50000100
 8002c10:	50000400 	.word	0x50000400
 8002c14:	50000500 	.word	0x50000500
 8002c18:	50000300 	.word	0x50000300
 8002c1c:	50000700 	.word	0x50000700

08002c20 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d126      	bne.n	8002c88 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d115      	bne.n	8002c80 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d111      	bne.n	8002c80 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f7fe fa93 	bl	80011ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002c86:	e004      	b.n	8002c92 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7fe fd29 	bl	8001700 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd4:	f043 0204 	orr.w	r2, r3, #4
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7fe fd23 	bl	8001728 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d108      	bne.n	8002d18 <ADC_Enable+0x2c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <ADC_Enable+0x2c>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <ADC_Enable+0x2e>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d143      	bne.n	8002da6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	4b22      	ldr	r3, [pc, #136]	@ (8002db0 <ADC_Enable+0xc4>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00d      	beq.n	8002d48 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	f043 0210 	orr.w	r2, r3, #16
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3c:	f043 0201 	orr.w	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e02f      	b.n	8002da8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002d58:	f7fe fcc6 	bl	80016e8 <HAL_GetTick>
 8002d5c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d5e:	e01b      	b.n	8002d98 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d60:	f7fe fcc2 	bl	80016e8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d914      	bls.n	8002d98 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d00d      	beq.n	8002d98 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	f043 0210 	orr.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d1dc      	bne.n	8002d60 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	8000003f 	.word	0x8000003f

08002db4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d108      	bne.n	8002de0 <ADC_Disable+0x2c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <ADC_Disable+0x2c>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <ADC_Disable+0x2e>
 8002de0:	2300      	movs	r3, #0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d047      	beq.n	8002e76 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 030d 	and.w	r3, r3, #13
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d10f      	bne.n	8002e14 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0202 	orr.w	r2, r2, #2
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2203      	movs	r2, #3
 8002e0a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fc6c 	bl	80016e8 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e12:	e029      	b.n	8002e68 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	f043 0210 	orr.w	r2, r3, #16
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e023      	b.n	8002e78 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e30:	f7fe fc5a 	bl	80016e8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d914      	bls.n	8002e68 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10d      	bne.n	8002e68 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	f043 0210 	orr.w	r2, r3, #16
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5c:	f043 0201 	orr.w	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e007      	b.n	8002e78 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d0dc      	beq.n	8002e30 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb2:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	60d3      	str	r3, [r2, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ecc:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f003 0307 	and.w	r3, r3, #7
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	db0b      	blt.n	8002f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	4907      	ldr	r1, [pc, #28]	@ (8002f1c <__NVIC_EnableIRQ+0x38>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2001      	movs	r0, #1
 8002f06:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000e100 	.word	0xe000e100

08002f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	db0a      	blt.n	8002f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	490c      	ldr	r1, [pc, #48]	@ (8002f6c <__NVIC_SetPriority+0x4c>)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	0112      	lsls	r2, r2, #4
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	440b      	add	r3, r1
 8002f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f48:	e00a      	b.n	8002f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4908      	ldr	r1, [pc, #32]	@ (8002f70 <__NVIC_SetPriority+0x50>)
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	3b04      	subs	r3, #4
 8002f58:	0112      	lsls	r2, r2, #4
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	761a      	strb	r2, [r3, #24]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e100 	.word	0xe000e100
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	@ 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f1c3 0307 	rsb	r3, r3, #7
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	bf28      	it	cs
 8002f92:	2304      	movcs	r3, #4
 8002f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d902      	bls.n	8002fa4 <NVIC_EncodePriority+0x30>
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3b03      	subs	r3, #3
 8002fa2:	e000      	b.n	8002fa6 <NVIC_EncodePriority+0x32>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	43d9      	mvns	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	4313      	orrs	r3, r2
         );
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3724      	adds	r7, #36	@ 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fec:	d301      	bcc.n	8002ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00f      	b.n	8003012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <SysTick_Config+0x40>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffa:	210f      	movs	r1, #15
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	f7ff ff8e 	bl	8002f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003004:	4b05      	ldr	r3, [pc, #20]	@ (800301c <SysTick_Config+0x40>)
 8003006:	2200      	movs	r2, #0
 8003008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300a:	4b04      	ldr	r3, [pc, #16]	@ (800301c <SysTick_Config+0x40>)
 800300c:	2207      	movs	r2, #7
 800300e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	e000e010 	.word	0xe000e010

08003020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff29 	bl	8002e80 <__NVIC_SetPriorityGrouping>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	4603      	mov	r3, r0
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003048:	f7ff ff3e 	bl	8002ec8 <__NVIC_GetPriorityGrouping>
 800304c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	6978      	ldr	r0, [r7, #20]
 8003054:	f7ff ff8e 	bl	8002f74 <NVIC_EncodePriority>
 8003058:	4602      	mov	r2, r0
 800305a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff5d 	bl	8002f20 <__NVIC_SetPriority>
}
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	4603      	mov	r3, r0
 8003076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff31 	bl	8002ee4 <__NVIC_EnableIRQ>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff ffa2 	bl	8002fdc <SysTick_Config>
 8003098:	4603      	mov	r3, r0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e037      	b.n	8003128 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80030d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80030dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f940 	bl	8003390 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_DMA_Start_IT+0x20>
 800314c:	2302      	movs	r3, #2
 800314e:	e04a      	b.n	80031e6 <HAL_DMA_Start_IT+0xb6>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800315e:	2b01      	cmp	r3, #1
 8003160:	d13a      	bne.n	80031d8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f8d4 	bl	8003334 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 020e 	orr.w	r2, r2, #14
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e00f      	b.n	80031c6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 020a 	orr.w	r2, r2, #10
 80031b4:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0204 	bic.w	r2, r2, #4
 80031c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e005      	b.n	80031e4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
 80031e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2204      	movs	r2, #4
 800320c:	409a      	lsls	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d024      	beq.n	8003260 <HAL_DMA_IRQHandler+0x72>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01f      	beq.n	8003260 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0204 	bic.w	r2, r2, #4
 800323c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003246:	2104      	movs	r1, #4
 8003248:	fa01 f202 	lsl.w	r2, r1, r2
 800324c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d06a      	beq.n	800332c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800325e:	e065      	b.n	800332c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003264:	2202      	movs	r2, #2
 8003266:	409a      	lsls	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d02c      	beq.n	80032ca <HAL_DMA_IRQHandler+0xdc>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d027      	beq.n	80032ca <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 020a 	bic.w	r2, r2, #10
 8003296:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a8:	2102      	movs	r1, #2
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d035      	beq.n	800332c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032c8:	e030      	b.n	800332c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	2208      	movs	r2, #8
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d028      	beq.n	800332c <HAL_DMA_IRQHandler+0x13e>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d023      	beq.n	800332c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 020e 	bic.w	r2, r2, #14
 80032f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fc:	2101      	movs	r1, #1
 80032fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003302:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
    }
  }
}
 800332a:	e7ff      	b.n	800332c <HAL_DMA_IRQHandler+0x13e>
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b10      	cmp	r3, #16
 8003360:	d108      	bne.n	8003374 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003372:	e007      	b.n	8003384 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	60da      	str	r2, [r3, #12]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	4b14      	ldr	r3, [pc, #80]	@ (80033f0 <DMA_CalcBaseAndBitshift+0x60>)
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d80f      	bhi.n	80033c4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b12      	ldr	r3, [pc, #72]	@ (80033f4 <DMA_CalcBaseAndBitshift+0x64>)
 80033ac:	4413      	add	r3, r2
 80033ae:	4a12      	ldr	r2, [pc, #72]	@ (80033f8 <DMA_CalcBaseAndBitshift+0x68>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	009a      	lsls	r2, r3, #2
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a0f      	ldr	r2, [pc, #60]	@ (80033fc <DMA_CalcBaseAndBitshift+0x6c>)
 80033c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80033c2:	e00e      	b.n	80033e2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003400 <DMA_CalcBaseAndBitshift+0x70>)
 80033cc:	4413      	add	r3, r2
 80033ce:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <DMA_CalcBaseAndBitshift+0x68>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	009a      	lsls	r2, r3, #2
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a09      	ldr	r2, [pc, #36]	@ (8003404 <DMA_CalcBaseAndBitshift+0x74>)
 80033e0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40020407 	.word	0x40020407
 80033f4:	bffdfff8 	.word	0xbffdfff8
 80033f8:	cccccccd 	.word	0xcccccccd
 80033fc:	40020000 	.word	0x40020000
 8003400:	bffdfbf8 	.word	0xbffdfbf8
 8003404:	40020400 	.word	0x40020400

08003408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003416:	e160      	b.n	80036da <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2101      	movs	r1, #1
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	fa01 f303 	lsl.w	r3, r1, r3
 8003424:	4013      	ands	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 8152 	beq.w	80036d4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d005      	beq.n	8003448 <HAL_GPIO_Init+0x40>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d130      	bne.n	80034aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800347e:	2201      	movs	r2, #1
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0201 	and.w	r2, r3, #1
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d017      	beq.n	80034e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2203      	movs	r2, #3
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d123      	bne.n	800353a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	08da      	lsrs	r2, r3, #3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3208      	adds	r2, #8
 80034fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	220f      	movs	r2, #15
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	08da      	lsrs	r2, r3, #3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3208      	adds	r2, #8
 8003534:	6939      	ldr	r1, [r7, #16]
 8003536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	2203      	movs	r2, #3
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0203 	and.w	r2, r3, #3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80ac 	beq.w	80036d4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357c:	4b5e      	ldr	r3, [pc, #376]	@ (80036f8 <HAL_GPIO_Init+0x2f0>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	4a5d      	ldr	r2, [pc, #372]	@ (80036f8 <HAL_GPIO_Init+0x2f0>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6193      	str	r3, [r2, #24]
 8003588:	4b5b      	ldr	r3, [pc, #364]	@ (80036f8 <HAL_GPIO_Init+0x2f0>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003594:	4a59      	ldr	r2, [pc, #356]	@ (80036fc <HAL_GPIO_Init+0x2f4>)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	089b      	lsrs	r3, r3, #2
 800359a:	3302      	adds	r3, #2
 800359c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	220f      	movs	r2, #15
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035be:	d025      	beq.n	800360c <HAL_GPIO_Init+0x204>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a4f      	ldr	r2, [pc, #316]	@ (8003700 <HAL_GPIO_Init+0x2f8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d01f      	beq.n	8003608 <HAL_GPIO_Init+0x200>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a4e      	ldr	r2, [pc, #312]	@ (8003704 <HAL_GPIO_Init+0x2fc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d019      	beq.n	8003604 <HAL_GPIO_Init+0x1fc>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003708 <HAL_GPIO_Init+0x300>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <HAL_GPIO_Init+0x1f8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a4c      	ldr	r2, [pc, #304]	@ (800370c <HAL_GPIO_Init+0x304>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00d      	beq.n	80035fc <HAL_GPIO_Init+0x1f4>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a4b      	ldr	r2, [pc, #300]	@ (8003710 <HAL_GPIO_Init+0x308>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <HAL_GPIO_Init+0x1f0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003714 <HAL_GPIO_Init+0x30c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_GPIO_Init+0x1ec>
 80035f0:	2306      	movs	r3, #6
 80035f2:	e00c      	b.n	800360e <HAL_GPIO_Init+0x206>
 80035f4:	2307      	movs	r3, #7
 80035f6:	e00a      	b.n	800360e <HAL_GPIO_Init+0x206>
 80035f8:	2305      	movs	r3, #5
 80035fa:	e008      	b.n	800360e <HAL_GPIO_Init+0x206>
 80035fc:	2304      	movs	r3, #4
 80035fe:	e006      	b.n	800360e <HAL_GPIO_Init+0x206>
 8003600:	2303      	movs	r3, #3
 8003602:	e004      	b.n	800360e <HAL_GPIO_Init+0x206>
 8003604:	2302      	movs	r3, #2
 8003606:	e002      	b.n	800360e <HAL_GPIO_Init+0x206>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_GPIO_Init+0x206>
 800360c:	2300      	movs	r3, #0
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	f002 0203 	and.w	r2, r2, #3
 8003614:	0092      	lsls	r2, r2, #2
 8003616:	4093      	lsls	r3, r2
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800361e:	4937      	ldr	r1, [pc, #220]	@ (80036fc <HAL_GPIO_Init+0x2f4>)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	089b      	lsrs	r3, r3, #2
 8003624:	3302      	adds	r3, #2
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800362c:	4b3a      	ldr	r3, [pc, #232]	@ (8003718 <HAL_GPIO_Init+0x310>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	43db      	mvns	r3, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003650:	4a31      	ldr	r2, [pc, #196]	@ (8003718 <HAL_GPIO_Init+0x310>)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003656:	4b30      	ldr	r3, [pc, #192]	@ (8003718 <HAL_GPIO_Init+0x310>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800367a:	4a27      	ldr	r2, [pc, #156]	@ (8003718 <HAL_GPIO_Init+0x310>)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003680:	4b25      	ldr	r3, [pc, #148]	@ (8003718 <HAL_GPIO_Init+0x310>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	43db      	mvns	r3, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80036a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003718 <HAL_GPIO_Init+0x310>)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <HAL_GPIO_Init+0x310>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	43db      	mvns	r3, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80036ce:	4a12      	ldr	r2, [pc, #72]	@ (8003718 <HAL_GPIO_Init+0x310>)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3301      	adds	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f47f ae97 	bne.w	8003418 <HAL_GPIO_Init+0x10>
  }
}
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010000 	.word	0x40010000
 8003700:	48000400 	.word	0x48000400
 8003704:	48000800 	.word	0x48000800
 8003708:	48000c00 	.word	0x48000c00
 800370c:	48001000 	.word	0x48001000
 8003710:	48001400 	.word	0x48001400
 8003714:	48001800 	.word	0x48001800
 8003718:	40010400 	.word	0x40010400

0800371c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	807b      	strh	r3, [r7, #2]
 8003728:	4613      	mov	r3, r2
 800372a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800372c:	787b      	ldrb	r3, [r7, #1]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003732:	887a      	ldrh	r2, [r7, #2]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003738:	e002      	b.n	8003740 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4013      	ands	r3, r2
 8003764:	041a      	lsls	r2, r3, #16
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	43d9      	mvns	r1, r3
 800376a:	887b      	ldrh	r3, [r7, #2]
 800376c:	400b      	ands	r3, r1
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	619a      	str	r2, [r3, #24]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003786:	af00      	add	r7, sp, #0
 8003788:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800378c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003790:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003792:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003796:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f001 b83a 	b.w	800481a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 816f 	beq.w	8003a9a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80037bc:	4bb5      	ldr	r3, [pc, #724]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d00c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037c8:	4bb2      	ldr	r3, [pc, #712]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d15c      	bne.n	800388e <HAL_RCC_OscConfig+0x10e>
 80037d4:	4baf      	ldr	r3, [pc, #700]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e0:	d155      	bne.n	800388e <HAL_RCC_OscConfig+0x10e>
 80037e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037e6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d102      	bne.n	8003814 <HAL_RCC_OscConfig+0x94>
 800380e:	4ba1      	ldr	r3, [pc, #644]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	e015      	b.n	8003840 <HAL_RCC_OscConfig+0xc0>
 8003814:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003818:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003828:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800382c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003830:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003834:	fa93 f3a3 	rbit	r3, r3
 8003838:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800383c:	4b95      	ldr	r3, [pc, #596]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003844:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003848:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800384c:	fa92 f2a2 	rbit	r2, r2
 8003850:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8003854:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003858:	fab2 f282 	clz	r2, r2
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	f042 0220 	orr.w	r2, r2, #32
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	f002 021f 	and.w	r2, r2, #31
 8003868:	2101      	movs	r1, #1
 800386a:	fa01 f202 	lsl.w	r2, r1, r2
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8111 	beq.w	8003a98 <HAL_RCC_OscConfig+0x318>
 8003876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800387a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 8108 	bne.w	8003a98 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f000 bfc6 	b.w	800481a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003892:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x12e>
 80038a0:	4b7c      	ldr	r3, [pc, #496]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a7b      	ldr	r2, [pc, #492]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80038a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e036      	b.n	800391c <HAL_RCC_OscConfig+0x19c>
 80038ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x158>
 80038be:	4b75      	ldr	r3, [pc, #468]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a74      	ldr	r2, [pc, #464]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80038c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b72      	ldr	r3, [pc, #456]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a71      	ldr	r2, [pc, #452]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80038d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e021      	b.n	800391c <HAL_RCC_OscConfig+0x19c>
 80038d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e8:	d10c      	bne.n	8003904 <HAL_RCC_OscConfig+0x184>
 80038ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a69      	ldr	r2, [pc, #420]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80038f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	4b67      	ldr	r3, [pc, #412]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a66      	ldr	r2, [pc, #408]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e00b      	b.n	800391c <HAL_RCC_OscConfig+0x19c>
 8003904:	4b63      	ldr	r3, [pc, #396]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a62      	ldr	r2, [pc, #392]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 800390a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b60      	ldr	r3, [pc, #384]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a5f      	ldr	r2, [pc, #380]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 8003916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800391a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800391c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003920:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d059      	beq.n	80039e0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fd fedc 	bl	80016e8 <HAL_GetTick>
 8003930:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003934:	e00a      	b.n	800394c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003936:	f7fd fed7 	bl	80016e8 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	@ 0x64
 8003944:	d902      	bls.n	800394c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	f000 bf67 	b.w	800481a <HAL_RCC_OscConfig+0x109a>
 800394c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003950:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003960:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d102      	bne.n	800397e <HAL_RCC_OscConfig+0x1fe>
 8003978:	4b46      	ldr	r3, [pc, #280]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	e015      	b.n	80039aa <HAL_RCC_OscConfig+0x22a>
 800397e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003982:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003992:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003996:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800399a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80039a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039ae:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80039b2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80039b6:	fa92 f2a2 	rbit	r2, r2
 80039ba:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80039be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80039c2:	fab2 f282 	clz	r2, r2
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	f042 0220 	orr.w	r2, r2, #32
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	f002 021f 	and.w	r2, r2, #31
 80039d2:	2101      	movs	r1, #1
 80039d4:	fa01 f202 	lsl.w	r2, r1, r2
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0ab      	beq.n	8003936 <HAL_RCC_OscConfig+0x1b6>
 80039de:	e05c      	b.n	8003a9a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fd fe82 	bl	80016e8 <HAL_GetTick>
 80039e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ea:	f7fd fe7d 	bl	80016e8 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	@ 0x64
 80039f8:	d902      	bls.n	8003a00 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	f000 bf0d 	b.w	800481a <HAL_RCC_OscConfig+0x109a>
 8003a00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a04:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003a0c:	fa93 f3a3 	rbit	r3, r3
 8003a10:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003a14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a18:	fab3 f383 	clz	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d102      	bne.n	8003a32 <HAL_RCC_OscConfig+0x2b2>
 8003a2c:	4b19      	ldr	r3, [pc, #100]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	e015      	b.n	8003a5e <HAL_RCC_OscConfig+0x2de>
 8003a32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a36:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003a46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a4a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003a4e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <HAL_RCC_OscConfig+0x314>)
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a62:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003a66:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003a6a:	fa92 f2a2 	rbit	r2, r2
 8003a6e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003a72:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003a76:	fab2 f282 	clz	r2, r2
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	f042 0220 	orr.w	r2, r2, #32
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	f002 021f 	and.w	r2, r2, #31
 8003a86:	2101      	movs	r1, #1
 8003a88:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1ab      	bne.n	80039ea <HAL_RCC_OscConfig+0x26a>
 8003a92:	e002      	b.n	8003a9a <HAL_RCC_OscConfig+0x31a>
 8003a94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 817f 	beq.w	8003dae <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ab0:	4ba7      	ldr	r3, [pc, #668]	@ (8003d50 <HAL_RCC_OscConfig+0x5d0>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 030c 	and.w	r3, r3, #12
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00c      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003abc:	4ba4      	ldr	r3, [pc, #656]	@ (8003d50 <HAL_RCC_OscConfig+0x5d0>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d173      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x430>
 8003ac8:	4ba1      	ldr	r3, [pc, #644]	@ (8003d50 <HAL_RCC_OscConfig+0x5d0>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad4:	d16c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x430>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003ae8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d102      	bne.n	8003b06 <HAL_RCC_OscConfig+0x386>
 8003b00:	4b93      	ldr	r3, [pc, #588]	@ (8003d50 <HAL_RCC_OscConfig+0x5d0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	e013      	b.n	8003b2e <HAL_RCC_OscConfig+0x3ae>
 8003b06:	2302      	movs	r3, #2
 8003b08:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003b18:	2302      	movs	r3, #2
 8003b1a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003b1e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003b2a:	4b89      	ldr	r3, [pc, #548]	@ (8003d50 <HAL_RCC_OscConfig+0x5d0>)
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003b34:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003b38:	fa92 f2a2 	rbit	r2, r2
 8003b3c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003b40:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003b44:	fab2 f282 	clz	r2, r2
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	f042 0220 	orr.w	r2, r2, #32
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	f002 021f 	and.w	r2, r2, #31
 8003b54:	2101      	movs	r1, #1
 8003b56:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCC_OscConfig+0x3f6>
 8003b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d002      	beq.n	8003b76 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f000 be52 	b.w	800481a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b76:	4b76      	ldr	r3, [pc, #472]	@ (8003d50 <HAL_RCC_OscConfig+0x5d0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	21f8      	movs	r1, #248	@ 0xf8
 8003b8c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003b94:	fa91 f1a1 	rbit	r1, r1
 8003b98:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003b9c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003ba0:	fab1 f181 	clz	r1, r1
 8003ba4:	b2c9      	uxtb	r1, r1
 8003ba6:	408b      	lsls	r3, r1
 8003ba8:	4969      	ldr	r1, [pc, #420]	@ (8003d50 <HAL_RCC_OscConfig+0x5d0>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	e0fe      	b.n	8003dae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8088 	beq.w	8003cd2 <HAL_RCC_OscConfig+0x552>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003bd4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd8:	fab3 f383 	clz	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003be2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	461a      	mov	r2, r3
 8003bea:	2301      	movs	r3, #1
 8003bec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bee:	f7fd fd7b 	bl	80016e8 <HAL_GetTick>
 8003bf2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf8:	f7fd fd76 	bl	80016e8 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d902      	bls.n	8003c0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	f000 be06 	b.w	800481a <HAL_RCC_OscConfig+0x109a>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003c20:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c24:	fab3 f383 	clz	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d102      	bne.n	8003c3e <HAL_RCC_OscConfig+0x4be>
 8003c38:	4b45      	ldr	r3, [pc, #276]	@ (8003d50 <HAL_RCC_OscConfig+0x5d0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	e013      	b.n	8003c66 <HAL_RCC_OscConfig+0x4e6>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003c50:	2302      	movs	r3, #2
 8003c52:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003c56:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003c62:	4b3b      	ldr	r3, [pc, #236]	@ (8003d50 <HAL_RCC_OscConfig+0x5d0>)
 8003c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c66:	2202      	movs	r2, #2
 8003c68:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003c6c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003c70:	fa92 f2a2 	rbit	r2, r2
 8003c74:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003c78:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003c7c:	fab2 f282 	clz	r2, r2
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	f042 0220 	orr.w	r2, r2, #32
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	f002 021f 	and.w	r2, r2, #31
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0af      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c98:	4b2d      	ldr	r3, [pc, #180]	@ (8003d50 <HAL_RCC_OscConfig+0x5d0>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ca4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	21f8      	movs	r1, #248	@ 0xf8
 8003cae:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003cb6:	fa91 f1a1 	rbit	r1, r1
 8003cba:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003cbe:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003cc2:	fab1 f181 	clz	r1, r1
 8003cc6:	b2c9      	uxtb	r1, r1
 8003cc8:	408b      	lsls	r3, r1
 8003cca:	4921      	ldr	r1, [pc, #132]	@ (8003d50 <HAL_RCC_OscConfig+0x5d0>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]
 8003cd0:	e06d      	b.n	8003dae <HAL_RCC_OscConfig+0x62e>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003ce4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cf2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfe:	f7fd fcf3 	bl	80016e8 <HAL_GetTick>
 8003d02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fd fcee 	bl	80016e8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d902      	bls.n	8003d1e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	f000 bd7e 	b.w	800481a <HAL_RCC_OscConfig+0x109a>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003d28:	fa93 f3a3 	rbit	r3, r3
 8003d2c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003d30:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d34:	fab3 f383 	clz	r3, r3
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d105      	bne.n	8003d54 <HAL_RCC_OscConfig+0x5d4>
 8003d48:	4b01      	ldr	r3, [pc, #4]	@ (8003d50 <HAL_RCC_OscConfig+0x5d0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	e016      	b.n	8003d7c <HAL_RCC_OscConfig+0x5fc>
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	2302      	movs	r3, #2
 8003d56:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003d5e:	fa93 f3a3 	rbit	r3, r3
 8003d62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003d66:	2302      	movs	r3, #2
 8003d68:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003d6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003d78:	4bbf      	ldr	r3, [pc, #764]	@ (8004078 <HAL_RCC_OscConfig+0x8f8>)
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003d82:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003d86:	fa92 f2a2 	rbit	r2, r2
 8003d8a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003d8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003d92:	fab2 f282 	clz	r2, r2
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	f042 0220 	orr.w	r2, r2, #32
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	f002 021f 	and.w	r2, r2, #31
 8003da2:	2101      	movs	r1, #1
 8003da4:	fa01 f202 	lsl.w	r2, r1, r2
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ac      	bne.n	8003d08 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003db2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 8113 	beq.w	8003fea <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d07c      	beq.n	8003ece <HAL_RCC_OscConfig+0x74e>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003de6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	4ba2      	ldr	r3, [pc, #648]	@ (800407c <HAL_RCC_OscConfig+0x8fc>)
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfe:	f7fd fc73 	bl	80016e8 <HAL_GetTick>
 8003e02:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e08:	f7fd fc6e 	bl	80016e8 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d902      	bls.n	8003e1e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	f000 bcfe 	b.w	800481a <HAL_RCC_OscConfig+0x109a>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e28:	fa93 f2a3 	rbit	r2, r3
 8003e2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e30:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e3e:	2202      	movs	r2, #2
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	fa93 f2a3 	rbit	r2, r3
 8003e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003e62:	2202      	movs	r2, #2
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	fa93 f2a3 	rbit	r2, r3
 8003e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003e7c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7e:	4b7e      	ldr	r3, [pc, #504]	@ (8004078 <HAL_RCC_OscConfig+0x8f8>)
 8003e80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	6019      	str	r1, [r3, #0]
 8003e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	fa93 f1a3 	rbit	r1, r3
 8003e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ea0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ea4:	6019      	str	r1, [r3, #0]
  return result;
 8003ea6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eaa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d09d      	beq.n	8003e08 <HAL_RCC_OscConfig+0x688>
 8003ecc:	e08d      	b.n	8003fea <HAL_RCC_OscConfig+0x86a>
 8003ece:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ed2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ede:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	fa93 f2a3 	rbit	r2, r3
 8003ee8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003ef0:	601a      	str	r2, [r3, #0]
  return result;
 8003ef2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ef6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003efa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b5d      	ldr	r3, [pc, #372]	@ (800407c <HAL_RCC_OscConfig+0x8fc>)
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f10:	f7fd fbea 	bl	80016e8 <HAL_GetTick>
 8003f14:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f1a:	f7fd fbe5 	bl	80016e8 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d902      	bls.n	8003f30 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	f000 bc75 	b.w	800481a <HAL_RCC_OscConfig+0x109a>
 8003f30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f38:	2202      	movs	r2, #2
 8003f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f40:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	fa93 f2a3 	rbit	r2, r3
 8003f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	fa93 f2a3 	rbit	r2, r3
 8003f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f72:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003f80:	2202      	movs	r2, #2
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f88:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	fa93 f2a3 	rbit	r2, r3
 8003f92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003f9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9c:	4b36      	ldr	r3, [pc, #216]	@ (8004078 <HAL_RCC_OscConfig+0x8f8>)
 8003f9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fa4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003fa8:	2102      	movs	r1, #2
 8003faa:	6019      	str	r1, [r3, #0]
 8003fac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fb0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	fa93 f1a3 	rbit	r1, r3
 8003fba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fbe:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003fc2:	6019      	str	r1, [r3, #0]
  return result;
 8003fc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fc8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	fab3 f383 	clz	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	2101      	movs	r1, #1
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d197      	bne.n	8003f1a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 81a5 	beq.w	800434a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004000:	2300      	movs	r3, #0
 8004002:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004006:	4b1c      	ldr	r3, [pc, #112]	@ (8004078 <HAL_RCC_OscConfig+0x8f8>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d116      	bne.n	8004040 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	4b19      	ldr	r3, [pc, #100]	@ (8004078 <HAL_RCC_OscConfig+0x8f8>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	4a18      	ldr	r2, [pc, #96]	@ (8004078 <HAL_RCC_OscConfig+0x8f8>)
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800401c:	61d3      	str	r3, [r2, #28]
 800401e:	4b16      	ldr	r3, [pc, #88]	@ (8004078 <HAL_RCC_OscConfig+0x8f8>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004026:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800402a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004034:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004038:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004040:	4b0f      	ldr	r3, [pc, #60]	@ (8004080 <HAL_RCC_OscConfig+0x900>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d121      	bne.n	8004090 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800404c:	4b0c      	ldr	r3, [pc, #48]	@ (8004080 <HAL_RCC_OscConfig+0x900>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a0b      	ldr	r2, [pc, #44]	@ (8004080 <HAL_RCC_OscConfig+0x900>)
 8004052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004056:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004058:	f7fd fb46 	bl	80016e8 <HAL_GetTick>
 800405c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	e010      	b.n	8004084 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004062:	f7fd fb41 	bl	80016e8 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	d908      	bls.n	8004084 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e3d1      	b.n	800481a <HAL_RCC_OscConfig+0x109a>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	10908120 	.word	0x10908120
 8004080:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004084:	4b8d      	ldr	r3, [pc, #564]	@ (80042bc <HAL_RCC_OscConfig+0xb3c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0e8      	beq.n	8004062 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004090:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004094:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x92e>
 80040a0:	4b87      	ldr	r3, [pc, #540]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4a86      	ldr	r2, [pc, #536]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6213      	str	r3, [r2, #32]
 80040ac:	e035      	b.n	800411a <HAL_RCC_OscConfig+0x99a>
 80040ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x958>
 80040be:	4b80      	ldr	r3, [pc, #512]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	4a7f      	ldr	r2, [pc, #508]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	6213      	str	r3, [r2, #32]
 80040ca:	4b7d      	ldr	r3, [pc, #500]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4a7c      	ldr	r2, [pc, #496]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	6213      	str	r3, [r2, #32]
 80040d6:	e020      	b.n	800411a <HAL_RCC_OscConfig+0x99a>
 80040d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d10c      	bne.n	8004102 <HAL_RCC_OscConfig+0x982>
 80040e8:	4b75      	ldr	r3, [pc, #468]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4a74      	ldr	r2, [pc, #464]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	6213      	str	r3, [r2, #32]
 80040f4:	4b72      	ldr	r3, [pc, #456]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4a71      	ldr	r2, [pc, #452]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6213      	str	r3, [r2, #32]
 8004100:	e00b      	b.n	800411a <HAL_RCC_OscConfig+0x99a>
 8004102:	4b6f      	ldr	r3, [pc, #444]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4a6e      	ldr	r2, [pc, #440]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	6213      	str	r3, [r2, #32]
 800410e:	4b6c      	ldr	r3, [pc, #432]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4a6b      	ldr	r2, [pc, #428]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 8004114:	f023 0304 	bic.w	r3, r3, #4
 8004118:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800411a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800411e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8081 	beq.w	800422e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412c:	f7fd fadc 	bl	80016e8 <HAL_GetTick>
 8004130:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004134:	e00b      	b.n	800414e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd fad7 	bl	80016e8 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e365      	b.n	800481a <HAL_RCC_OscConfig+0x109a>
 800414e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004152:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004156:	2202      	movs	r2, #2
 8004158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800415e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	fa93 f2a3 	rbit	r2, r3
 8004168:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800416c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004176:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800417a:	2202      	movs	r2, #2
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004182:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	fa93 f2a3 	rbit	r2, r3
 800418c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004190:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004194:	601a      	str	r2, [r3, #0]
  return result;
 8004196:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800419a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800419e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d102      	bne.n	80041ba <HAL_RCC_OscConfig+0xa3a>
 80041b4:	4b42      	ldr	r3, [pc, #264]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	e013      	b.n	80041e2 <HAL_RCC_OscConfig+0xa62>
 80041ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80041c2:	2202      	movs	r2, #2
 80041c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	fa93 f2a3 	rbit	r2, r3
 80041d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041d8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	4b38      	ldr	r3, [pc, #224]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80041e6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80041ea:	2102      	movs	r1, #2
 80041ec:	6011      	str	r1, [r2, #0]
 80041ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80041f2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	fa92 f1a2 	rbit	r1, r2
 80041fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004200:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8004204:	6011      	str	r1, [r2, #0]
  return result;
 8004206:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800420a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	fab2 f282 	clz	r2, r2
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	f002 021f 	and.w	r2, r2, #31
 8004220:	2101      	movs	r1, #1
 8004222:	fa01 f202 	lsl.w	r2, r1, r2
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d084      	beq.n	8004136 <HAL_RCC_OscConfig+0x9b6>
 800422c:	e083      	b.n	8004336 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422e:	f7fd fa5b 	bl	80016e8 <HAL_GetTick>
 8004232:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fd fa56 	bl	80016e8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004248:	4293      	cmp	r3, r2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e2e4      	b.n	800481a <HAL_RCC_OscConfig+0x109a>
 8004250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004254:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004258:	2202      	movs	r2, #2
 800425a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004260:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	fa93 f2a3 	rbit	r2, r3
 800426a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800426e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004278:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800427c:	2202      	movs	r2, #2
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004284:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	fa93 f2a3 	rbit	r2, r3
 800428e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004292:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004296:	601a      	str	r2, [r3, #0]
  return result;
 8004298:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800429c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80042a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f043 0302 	orr.w	r3, r3, #2
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d106      	bne.n	80042c4 <HAL_RCC_OscConfig+0xb44>
 80042b6:	4b02      	ldr	r3, [pc, #8]	@ (80042c0 <HAL_RCC_OscConfig+0xb40>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	e017      	b.n	80042ec <HAL_RCC_OscConfig+0xb6c>
 80042bc:	40007000 	.word	0x40007000
 80042c0:	40021000 	.word	0x40021000
 80042c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042c8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80042cc:	2202      	movs	r2, #2
 80042ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042d4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	fa93 f2a3 	rbit	r2, r3
 80042de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042e2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	4bb3      	ldr	r3, [pc, #716]	@ (80045b8 <HAL_RCC_OscConfig+0xe38>)
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80042f0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80042f4:	2102      	movs	r1, #2
 80042f6:	6011      	str	r1, [r2, #0]
 80042f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80042fc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	fa92 f1a2 	rbit	r1, r2
 8004306:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800430a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800430e:	6011      	str	r1, [r2, #0]
  return result;
 8004310:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004314:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	fab2 f282 	clz	r2, r2
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	f002 021f 	and.w	r2, r2, #31
 800432a:	2101      	movs	r1, #1
 800432c:	fa01 f202 	lsl.w	r2, r1, r2
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d180      	bne.n	8004238 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004336:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800433a:	2b01      	cmp	r3, #1
 800433c:	d105      	bne.n	800434a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433e:	4b9e      	ldr	r3, [pc, #632]	@ (80045b8 <HAL_RCC_OscConfig+0xe38>)
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	4a9d      	ldr	r2, [pc, #628]	@ (80045b8 <HAL_RCC_OscConfig+0xe38>)
 8004344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004348:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800434a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800434e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 825e 	beq.w	8004818 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800435c:	4b96      	ldr	r3, [pc, #600]	@ (80045b8 <HAL_RCC_OscConfig+0xe38>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 030c 	and.w	r3, r3, #12
 8004364:	2b08      	cmp	r3, #8
 8004366:	f000 821f 	beq.w	80047a8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800436a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800436e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b02      	cmp	r3, #2
 8004378:	f040 8170 	bne.w	800465c <HAL_RCC_OscConfig+0xedc>
 800437c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004380:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004384:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800438e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	fa93 f2a3 	rbit	r2, r3
 8004398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800439c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80043a0:	601a      	str	r2, [r3, #0]
  return result;
 80043a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043a6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80043aa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ac:	fab3 f383 	clz	r3, r3
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80043b6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	461a      	mov	r2, r3
 80043be:	2300      	movs	r3, #0
 80043c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c2:	f7fd f991 	bl	80016e8 <HAL_GetTick>
 80043c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ca:	e009      	b.n	80043e0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043cc:	f7fd f98c 	bl	80016e8 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e21c      	b.n	800481a <HAL_RCC_OscConfig+0x109a>
 80043e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043e4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80043e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043f2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	fa93 f2a3 	rbit	r2, r3
 80043fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004400:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004404:	601a      	str	r2, [r3, #0]
  return result;
 8004406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800440a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800440e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004410:	fab3 f383 	clz	r3, r3
 8004414:	b2db      	uxtb	r3, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d102      	bne.n	800442a <HAL_RCC_OscConfig+0xcaa>
 8004424:	4b64      	ldr	r3, [pc, #400]	@ (80045b8 <HAL_RCC_OscConfig+0xe38>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	e027      	b.n	800447a <HAL_RCC_OscConfig+0xcfa>
 800442a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800442e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004432:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800443c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	fa93 f2a3 	rbit	r2, r3
 8004446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800444a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004454:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004458:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004462:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	fa93 f2a3 	rbit	r2, r3
 800446c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004470:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	4b50      	ldr	r3, [pc, #320]	@ (80045b8 <HAL_RCC_OscConfig+0xe38>)
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800447e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004482:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004486:	6011      	str	r1, [r2, #0]
 8004488:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800448c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	fa92 f1a2 	rbit	r1, r2
 8004496:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800449a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800449e:	6011      	str	r1, [r2, #0]
  return result;
 80044a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044a4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	fab2 f282 	clz	r2, r2
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	f042 0220 	orr.w	r2, r2, #32
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	f002 021f 	and.w	r2, r2, #31
 80044ba:	2101      	movs	r1, #1
 80044bc:	fa01 f202 	lsl.w	r2, r1, r2
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d182      	bne.n	80043cc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044c6:	4b3c      	ldr	r3, [pc, #240]	@ (80045b8 <HAL_RCC_OscConfig+0xe38>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	f023 020f 	bic.w	r2, r3, #15
 80044ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	4937      	ldr	r1, [pc, #220]	@ (80045b8 <HAL_RCC_OscConfig+0xe38>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80044e0:	4b35      	ldr	r3, [pc, #212]	@ (80045b8 <HAL_RCC_OscConfig+0xe38>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80044e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6a19      	ldr	r1, [r3, #32]
 80044f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	430b      	orrs	r3, r1
 8004502:	492d      	ldr	r1, [pc, #180]	@ (80045b8 <HAL_RCC_OscConfig+0xe38>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
 8004508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800450c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004510:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800451a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	fa93 f2a3 	rbit	r2, r3
 8004524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004528:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800452c:	601a      	str	r2, [r3, #0]
  return result;
 800452e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004532:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004536:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004538:	fab3 f383 	clz	r3, r3
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004542:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	461a      	mov	r2, r3
 800454a:	2301      	movs	r3, #1
 800454c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7fd f8cb 	bl	80016e8 <HAL_GetTick>
 8004552:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004556:	e009      	b.n	800456c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004558:	f7fd f8c6 	bl	80016e8 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e156      	b.n	800481a <HAL_RCC_OscConfig+0x109a>
 800456c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004570:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004574:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800457e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	fa93 f2a3 	rbit	r2, r3
 8004588:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800458c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004590:	601a      	str	r2, [r3, #0]
  return result;
 8004592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004596:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800459a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800459c:	fab3 f383 	clz	r3, r3
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d105      	bne.n	80045bc <HAL_RCC_OscConfig+0xe3c>
 80045b0:	4b01      	ldr	r3, [pc, #4]	@ (80045b8 <HAL_RCC_OscConfig+0xe38>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	e02a      	b.n	800460c <HAL_RCC_OscConfig+0xe8c>
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
 80045bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80045c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	fa93 f2a3 	rbit	r2, r3
 80045d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045dc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045e6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80045ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045f4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	fa93 f2a3 	rbit	r2, r3
 80045fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004602:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	4b86      	ldr	r3, [pc, #536]	@ (8004824 <HAL_RCC_OscConfig+0x10a4>)
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004610:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004614:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004618:	6011      	str	r1, [r2, #0]
 800461a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800461e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	fa92 f1a2 	rbit	r1, r2
 8004628:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800462c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8004630:	6011      	str	r1, [r2, #0]
  return result;
 8004632:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004636:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	fab2 f282 	clz	r2, r2
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	f042 0220 	orr.w	r2, r2, #32
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	f002 021f 	and.w	r2, r2, #31
 800464c:	2101      	movs	r1, #1
 800464e:	fa01 f202 	lsl.w	r2, r1, r2
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	f43f af7f 	beq.w	8004558 <HAL_RCC_OscConfig+0xdd8>
 800465a:	e0dd      	b.n	8004818 <HAL_RCC_OscConfig+0x1098>
 800465c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004660:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004664:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800466e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	fa93 f2a3 	rbit	r2, r3
 8004678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800467c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004680:	601a      	str	r2, [r3, #0]
  return result;
 8004682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004686:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800468a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468c:	fab3 f383 	clz	r3, r3
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004696:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	461a      	mov	r2, r3
 800469e:	2300      	movs	r3, #0
 80046a0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a2:	f7fd f821 	bl	80016e8 <HAL_GetTick>
 80046a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046aa:	e009      	b.n	80046c0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fd f81c 	bl	80016e8 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e0ac      	b.n	800481a <HAL_RCC_OscConfig+0x109a>
 80046c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046c4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80046c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046d2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	fa93 f2a3 	rbit	r2, r3
 80046dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046e0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80046e4:	601a      	str	r2, [r3, #0]
  return result;
 80046e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046ea:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80046ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046f0:	fab3 f383 	clz	r3, r3
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d102      	bne.n	800470a <HAL_RCC_OscConfig+0xf8a>
 8004704:	4b47      	ldr	r3, [pc, #284]	@ (8004824 <HAL_RCC_OscConfig+0x10a4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	e027      	b.n	800475a <HAL_RCC_OscConfig+0xfda>
 800470a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800470e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004712:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800471c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	fa93 f2a3 	rbit	r2, r3
 8004726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800472a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004734:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004738:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004742:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	fa93 f2a3 	rbit	r2, r3
 800474c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004750:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	4b33      	ldr	r3, [pc, #204]	@ (8004824 <HAL_RCC_OscConfig+0x10a4>)
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800475e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004762:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004766:	6011      	str	r1, [r2, #0]
 8004768:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800476c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	fa92 f1a2 	rbit	r1, r2
 8004776:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800477a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800477e:	6011      	str	r1, [r2, #0]
  return result;
 8004780:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004784:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	fab2 f282 	clz	r2, r2
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	f042 0220 	orr.w	r2, r2, #32
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	f002 021f 	and.w	r2, r2, #31
 800479a:	2101      	movs	r1, #1
 800479c:	fa01 f202 	lsl.w	r2, r1, r2
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d182      	bne.n	80046ac <HAL_RCC_OscConfig+0xf2c>
 80047a6:	e037      	b.n	8004818 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e02e      	b.n	800481a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047bc:	4b19      	ldr	r3, [pc, #100]	@ (8004824 <HAL_RCC_OscConfig+0x10a4>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80047c4:	4b17      	ldr	r3, [pc, #92]	@ (8004824 <HAL_RCC_OscConfig+0x10a4>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80047d0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80047d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d117      	bne.n	8004814 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80047e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80047e8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80047ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d10b      	bne.n	8004814 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80047fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004800:	f003 020f 	and.w	r2, r3, #15
 8004804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004808:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000

08004828 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b09e      	sub	sp, #120	@ 0x78
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e162      	b.n	8004b06 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004840:	4b90      	ldr	r3, [pc, #576]	@ (8004a84 <HAL_RCC_ClockConfig+0x25c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d910      	bls.n	8004870 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b8d      	ldr	r3, [pc, #564]	@ (8004a84 <HAL_RCC_ClockConfig+0x25c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 0207 	bic.w	r2, r3, #7
 8004856:	498b      	ldr	r1, [pc, #556]	@ (8004a84 <HAL_RCC_ClockConfig+0x25c>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b89      	ldr	r3, [pc, #548]	@ (8004a84 <HAL_RCC_ClockConfig+0x25c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e14a      	b.n	8004b06 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487c:	4b82      	ldr	r3, [pc, #520]	@ (8004a88 <HAL_RCC_ClockConfig+0x260>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	497f      	ldr	r1, [pc, #508]	@ (8004a88 <HAL_RCC_ClockConfig+0x260>)
 800488a:	4313      	orrs	r3, r2
 800488c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80dc 	beq.w	8004a54 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d13c      	bne.n	800491e <HAL_RCC_ClockConfig+0xf6>
 80048a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048ac:	fa93 f3a3 	rbit	r3, r3
 80048b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80048b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b4:	fab3 f383 	clz	r3, r3
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d102      	bne.n	80048ce <HAL_RCC_ClockConfig+0xa6>
 80048c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004a88 <HAL_RCC_ClockConfig+0x260>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	e00f      	b.n	80048ee <HAL_RCC_ClockConfig+0xc6>
 80048ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048d6:	fa93 f3a3 	rbit	r3, r3
 80048da:	667b      	str	r3, [r7, #100]	@ 0x64
 80048dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80048e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048e4:	fa93 f3a3 	rbit	r3, r3
 80048e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048ea:	4b67      	ldr	r3, [pc, #412]	@ (8004a88 <HAL_RCC_ClockConfig+0x260>)
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80048f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048f6:	fa92 f2a2 	rbit	r2, r2
 80048fa:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80048fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048fe:	fab2 f282 	clz	r2, r2
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	f042 0220 	orr.w	r2, r2, #32
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	f002 021f 	and.w	r2, r2, #31
 800490e:	2101      	movs	r1, #1
 8004910:	fa01 f202 	lsl.w	r2, r1, r2
 8004914:	4013      	ands	r3, r2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d17b      	bne.n	8004a12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e0f3      	b.n	8004b06 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d13c      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x178>
 8004926:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800492a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004936:	fab3 f383 	clz	r3, r3
 800493a:	b2db      	uxtb	r3, r3
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b01      	cmp	r3, #1
 8004948:	d102      	bne.n	8004950 <HAL_RCC_ClockConfig+0x128>
 800494a:	4b4f      	ldr	r3, [pc, #316]	@ (8004a88 <HAL_RCC_ClockConfig+0x260>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	e00f      	b.n	8004970 <HAL_RCC_ClockConfig+0x148>
 8004950:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004954:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004958:	fa93 f3a3 	rbit	r3, r3
 800495c:	647b      	str	r3, [r7, #68]	@ 0x44
 800495e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004962:	643b      	str	r3, [r7, #64]	@ 0x40
 8004964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800496c:	4b46      	ldr	r3, [pc, #280]	@ (8004a88 <HAL_RCC_ClockConfig+0x260>)
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004974:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004976:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004978:	fa92 f2a2 	rbit	r2, r2
 800497c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800497e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004980:	fab2 f282 	clz	r2, r2
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	f042 0220 	orr.w	r2, r2, #32
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	f002 021f 	and.w	r2, r2, #31
 8004990:	2101      	movs	r1, #1
 8004992:	fa01 f202 	lsl.w	r2, r1, r2
 8004996:	4013      	ands	r3, r2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d13a      	bne.n	8004a12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0b2      	b.n	8004b06 <HAL_RCC_ClockConfig+0x2de>
 80049a0:	2302      	movs	r3, #2
 80049a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80049ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ae:	fab3 f383 	clz	r3, r3
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d102      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x1a0>
 80049c2:	4b31      	ldr	r3, [pc, #196]	@ (8004a88 <HAL_RCC_ClockConfig+0x260>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	e00d      	b.n	80049e4 <HAL_RCC_ClockConfig+0x1bc>
 80049c8:	2302      	movs	r3, #2
 80049ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ce:	fa93 f3a3 	rbit	r3, r3
 80049d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d4:	2302      	movs	r3, #2
 80049d6:	623b      	str	r3, [r7, #32]
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	fa93 f3a3 	rbit	r3, r3
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	4b29      	ldr	r3, [pc, #164]	@ (8004a88 <HAL_RCC_ClockConfig+0x260>)
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	2202      	movs	r2, #2
 80049e6:	61ba      	str	r2, [r7, #24]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	fa92 f2a2 	rbit	r2, r2
 80049ee:	617a      	str	r2, [r7, #20]
  return result;
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	fab2 f282 	clz	r2, r2
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	f042 0220 	orr.w	r2, r2, #32
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	f002 021f 	and.w	r2, r2, #31
 8004a02:	2101      	movs	r1, #1
 8004a04:	fa01 f202 	lsl.w	r2, r1, r2
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e079      	b.n	8004b06 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a12:	4b1d      	ldr	r3, [pc, #116]	@ (8004a88 <HAL_RCC_ClockConfig+0x260>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f023 0203 	bic.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	491a      	ldr	r1, [pc, #104]	@ (8004a88 <HAL_RCC_ClockConfig+0x260>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a24:	f7fc fe60 	bl	80016e8 <HAL_GetTick>
 8004a28:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2c:	f7fc fe5c 	bl	80016e8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e061      	b.n	8004b06 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	4b11      	ldr	r3, [pc, #68]	@ (8004a88 <HAL_RCC_ClockConfig+0x260>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 020c 	and.w	r2, r3, #12
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d1eb      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a54:	4b0b      	ldr	r3, [pc, #44]	@ (8004a84 <HAL_RCC_ClockConfig+0x25c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d214      	bcs.n	8004a8c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a62:	4b08      	ldr	r3, [pc, #32]	@ (8004a84 <HAL_RCC_ClockConfig+0x25c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 0207 	bic.w	r2, r3, #7
 8004a6a:	4906      	ldr	r1, [pc, #24]	@ (8004a84 <HAL_RCC_ClockConfig+0x25c>)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b04      	ldr	r3, [pc, #16]	@ (8004a84 <HAL_RCC_ClockConfig+0x25c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e040      	b.n	8004b06 <HAL_RCC_ClockConfig+0x2de>
 8004a84:	40022000 	.word	0x40022000
 8004a88:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a98:	4b1d      	ldr	r3, [pc, #116]	@ (8004b10 <HAL_RCC_ClockConfig+0x2e8>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	491a      	ldr	r1, [pc, #104]	@ (8004b10 <HAL_RCC_ClockConfig+0x2e8>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ab6:	4b16      	ldr	r3, [pc, #88]	@ (8004b10 <HAL_RCC_ClockConfig+0x2e8>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	4912      	ldr	r1, [pc, #72]	@ (8004b10 <HAL_RCC_ClockConfig+0x2e8>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004aca:	f000 f829 	bl	8004b20 <HAL_RCC_GetSysClockFreq>
 8004ace:	4601      	mov	r1, r0
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b10 <HAL_RCC_ClockConfig+0x2e8>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ad8:	22f0      	movs	r2, #240	@ 0xf0
 8004ada:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	fa92 f2a2 	rbit	r2, r2
 8004ae2:	60fa      	str	r2, [r7, #12]
  return result;
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	fab2 f282 	clz	r2, r2
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	40d3      	lsrs	r3, r2
 8004aee:	4a09      	ldr	r2, [pc, #36]	@ (8004b14 <HAL_RCC_ClockConfig+0x2ec>)
 8004af0:	5cd3      	ldrb	r3, [r2, r3]
 8004af2:	fa21 f303 	lsr.w	r3, r1, r3
 8004af6:	4a08      	ldr	r2, [pc, #32]	@ (8004b18 <HAL_RCC_ClockConfig+0x2f0>)
 8004af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004afa:	4b08      	ldr	r3, [pc, #32]	@ (8004b1c <HAL_RCC_ClockConfig+0x2f4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fc fdae 	bl	8001660 <HAL_InitTick>
  
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3778      	adds	r7, #120	@ 0x78
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000
 8004b14:	080090f4 	.word	0x080090f4
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	20000004 	.word	0x20000004

08004b20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d002      	beq.n	8004b50 <HAL_RCC_GetSysClockFreq+0x30>
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x36>
 8004b4e:	e029      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b50:	4b1a      	ldr	r3, [pc, #104]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b52:	613b      	str	r3, [r7, #16]
      break;
 8004b54:	e029      	b.n	8004baa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	0c9b      	lsrs	r3, r3, #18
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	4a18      	ldr	r2, [pc, #96]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b60:	5cd3      	ldrb	r3, [r2, r3]
 8004b62:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004b64:	4b14      	ldr	r3, [pc, #80]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	4a15      	ldr	r2, [pc, #84]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b6e:	5cd3      	ldrb	r3, [r2, r3]
 8004b70:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e007      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	613b      	str	r3, [r7, #16]
      break;
 8004ba2:	e002      	b.n	8004baa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ba4:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ba6:	613b      	str	r3, [r7, #16]
      break;
 8004ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004baa:	693b      	ldr	r3, [r7, #16]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	007a1200 	.word	0x007a1200
 8004bc0:	0800910c 	.word	0x0800910c
 8004bc4:	0800911c 	.word	0x0800911c

08004bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bcc:	4b03      	ldr	r3, [pc, #12]	@ (8004bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bce:	681b      	ldr	r3, [r3, #0]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000000 	.word	0x20000000

08004be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004be6:	f7ff ffef 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004bea:	4601      	mov	r1, r0
 8004bec:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bf4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004bf8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	fa92 f2a2 	rbit	r2, r2
 8004c00:	603a      	str	r2, [r7, #0]
  return result;
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	fab2 f282 	clz	r2, r2
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	40d3      	lsrs	r3, r2
 8004c0c:	4a04      	ldr	r2, [pc, #16]	@ (8004c20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004c0e:	5cd3      	ldrb	r3, [r2, r3]
 8004c10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	08009104 	.word	0x08009104

08004c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004c2a:	f7ff ffcd 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004c2e:	4601      	mov	r1, r0
 8004c30:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004c38:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004c3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	fa92 f2a2 	rbit	r2, r2
 8004c44:	603a      	str	r2, [r7, #0]
  return result;
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	fab2 f282 	clz	r2, r2
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	40d3      	lsrs	r3, r2
 8004c50:	4a04      	ldr	r2, [pc, #16]	@ (8004c64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c52:	5cd3      	ldrb	r3, [r2, r3]
 8004c54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40021000 	.word	0x40021000
 8004c64:	08009104 	.word	0x08009104

08004c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b092      	sub	sp, #72	@ 0x48
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80d4 	beq.w	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10e      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c98:	4b4b      	ldr	r3, [pc, #300]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	61d3      	str	r3, [r2, #28]
 8004ca4:	4b48      	ldr	r3, [pc, #288]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b45      	ldr	r3, [pc, #276]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d118      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc2:	4b42      	ldr	r3, [pc, #264]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a41      	ldr	r2, [pc, #260]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ccc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cce:	f7fc fd0b 	bl	80016e8 <HAL_GetTick>
 8004cd2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd6:	f7fc fd07 	bl	80016e8 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b64      	cmp	r3, #100	@ 0x64
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e1d6      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	4b38      	ldr	r3, [pc, #224]	@ (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cf4:	4b34      	ldr	r3, [pc, #208]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8084 	beq.w	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d07c      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d14:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d22:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d26:	fa93 f3a3 	rbit	r3, r3
 8004d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d2e:	fab3 f383 	clz	r3, r3
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	4b26      	ldr	r3, [pc, #152]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	2301      	movs	r3, #1
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4a:	fa93 f3a3 	rbit	r3, r3
 8004d4e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d52:	fab3 f383 	clz	r3, r3
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	461a      	mov	r2, r3
 8004d62:	2300      	movs	r3, #0
 8004d64:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d66:	4a18      	ldr	r2, [pc, #96]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d04b      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d76:	f7fc fcb7 	bl	80016e8 <HAL_GetTick>
 8004d7a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7c:	e00a      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7e:	f7fc fcb3 	bl	80016e8 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e180      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004d94:	2302      	movs	r3, #2
 8004d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004da0:	2302      	movs	r3, #2
 8004da2:	623b      	str	r3, [r7, #32]
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	61fb      	str	r3, [r7, #28]
  return result;
 8004dac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dae:	fab3 f383 	clz	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	f043 0302 	orr.w	r3, r3, #2
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d108      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004dc2:	4b01      	ldr	r3, [pc, #4]	@ (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	e00d      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	40007000 	.word	0x40007000
 8004dd0:	10908100 	.word	0x10908100
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	fa93 f3a3 	rbit	r3, r3
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	4b9a      	ldr	r3, [pc, #616]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	2202      	movs	r2, #2
 8004de6:	613a      	str	r2, [r7, #16]
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	fa92 f2a2 	rbit	r2, r2
 8004dee:	60fa      	str	r2, [r7, #12]
  return result;
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	fab2 f282 	clz	r2, r2
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	f002 021f 	and.w	r2, r2, #31
 8004e02:	2101      	movs	r1, #1
 8004e04:	fa01 f202 	lsl.w	r2, r1, r2
 8004e08:	4013      	ands	r3, r2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0b7      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	498c      	ldr	r1, [pc, #560]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d105      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e28:	4b88      	ldr	r3, [pc, #544]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	4a87      	ldr	r2, [pc, #540]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e40:	4b82      	ldr	r3, [pc, #520]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	f023 0203 	bic.w	r2, r3, #3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	497f      	ldr	r1, [pc, #508]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e5e:	4b7b      	ldr	r3, [pc, #492]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e62:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	4978      	ldr	r1, [pc, #480]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e7c:	4b73      	ldr	r3, [pc, #460]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	4970      	ldr	r1, [pc, #448]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e9a:	4b6c      	ldr	r3, [pc, #432]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9e:	f023 0210 	bic.w	r2, r3, #16
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	4969      	ldr	r1, [pc, #420]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004eb8:	4b64      	ldr	r3, [pc, #400]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec4:	4961      	ldr	r1, [pc, #388]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	f023 0220 	bic.w	r2, r3, #32
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	495a      	ldr	r1, [pc, #360]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ef4:	4b55      	ldr	r3, [pc, #340]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f00:	4952      	ldr	r1, [pc, #328]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d008      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f12:	4b4e      	ldr	r3, [pc, #312]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	494b      	ldr	r1, [pc, #300]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f30:	4b46      	ldr	r3, [pc, #280]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f34:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	4943      	ldr	r1, [pc, #268]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	493c      	ldr	r1, [pc, #240]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f6c:	4b37      	ldr	r3, [pc, #220]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	4934      	ldr	r1, [pc, #208]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d008      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004f8a:	4b30      	ldr	r3, [pc, #192]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	492d      	ldr	r1, [pc, #180]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004fa8:	4b28      	ldr	r3, [pc, #160]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb4:	4925      	ldr	r1, [pc, #148]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d008      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004fc6:	4b21      	ldr	r3, [pc, #132]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fca:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	491e      	ldr	r1, [pc, #120]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004fe4:	4b19      	ldr	r3, [pc, #100]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff0:	4916      	ldr	r1, [pc, #88]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d008      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005002:	4b12      	ldr	r3, [pc, #72]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005006:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500e:	490f      	ldr	r1, [pc, #60]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005010:	4313      	orrs	r3, r2
 8005012:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005020:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005024:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502c:	4907      	ldr	r1, [pc, #28]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800502e:	4313      	orrs	r3, r2
 8005030:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00c      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800503e:	4b03      	ldr	r3, [pc, #12]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005042:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	e002      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000
 8005050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005052:	4913      	ldr	r1, [pc, #76]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005054:	4313      	orrs	r3, r2
 8005056:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005064:	4b0e      	ldr	r3, [pc, #56]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005068:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005070:	490b      	ldr	r1, [pc, #44]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005072:	4313      	orrs	r3, r2
 8005074:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005082:	4b07      	ldr	r3, [pc, #28]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005086:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508e:	4904      	ldr	r1, [pc, #16]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005090:	4313      	orrs	r3, r2
 8005092:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3748      	adds	r7, #72	@ 0x48
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000

080050a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e049      	b.n	800514a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fc f8fa 	bl	80012c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f000 fa9c 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	d001      	beq.n	800516c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e047      	b.n	80051fc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a23      	ldr	r2, [pc, #140]	@ (8005208 <HAL_TIM_Base_Start+0xb4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01d      	beq.n	80051ba <HAL_TIM_Base_Start+0x66>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005186:	d018      	beq.n	80051ba <HAL_TIM_Base_Start+0x66>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1f      	ldr	r2, [pc, #124]	@ (800520c <HAL_TIM_Base_Start+0xb8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_TIM_Base_Start+0x66>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1e      	ldr	r2, [pc, #120]	@ (8005210 <HAL_TIM_Base_Start+0xbc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <HAL_TIM_Base_Start+0x66>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005214 <HAL_TIM_Base_Start+0xc0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_TIM_Base_Start+0x66>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005218 <HAL_TIM_Base_Start+0xc4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_TIM_Base_Start+0x66>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a19      	ldr	r2, [pc, #100]	@ (800521c <HAL_TIM_Base_Start+0xc8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d115      	bne.n	80051e6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	4b17      	ldr	r3, [pc, #92]	@ (8005220 <HAL_TIM_Base_Start+0xcc>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b06      	cmp	r3, #6
 80051ca:	d015      	beq.n	80051f8 <HAL_TIM_Base_Start+0xa4>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d2:	d011      	beq.n	80051f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e4:	e008      	b.n	80051f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e000      	b.n	80051fa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	40012c00 	.word	0x40012c00
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40013400 	.word	0x40013400
 8005218:	40014000 	.word	0x40014000
 800521c:	40015000 	.word	0x40015000
 8005220:	00010007 	.word	0x00010007

08005224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d020      	beq.n	8005288 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01b      	beq.n	8005288 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0202 	mvn.w	r2, #2
 8005258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f9b7 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9a9 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f9ba 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	d020      	beq.n	80052d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01b      	beq.n	80052d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0204 	mvn.w	r2, #4
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f991 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f983 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f994 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d020      	beq.n	8005320 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01b      	beq.n	8005320 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0208 	mvn.w	r2, #8
 80052f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2204      	movs	r2, #4
 80052f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f96b 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f95d 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f96e 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	d020      	beq.n	800536c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01b      	beq.n	800536c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0210 	mvn.w	r2, #16
 800533c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2208      	movs	r2, #8
 8005342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f945 	bl	80055e2 <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f937 	bl	80055ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f948 	bl	80055f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0201 	mvn.w	r2, #1
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f915 	bl	80055ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fb10 	bl	80059d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fb08 	bl	80059e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00c      	beq.n	80053fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f907 	bl	800560a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0220 	mvn.w	r2, #32
 8005418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fad0 	bl	80059c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_TIM_ConfigClockSource+0x1c>
 8005440:	2302      	movs	r3, #2
 8005442:	e0b6      	b.n	80055b2 <HAL_TIM_ConfigClockSource+0x18a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005462:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800546e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005480:	d03e      	beq.n	8005500 <HAL_TIM_ConfigClockSource+0xd8>
 8005482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005486:	f200 8087 	bhi.w	8005598 <HAL_TIM_ConfigClockSource+0x170>
 800548a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548e:	f000 8086 	beq.w	800559e <HAL_TIM_ConfigClockSource+0x176>
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005496:	d87f      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 8005498:	2b70      	cmp	r3, #112	@ 0x70
 800549a:	d01a      	beq.n	80054d2 <HAL_TIM_ConfigClockSource+0xaa>
 800549c:	2b70      	cmp	r3, #112	@ 0x70
 800549e:	d87b      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 80054a0:	2b60      	cmp	r3, #96	@ 0x60
 80054a2:	d050      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x11e>
 80054a4:	2b60      	cmp	r3, #96	@ 0x60
 80054a6:	d877      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 80054a8:	2b50      	cmp	r3, #80	@ 0x50
 80054aa:	d03c      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0xfe>
 80054ac:	2b50      	cmp	r3, #80	@ 0x50
 80054ae:	d873      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 80054b0:	2b40      	cmp	r3, #64	@ 0x40
 80054b2:	d058      	beq.n	8005566 <HAL_TIM_ConfigClockSource+0x13e>
 80054b4:	2b40      	cmp	r3, #64	@ 0x40
 80054b6:	d86f      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 80054b8:	2b30      	cmp	r3, #48	@ 0x30
 80054ba:	d064      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x15e>
 80054bc:	2b30      	cmp	r3, #48	@ 0x30
 80054be:	d86b      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d060      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x15e>
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d867      	bhi.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d05c      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x15e>
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d05a      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x15e>
 80054d0:	e062      	b.n	8005598 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054e2:	f000 f9c1 	bl	8005868 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	609a      	str	r2, [r3, #8]
      break;
 80054fe:	e04f      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005510:	f000 f9aa 	bl	8005868 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005522:	609a      	str	r2, [r3, #8]
      break;
 8005524:	e03c      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005532:	461a      	mov	r2, r3
 8005534:	f000 f91e 	bl	8005774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2150      	movs	r1, #80	@ 0x50
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f977 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8005544:	e02c      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005552:	461a      	mov	r2, r3
 8005554:	f000 f93d 	bl	80057d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2160      	movs	r1, #96	@ 0x60
 800555e:	4618      	mov	r0, r3
 8005560:	f000 f967 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8005564:	e01c      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005572:	461a      	mov	r2, r3
 8005574:	f000 f8fe 	bl	8005774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2140      	movs	r1, #64	@ 0x40
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f957 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8005584:	e00c      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f000 f94e 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8005596:	e003      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
      break;
 800559c:	e000      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800559e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a48      	ldr	r2, [pc, #288]	@ (8005754 <TIM_Base_SetConfig+0x134>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d013      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563e:	d00f      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a45      	ldr	r2, [pc, #276]	@ (8005758 <TIM_Base_SetConfig+0x138>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00b      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a44      	ldr	r2, [pc, #272]	@ (800575c <TIM_Base_SetConfig+0x13c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d007      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a43      	ldr	r2, [pc, #268]	@ (8005760 <TIM_Base_SetConfig+0x140>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a42      	ldr	r2, [pc, #264]	@ (8005764 <TIM_Base_SetConfig+0x144>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d108      	bne.n	8005672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a37      	ldr	r2, [pc, #220]	@ (8005754 <TIM_Base_SetConfig+0x134>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01f      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005680:	d01b      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a34      	ldr	r2, [pc, #208]	@ (8005758 <TIM_Base_SetConfig+0x138>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d017      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a33      	ldr	r2, [pc, #204]	@ (800575c <TIM_Base_SetConfig+0x13c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a32      	ldr	r2, [pc, #200]	@ (8005760 <TIM_Base_SetConfig+0x140>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00f      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a32      	ldr	r2, [pc, #200]	@ (8005768 <TIM_Base_SetConfig+0x148>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a31      	ldr	r2, [pc, #196]	@ (800576c <TIM_Base_SetConfig+0x14c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a30      	ldr	r2, [pc, #192]	@ (8005770 <TIM_Base_SetConfig+0x150>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_Base_SetConfig+0x9a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005764 <TIM_Base_SetConfig+0x144>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d108      	bne.n	80056cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a18      	ldr	r2, [pc, #96]	@ (8005754 <TIM_Base_SetConfig+0x134>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d013      	beq.n	8005720 <TIM_Base_SetConfig+0x100>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a19      	ldr	r2, [pc, #100]	@ (8005760 <TIM_Base_SetConfig+0x140>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00f      	beq.n	8005720 <TIM_Base_SetConfig+0x100>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a19      	ldr	r2, [pc, #100]	@ (8005768 <TIM_Base_SetConfig+0x148>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00b      	beq.n	8005720 <TIM_Base_SetConfig+0x100>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a18      	ldr	r2, [pc, #96]	@ (800576c <TIM_Base_SetConfig+0x14c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_Base_SetConfig+0x100>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a17      	ldr	r2, [pc, #92]	@ (8005770 <TIM_Base_SetConfig+0x150>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_Base_SetConfig+0x100>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a12      	ldr	r2, [pc, #72]	@ (8005764 <TIM_Base_SetConfig+0x144>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d103      	bne.n	8005728 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b01      	cmp	r3, #1
 8005738:	d105      	bne.n	8005746 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f023 0201 	bic.w	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	611a      	str	r2, [r3, #16]
  }
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40000400 	.word	0x40000400
 800575c:	40000800 	.word	0x40000800
 8005760:	40013400 	.word	0x40013400
 8005764:	40015000 	.word	0x40015000
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800

08005774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f023 0201 	bic.w	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800579e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 030a 	bic.w	r3, r3, #10
 80057b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b087      	sub	sp, #28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	f023 0210 	bic.w	r2, r3, #16
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	031b      	lsls	r3, r3, #12
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800580e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	f043 0307 	orr.w	r3, r3, #7
 8005854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	609a      	str	r2, [r3, #8]
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	021a      	lsls	r2, r3, #8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	431a      	orrs	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4313      	orrs	r3, r2
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	609a      	str	r2, [r3, #8]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058bc:	2302      	movs	r3, #2
 80058be:	e06d      	b.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a30      	ldr	r2, [pc, #192]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a2f      	ldr	r2, [pc, #188]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a2d      	ldr	r2, [pc, #180]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d108      	bne.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005904:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1e      	ldr	r2, [pc, #120]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d01d      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800593c:	d018      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1c      	ldr	r2, [pc, #112]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d013      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1a      	ldr	r2, [pc, #104]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a15      	ldr	r2, [pc, #84]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a16      	ldr	r2, [pc, #88]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a11      	ldr	r2, [pc, #68]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d10c      	bne.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005976:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	4313      	orrs	r3, r2
 8005980:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40013400 	.word	0x40013400
 80059b0:	40015000 	.word	0x40015000
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40014000 	.word	0x40014000

080059c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e040      	b.n	8005a90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fb fc76 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2224      	movs	r2, #36	@ 0x24
 8005a28:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa86 	bl	8005f54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f8af 	bl	8005bac <UART_SetConfig>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e01b      	b.n	8005a90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fb05 	bl	8006098 <UART_CheckIdleState>
 8005a8e:	4603      	mov	r3, r0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	@ 0x28
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d177      	bne.n	8005ba0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_UART_Transmit+0x24>
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e070      	b.n	8005ba2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2221      	movs	r2, #33	@ 0x21
 8005acc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ace:	f7fb fe0b 	bl	80016e8 <HAL_GetTick>
 8005ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	88fa      	ldrh	r2, [r7, #6]
 8005ad8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aec:	d108      	bne.n	8005b00 <HAL_UART_Transmit+0x68>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e003      	b.n	8005b08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b08:	e02f      	b.n	8005b6a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	2180      	movs	r1, #128	@ 0x80
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fb67 	bl	80061e8 <UART_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e03b      	b.n	8005ba2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10b      	bne.n	8005b48 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	881a      	ldrh	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b3c:	b292      	uxth	r2, r2
 8005b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	3302      	adds	r3, #2
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e007      	b.n	8005b58 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	3301      	adds	r3, #1
 8005b56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1c9      	bne.n	8005b0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2140      	movs	r1, #64	@ 0x40
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fb31 	bl	80061e8 <UART_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e005      	b.n	8005ba2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e000      	b.n	8005ba2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005ba0:	2302      	movs	r3, #2
  }
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4b92      	ldr	r3, [pc, #584]	@ (8005e20 <UART_SetConfig+0x274>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6812      	ldr	r2, [r2, #0]
 8005bde:	6979      	ldr	r1, [r7, #20]
 8005be0:	430b      	orrs	r3, r1
 8005be2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a80      	ldr	r2, [pc, #512]	@ (8005e24 <UART_SetConfig+0x278>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d120      	bne.n	8005c6a <UART_SetConfig+0xbe>
 8005c28:	4b7f      	ldr	r3, [pc, #508]	@ (8005e28 <UART_SetConfig+0x27c>)
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d817      	bhi.n	8005c64 <UART_SetConfig+0xb8>
 8005c34:	a201      	add	r2, pc, #4	@ (adr r2, 8005c3c <UART_SetConfig+0x90>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c4d 	.word	0x08005c4d
 8005c40:	08005c59 	.word	0x08005c59
 8005c44:	08005c5f 	.word	0x08005c5f
 8005c48:	08005c53 	.word	0x08005c53
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e0b5      	b.n	8005dbe <UART_SetConfig+0x212>
 8005c52:	2302      	movs	r3, #2
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e0b2      	b.n	8005dbe <UART_SetConfig+0x212>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e0af      	b.n	8005dbe <UART_SetConfig+0x212>
 8005c5e:	2308      	movs	r3, #8
 8005c60:	77fb      	strb	r3, [r7, #31]
 8005c62:	e0ac      	b.n	8005dbe <UART_SetConfig+0x212>
 8005c64:	2310      	movs	r3, #16
 8005c66:	77fb      	strb	r3, [r7, #31]
 8005c68:	e0a9      	b.n	8005dbe <UART_SetConfig+0x212>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a6f      	ldr	r2, [pc, #444]	@ (8005e2c <UART_SetConfig+0x280>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d124      	bne.n	8005cbe <UART_SetConfig+0x112>
 8005c74:	4b6c      	ldr	r3, [pc, #432]	@ (8005e28 <UART_SetConfig+0x27c>)
 8005c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c80:	d011      	beq.n	8005ca6 <UART_SetConfig+0xfa>
 8005c82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c86:	d817      	bhi.n	8005cb8 <UART_SetConfig+0x10c>
 8005c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c8c:	d011      	beq.n	8005cb2 <UART_SetConfig+0x106>
 8005c8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c92:	d811      	bhi.n	8005cb8 <UART_SetConfig+0x10c>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <UART_SetConfig+0xf4>
 8005c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c9c:	d006      	beq.n	8005cac <UART_SetConfig+0x100>
 8005c9e:	e00b      	b.n	8005cb8 <UART_SetConfig+0x10c>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e08b      	b.n	8005dbe <UART_SetConfig+0x212>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e088      	b.n	8005dbe <UART_SetConfig+0x212>
 8005cac:	2304      	movs	r3, #4
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e085      	b.n	8005dbe <UART_SetConfig+0x212>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e082      	b.n	8005dbe <UART_SetConfig+0x212>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	77fb      	strb	r3, [r7, #31]
 8005cbc:	e07f      	b.n	8005dbe <UART_SetConfig+0x212>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a5b      	ldr	r2, [pc, #364]	@ (8005e30 <UART_SetConfig+0x284>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d124      	bne.n	8005d12 <UART_SetConfig+0x166>
 8005cc8:	4b57      	ldr	r3, [pc, #348]	@ (8005e28 <UART_SetConfig+0x27c>)
 8005cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ccc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005cd0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005cd4:	d011      	beq.n	8005cfa <UART_SetConfig+0x14e>
 8005cd6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005cda:	d817      	bhi.n	8005d0c <UART_SetConfig+0x160>
 8005cdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ce0:	d011      	beq.n	8005d06 <UART_SetConfig+0x15a>
 8005ce2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ce6:	d811      	bhi.n	8005d0c <UART_SetConfig+0x160>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <UART_SetConfig+0x148>
 8005cec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cf0:	d006      	beq.n	8005d00 <UART_SetConfig+0x154>
 8005cf2:	e00b      	b.n	8005d0c <UART_SetConfig+0x160>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e061      	b.n	8005dbe <UART_SetConfig+0x212>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e05e      	b.n	8005dbe <UART_SetConfig+0x212>
 8005d00:	2304      	movs	r3, #4
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e05b      	b.n	8005dbe <UART_SetConfig+0x212>
 8005d06:	2308      	movs	r3, #8
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e058      	b.n	8005dbe <UART_SetConfig+0x212>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	77fb      	strb	r3, [r7, #31]
 8005d10:	e055      	b.n	8005dbe <UART_SetConfig+0x212>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a47      	ldr	r2, [pc, #284]	@ (8005e34 <UART_SetConfig+0x288>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d124      	bne.n	8005d66 <UART_SetConfig+0x1ba>
 8005d1c:	4b42      	ldr	r3, [pc, #264]	@ (8005e28 <UART_SetConfig+0x27c>)
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d20:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005d24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d28:	d011      	beq.n	8005d4e <UART_SetConfig+0x1a2>
 8005d2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d2e:	d817      	bhi.n	8005d60 <UART_SetConfig+0x1b4>
 8005d30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d34:	d011      	beq.n	8005d5a <UART_SetConfig+0x1ae>
 8005d36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d3a:	d811      	bhi.n	8005d60 <UART_SetConfig+0x1b4>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <UART_SetConfig+0x19c>
 8005d40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d44:	d006      	beq.n	8005d54 <UART_SetConfig+0x1a8>
 8005d46:	e00b      	b.n	8005d60 <UART_SetConfig+0x1b4>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e037      	b.n	8005dbe <UART_SetConfig+0x212>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	77fb      	strb	r3, [r7, #31]
 8005d52:	e034      	b.n	8005dbe <UART_SetConfig+0x212>
 8005d54:	2304      	movs	r3, #4
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e031      	b.n	8005dbe <UART_SetConfig+0x212>
 8005d5a:	2308      	movs	r3, #8
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e02e      	b.n	8005dbe <UART_SetConfig+0x212>
 8005d60:	2310      	movs	r3, #16
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e02b      	b.n	8005dbe <UART_SetConfig+0x212>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a33      	ldr	r2, [pc, #204]	@ (8005e38 <UART_SetConfig+0x28c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d124      	bne.n	8005dba <UART_SetConfig+0x20e>
 8005d70:	4b2d      	ldr	r3, [pc, #180]	@ (8005e28 <UART_SetConfig+0x27c>)
 8005d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d74:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005d78:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d7c:	d011      	beq.n	8005da2 <UART_SetConfig+0x1f6>
 8005d7e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005d82:	d817      	bhi.n	8005db4 <UART_SetConfig+0x208>
 8005d84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d88:	d011      	beq.n	8005dae <UART_SetConfig+0x202>
 8005d8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d8e:	d811      	bhi.n	8005db4 <UART_SetConfig+0x208>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <UART_SetConfig+0x1f0>
 8005d94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d98:	d006      	beq.n	8005da8 <UART_SetConfig+0x1fc>
 8005d9a:	e00b      	b.n	8005db4 <UART_SetConfig+0x208>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e00d      	b.n	8005dbe <UART_SetConfig+0x212>
 8005da2:	2302      	movs	r3, #2
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e00a      	b.n	8005dbe <UART_SetConfig+0x212>
 8005da8:	2304      	movs	r3, #4
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e007      	b.n	8005dbe <UART_SetConfig+0x212>
 8005dae:	2308      	movs	r3, #8
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e004      	b.n	8005dbe <UART_SetConfig+0x212>
 8005db4:	2310      	movs	r3, #16
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	e001      	b.n	8005dbe <UART_SetConfig+0x212>
 8005dba:	2310      	movs	r3, #16
 8005dbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc6:	d16b      	bne.n	8005ea0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005dc8:	7ffb      	ldrb	r3, [r7, #31]
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d838      	bhi.n	8005e40 <UART_SetConfig+0x294>
 8005dce:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <UART_SetConfig+0x228>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005df9 	.word	0x08005df9
 8005dd8:	08005e01 	.word	0x08005e01
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	08005e41 	.word	0x08005e41
 8005de4:	08005e0f 	.word	0x08005e0f
 8005de8:	08005e41 	.word	0x08005e41
 8005dec:	08005e41 	.word	0x08005e41
 8005df0:	08005e41 	.word	0x08005e41
 8005df4:	08005e17 	.word	0x08005e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df8:	f7fe fef2 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 8005dfc:	61b8      	str	r0, [r7, #24]
        break;
 8005dfe:	e024      	b.n	8005e4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e00:	f7fe ff10 	bl	8004c24 <HAL_RCC_GetPCLK2Freq>
 8005e04:	61b8      	str	r0, [r7, #24]
        break;
 8005e06:	e020      	b.n	8005e4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e08:	4b0c      	ldr	r3, [pc, #48]	@ (8005e3c <UART_SetConfig+0x290>)
 8005e0a:	61bb      	str	r3, [r7, #24]
        break;
 8005e0c:	e01d      	b.n	8005e4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e0e:	f7fe fe87 	bl	8004b20 <HAL_RCC_GetSysClockFreq>
 8005e12:	61b8      	str	r0, [r7, #24]
        break;
 8005e14:	e019      	b.n	8005e4a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e1a:	61bb      	str	r3, [r7, #24]
        break;
 8005e1c:	e015      	b.n	8005e4a <UART_SetConfig+0x29e>
 8005e1e:	bf00      	nop
 8005e20:	efff69f3 	.word	0xefff69f3
 8005e24:	40013800 	.word	0x40013800
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	40004400 	.word	0x40004400
 8005e30:	40004800 	.word	0x40004800
 8005e34:	40004c00 	.word	0x40004c00
 8005e38:	40005000 	.word	0x40005000
 8005e3c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	77bb      	strb	r3, [r7, #30]
        break;
 8005e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d073      	beq.n	8005f38 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	005a      	lsls	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	085b      	lsrs	r3, r3, #1
 8005e5a:	441a      	add	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	2b0f      	cmp	r3, #15
 8005e6a:	d916      	bls.n	8005e9a <UART_SetConfig+0x2ee>
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e72:	d212      	bcs.n	8005e9a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f023 030f 	bic.w	r3, r3, #15
 8005e7c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	085b      	lsrs	r3, r3, #1
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	89fb      	ldrh	r3, [r7, #14]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	89fa      	ldrh	r2, [r7, #14]
 8005e96:	60da      	str	r2, [r3, #12]
 8005e98:	e04e      	b.n	8005f38 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	77bb      	strb	r3, [r7, #30]
 8005e9e:	e04b      	b.n	8005f38 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ea0:	7ffb      	ldrb	r3, [r7, #31]
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d827      	bhi.n	8005ef6 <UART_SetConfig+0x34a>
 8005ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8005eac <UART_SetConfig+0x300>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005ed9 	.word	0x08005ed9
 8005eb4:	08005ee1 	.word	0x08005ee1
 8005eb8:	08005ef7 	.word	0x08005ef7
 8005ebc:	08005ee7 	.word	0x08005ee7
 8005ec0:	08005ef7 	.word	0x08005ef7
 8005ec4:	08005ef7 	.word	0x08005ef7
 8005ec8:	08005ef7 	.word	0x08005ef7
 8005ecc:	08005eef 	.word	0x08005eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed0:	f7fe fe86 	bl	8004be0 <HAL_RCC_GetPCLK1Freq>
 8005ed4:	61b8      	str	r0, [r7, #24]
        break;
 8005ed6:	e013      	b.n	8005f00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ed8:	f7fe fea4 	bl	8004c24 <HAL_RCC_GetPCLK2Freq>
 8005edc:	61b8      	str	r0, [r7, #24]
        break;
 8005ede:	e00f      	b.n	8005f00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8005f50 <UART_SetConfig+0x3a4>)
 8005ee2:	61bb      	str	r3, [r7, #24]
        break;
 8005ee4:	e00c      	b.n	8005f00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ee6:	f7fe fe1b 	bl	8004b20 <HAL_RCC_GetSysClockFreq>
 8005eea:	61b8      	str	r0, [r7, #24]
        break;
 8005eec:	e008      	b.n	8005f00 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ef2:	61bb      	str	r3, [r7, #24]
        break;
 8005ef4:	e004      	b.n	8005f00 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	77bb      	strb	r3, [r7, #30]
        break;
 8005efe:	bf00      	nop
    }

    if (pclk != 0U)
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d018      	beq.n	8005f38 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	085a      	lsrs	r2, r3, #1
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	441a      	add	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b0f      	cmp	r3, #15
 8005f1e:	d909      	bls.n	8005f34 <UART_SetConfig+0x388>
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f26:	d205      	bcs.n	8005f34 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60da      	str	r2, [r3, #12]
 8005f32:	e001      	b.n	8005f38 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005f44:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	007a1200 	.word	0x007a1200

08005f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01a      	beq.n	800606a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006052:	d10a      	bne.n	800606a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
  }
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b098      	sub	sp, #96	@ 0x60
 800609c:	af02      	add	r7, sp, #8
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060a8:	f7fb fb1e 	bl	80016e8 <HAL_GetTick>
 80060ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d12e      	bne.n	800611a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c4:	2200      	movs	r2, #0
 80060c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f88c 	bl	80061e8 <UART_WaitOnFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d021      	beq.n	800611a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e6      	bne.n	80060d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e062      	b.n	80061e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b04      	cmp	r3, #4
 8006126:	d149      	bne.n	80061bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006128:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006130:	2200      	movs	r2, #0
 8006132:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f856 	bl	80061e8 <UART_WaitOnFlagUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d03c      	beq.n	80061bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	623b      	str	r3, [r7, #32]
   return(result);
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006160:	633b      	str	r3, [r7, #48]	@ 0x30
 8006162:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800616e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e6      	bne.n	8006142 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3308      	adds	r3, #8
 800617a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	60fb      	str	r3, [r7, #12]
   return(result);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3308      	adds	r3, #8
 8006192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006194:	61fa      	str	r2, [r7, #28]
 8006196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	69b9      	ldr	r1, [r7, #24]
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	617b      	str	r3, [r7, #20]
   return(result);
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e5      	bne.n	8006174 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e011      	b.n	80061e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3758      	adds	r7, #88	@ 0x58
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	4613      	mov	r3, r2
 80061f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f8:	e04f      	b.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d04b      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006202:	f7fb fa71 	bl	80016e8 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	429a      	cmp	r2, r3
 8006210:	d302      	bcc.n	8006218 <UART_WaitOnFlagUntilTimeout+0x30>
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e04e      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d037      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b80      	cmp	r3, #128	@ 0x80
 800622e:	d034      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b40      	cmp	r3, #64	@ 0x40
 8006234:	d031      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b08      	cmp	r3, #8
 8006242:	d110      	bne.n	8006266 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2208      	movs	r2, #8
 800624a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f838 	bl	80062c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2208      	movs	r2, #8
 8006256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e029      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006274:	d111      	bne.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800627e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f81e 	bl	80062c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2220      	movs	r2, #32
 800628a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e00f      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4013      	ands	r3, r2
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	bf0c      	ite	eq
 80062aa:	2301      	moveq	r3, #1
 80062ac:	2300      	movne	r3, #0
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d0a0      	beq.n	80061fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b095      	sub	sp, #84	@ 0x54
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80062ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e6      	bne.n	80062ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3308      	adds	r3, #8
 8006302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	61fb      	str	r3, [r7, #28]
   return(result);
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f023 0301 	bic.w	r3, r3, #1
 8006312:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800631c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800631e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e5      	bne.n	80062fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006334:	2b01      	cmp	r3, #1
 8006336:	d118      	bne.n	800636a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	60bb      	str	r3, [r7, #8]
   return(result);
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f023 0310 	bic.w	r3, r3, #16
 800634c:	647b      	str	r3, [r7, #68]	@ 0x44
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6979      	ldr	r1, [r7, #20]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	613b      	str	r3, [r7, #16]
   return(result);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e6      	bne.n	8006338 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800637e:	bf00      	nop
 8006380:	3754      	adds	r7, #84	@ 0x54
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <__cvt>:
 800638a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800638e:	ec57 6b10 	vmov	r6, r7, d0
 8006392:	2f00      	cmp	r7, #0
 8006394:	460c      	mov	r4, r1
 8006396:	4619      	mov	r1, r3
 8006398:	463b      	mov	r3, r7
 800639a:	bfbb      	ittet	lt
 800639c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80063a0:	461f      	movlt	r7, r3
 80063a2:	2300      	movge	r3, #0
 80063a4:	232d      	movlt	r3, #45	@ 0x2d
 80063a6:	700b      	strb	r3, [r1, #0]
 80063a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063aa:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80063ae:	4691      	mov	r9, r2
 80063b0:	f023 0820 	bic.w	r8, r3, #32
 80063b4:	bfbc      	itt	lt
 80063b6:	4632      	movlt	r2, r6
 80063b8:	4616      	movlt	r6, r2
 80063ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063be:	d005      	beq.n	80063cc <__cvt+0x42>
 80063c0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80063c4:	d100      	bne.n	80063c8 <__cvt+0x3e>
 80063c6:	3401      	adds	r4, #1
 80063c8:	2102      	movs	r1, #2
 80063ca:	e000      	b.n	80063ce <__cvt+0x44>
 80063cc:	2103      	movs	r1, #3
 80063ce:	ab03      	add	r3, sp, #12
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	ab02      	add	r3, sp, #8
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	ec47 6b10 	vmov	d0, r6, r7
 80063da:	4653      	mov	r3, sl
 80063dc:	4622      	mov	r2, r4
 80063de:	f000 fe5b 	bl	8007098 <_dtoa_r>
 80063e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80063e6:	4605      	mov	r5, r0
 80063e8:	d119      	bne.n	800641e <__cvt+0x94>
 80063ea:	f019 0f01 	tst.w	r9, #1
 80063ee:	d00e      	beq.n	800640e <__cvt+0x84>
 80063f0:	eb00 0904 	add.w	r9, r0, r4
 80063f4:	2200      	movs	r2, #0
 80063f6:	2300      	movs	r3, #0
 80063f8:	4630      	mov	r0, r6
 80063fa:	4639      	mov	r1, r7
 80063fc:	f7fa fb6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006400:	b108      	cbz	r0, 8006406 <__cvt+0x7c>
 8006402:	f8cd 900c 	str.w	r9, [sp, #12]
 8006406:	2230      	movs	r2, #48	@ 0x30
 8006408:	9b03      	ldr	r3, [sp, #12]
 800640a:	454b      	cmp	r3, r9
 800640c:	d31e      	bcc.n	800644c <__cvt+0xc2>
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006412:	1b5b      	subs	r3, r3, r5
 8006414:	4628      	mov	r0, r5
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	b004      	add	sp, #16
 800641a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800641e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006422:	eb00 0904 	add.w	r9, r0, r4
 8006426:	d1e5      	bne.n	80063f4 <__cvt+0x6a>
 8006428:	7803      	ldrb	r3, [r0, #0]
 800642a:	2b30      	cmp	r3, #48	@ 0x30
 800642c:	d10a      	bne.n	8006444 <__cvt+0xba>
 800642e:	2200      	movs	r2, #0
 8006430:	2300      	movs	r3, #0
 8006432:	4630      	mov	r0, r6
 8006434:	4639      	mov	r1, r7
 8006436:	f7fa fb4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800643a:	b918      	cbnz	r0, 8006444 <__cvt+0xba>
 800643c:	f1c4 0401 	rsb	r4, r4, #1
 8006440:	f8ca 4000 	str.w	r4, [sl]
 8006444:	f8da 3000 	ldr.w	r3, [sl]
 8006448:	4499      	add	r9, r3
 800644a:	e7d3      	b.n	80063f4 <__cvt+0x6a>
 800644c:	1c59      	adds	r1, r3, #1
 800644e:	9103      	str	r1, [sp, #12]
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	e7d9      	b.n	8006408 <__cvt+0x7e>

08006454 <__exponent>:
 8006454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006456:	2900      	cmp	r1, #0
 8006458:	bfba      	itte	lt
 800645a:	4249      	neglt	r1, r1
 800645c:	232d      	movlt	r3, #45	@ 0x2d
 800645e:	232b      	movge	r3, #43	@ 0x2b
 8006460:	2909      	cmp	r1, #9
 8006462:	7002      	strb	r2, [r0, #0]
 8006464:	7043      	strb	r3, [r0, #1]
 8006466:	dd29      	ble.n	80064bc <__exponent+0x68>
 8006468:	f10d 0307 	add.w	r3, sp, #7
 800646c:	461d      	mov	r5, r3
 800646e:	270a      	movs	r7, #10
 8006470:	461a      	mov	r2, r3
 8006472:	fbb1 f6f7 	udiv	r6, r1, r7
 8006476:	fb07 1416 	mls	r4, r7, r6, r1
 800647a:	3430      	adds	r4, #48	@ 0x30
 800647c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006480:	460c      	mov	r4, r1
 8006482:	2c63      	cmp	r4, #99	@ 0x63
 8006484:	f103 33ff 	add.w	r3, r3, #4294967295
 8006488:	4631      	mov	r1, r6
 800648a:	dcf1      	bgt.n	8006470 <__exponent+0x1c>
 800648c:	3130      	adds	r1, #48	@ 0x30
 800648e:	1e94      	subs	r4, r2, #2
 8006490:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006494:	1c41      	adds	r1, r0, #1
 8006496:	4623      	mov	r3, r4
 8006498:	42ab      	cmp	r3, r5
 800649a:	d30a      	bcc.n	80064b2 <__exponent+0x5e>
 800649c:	f10d 0309 	add.w	r3, sp, #9
 80064a0:	1a9b      	subs	r3, r3, r2
 80064a2:	42ac      	cmp	r4, r5
 80064a4:	bf88      	it	hi
 80064a6:	2300      	movhi	r3, #0
 80064a8:	3302      	adds	r3, #2
 80064aa:	4403      	add	r3, r0
 80064ac:	1a18      	subs	r0, r3, r0
 80064ae:	b003      	add	sp, #12
 80064b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064ba:	e7ed      	b.n	8006498 <__exponent+0x44>
 80064bc:	2330      	movs	r3, #48	@ 0x30
 80064be:	3130      	adds	r1, #48	@ 0x30
 80064c0:	7083      	strb	r3, [r0, #2]
 80064c2:	70c1      	strb	r1, [r0, #3]
 80064c4:	1d03      	adds	r3, r0, #4
 80064c6:	e7f1      	b.n	80064ac <__exponent+0x58>

080064c8 <_printf_float>:
 80064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	b08d      	sub	sp, #52	@ 0x34
 80064ce:	460c      	mov	r4, r1
 80064d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80064d4:	4616      	mov	r6, r2
 80064d6:	461f      	mov	r7, r3
 80064d8:	4605      	mov	r5, r0
 80064da:	f000 fcdb 	bl	8006e94 <_localeconv_r>
 80064de:	6803      	ldr	r3, [r0, #0]
 80064e0:	9304      	str	r3, [sp, #16]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7f9 fecc 	bl	8000280 <strlen>
 80064e8:	2300      	movs	r3, #0
 80064ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80064ec:	f8d8 3000 	ldr.w	r3, [r8]
 80064f0:	9005      	str	r0, [sp, #20]
 80064f2:	3307      	adds	r3, #7
 80064f4:	f023 0307 	bic.w	r3, r3, #7
 80064f8:	f103 0208 	add.w	r2, r3, #8
 80064fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006500:	f8d4 b000 	ldr.w	fp, [r4]
 8006504:	f8c8 2000 	str.w	r2, [r8]
 8006508:	e9d3 8900 	ldrd	r8, r9, [r3]
 800650c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006510:	9307      	str	r3, [sp, #28]
 8006512:	f8cd 8018 	str.w	r8, [sp, #24]
 8006516:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800651a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800651e:	4b9c      	ldr	r3, [pc, #624]	@ (8006790 <_printf_float+0x2c8>)
 8006520:	f04f 32ff 	mov.w	r2, #4294967295
 8006524:	f7fa fb0a 	bl	8000b3c <__aeabi_dcmpun>
 8006528:	bb70      	cbnz	r0, 8006588 <_printf_float+0xc0>
 800652a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800652e:	4b98      	ldr	r3, [pc, #608]	@ (8006790 <_printf_float+0x2c8>)
 8006530:	f04f 32ff 	mov.w	r2, #4294967295
 8006534:	f7fa fae4 	bl	8000b00 <__aeabi_dcmple>
 8006538:	bb30      	cbnz	r0, 8006588 <_printf_float+0xc0>
 800653a:	2200      	movs	r2, #0
 800653c:	2300      	movs	r3, #0
 800653e:	4640      	mov	r0, r8
 8006540:	4649      	mov	r1, r9
 8006542:	f7fa fad3 	bl	8000aec <__aeabi_dcmplt>
 8006546:	b110      	cbz	r0, 800654e <_printf_float+0x86>
 8006548:	232d      	movs	r3, #45	@ 0x2d
 800654a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800654e:	4a91      	ldr	r2, [pc, #580]	@ (8006794 <_printf_float+0x2cc>)
 8006550:	4b91      	ldr	r3, [pc, #580]	@ (8006798 <_printf_float+0x2d0>)
 8006552:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006556:	bf94      	ite	ls
 8006558:	4690      	movls	r8, r2
 800655a:	4698      	movhi	r8, r3
 800655c:	2303      	movs	r3, #3
 800655e:	6123      	str	r3, [r4, #16]
 8006560:	f02b 0304 	bic.w	r3, fp, #4
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	f04f 0900 	mov.w	r9, #0
 800656a:	9700      	str	r7, [sp, #0]
 800656c:	4633      	mov	r3, r6
 800656e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006570:	4621      	mov	r1, r4
 8006572:	4628      	mov	r0, r5
 8006574:	f000 f9d2 	bl	800691c <_printf_common>
 8006578:	3001      	adds	r0, #1
 800657a:	f040 808d 	bne.w	8006698 <_printf_float+0x1d0>
 800657e:	f04f 30ff 	mov.w	r0, #4294967295
 8006582:	b00d      	add	sp, #52	@ 0x34
 8006584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006588:	4642      	mov	r2, r8
 800658a:	464b      	mov	r3, r9
 800658c:	4640      	mov	r0, r8
 800658e:	4649      	mov	r1, r9
 8006590:	f7fa fad4 	bl	8000b3c <__aeabi_dcmpun>
 8006594:	b140      	cbz	r0, 80065a8 <_printf_float+0xe0>
 8006596:	464b      	mov	r3, r9
 8006598:	2b00      	cmp	r3, #0
 800659a:	bfbc      	itt	lt
 800659c:	232d      	movlt	r3, #45	@ 0x2d
 800659e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065a2:	4a7e      	ldr	r2, [pc, #504]	@ (800679c <_printf_float+0x2d4>)
 80065a4:	4b7e      	ldr	r3, [pc, #504]	@ (80067a0 <_printf_float+0x2d8>)
 80065a6:	e7d4      	b.n	8006552 <_printf_float+0x8a>
 80065a8:	6863      	ldr	r3, [r4, #4]
 80065aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80065ae:	9206      	str	r2, [sp, #24]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	d13b      	bne.n	800662c <_printf_float+0x164>
 80065b4:	2306      	movs	r3, #6
 80065b6:	6063      	str	r3, [r4, #4]
 80065b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80065bc:	2300      	movs	r3, #0
 80065be:	6022      	str	r2, [r4, #0]
 80065c0:	9303      	str	r3, [sp, #12]
 80065c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80065c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80065c8:	ab09      	add	r3, sp, #36	@ 0x24
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	6861      	ldr	r1, [r4, #4]
 80065ce:	ec49 8b10 	vmov	d0, r8, r9
 80065d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065d6:	4628      	mov	r0, r5
 80065d8:	f7ff fed7 	bl	800638a <__cvt>
 80065dc:	9b06      	ldr	r3, [sp, #24]
 80065de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065e0:	2b47      	cmp	r3, #71	@ 0x47
 80065e2:	4680      	mov	r8, r0
 80065e4:	d129      	bne.n	800663a <_printf_float+0x172>
 80065e6:	1cc8      	adds	r0, r1, #3
 80065e8:	db02      	blt.n	80065f0 <_printf_float+0x128>
 80065ea:	6863      	ldr	r3, [r4, #4]
 80065ec:	4299      	cmp	r1, r3
 80065ee:	dd41      	ble.n	8006674 <_printf_float+0x1ac>
 80065f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80065f4:	fa5f fa8a 	uxtb.w	sl, sl
 80065f8:	3901      	subs	r1, #1
 80065fa:	4652      	mov	r2, sl
 80065fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006600:	9109      	str	r1, [sp, #36]	@ 0x24
 8006602:	f7ff ff27 	bl	8006454 <__exponent>
 8006606:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006608:	1813      	adds	r3, r2, r0
 800660a:	2a01      	cmp	r2, #1
 800660c:	4681      	mov	r9, r0
 800660e:	6123      	str	r3, [r4, #16]
 8006610:	dc02      	bgt.n	8006618 <_printf_float+0x150>
 8006612:	6822      	ldr	r2, [r4, #0]
 8006614:	07d2      	lsls	r2, r2, #31
 8006616:	d501      	bpl.n	800661c <_printf_float+0x154>
 8006618:	3301      	adds	r3, #1
 800661a:	6123      	str	r3, [r4, #16]
 800661c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0a2      	beq.n	800656a <_printf_float+0xa2>
 8006624:	232d      	movs	r3, #45	@ 0x2d
 8006626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800662a:	e79e      	b.n	800656a <_printf_float+0xa2>
 800662c:	9a06      	ldr	r2, [sp, #24]
 800662e:	2a47      	cmp	r2, #71	@ 0x47
 8006630:	d1c2      	bne.n	80065b8 <_printf_float+0xf0>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1c0      	bne.n	80065b8 <_printf_float+0xf0>
 8006636:	2301      	movs	r3, #1
 8006638:	e7bd      	b.n	80065b6 <_printf_float+0xee>
 800663a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800663e:	d9db      	bls.n	80065f8 <_printf_float+0x130>
 8006640:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006644:	d118      	bne.n	8006678 <_printf_float+0x1b0>
 8006646:	2900      	cmp	r1, #0
 8006648:	6863      	ldr	r3, [r4, #4]
 800664a:	dd0b      	ble.n	8006664 <_printf_float+0x19c>
 800664c:	6121      	str	r1, [r4, #16]
 800664e:	b913      	cbnz	r3, 8006656 <_printf_float+0x18e>
 8006650:	6822      	ldr	r2, [r4, #0]
 8006652:	07d0      	lsls	r0, r2, #31
 8006654:	d502      	bpl.n	800665c <_printf_float+0x194>
 8006656:	3301      	adds	r3, #1
 8006658:	440b      	add	r3, r1
 800665a:	6123      	str	r3, [r4, #16]
 800665c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800665e:	f04f 0900 	mov.w	r9, #0
 8006662:	e7db      	b.n	800661c <_printf_float+0x154>
 8006664:	b913      	cbnz	r3, 800666c <_printf_float+0x1a4>
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	07d2      	lsls	r2, r2, #31
 800666a:	d501      	bpl.n	8006670 <_printf_float+0x1a8>
 800666c:	3302      	adds	r3, #2
 800666e:	e7f4      	b.n	800665a <_printf_float+0x192>
 8006670:	2301      	movs	r3, #1
 8006672:	e7f2      	b.n	800665a <_printf_float+0x192>
 8006674:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800667a:	4299      	cmp	r1, r3
 800667c:	db05      	blt.n	800668a <_printf_float+0x1c2>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	6121      	str	r1, [r4, #16]
 8006682:	07d8      	lsls	r0, r3, #31
 8006684:	d5ea      	bpl.n	800665c <_printf_float+0x194>
 8006686:	1c4b      	adds	r3, r1, #1
 8006688:	e7e7      	b.n	800665a <_printf_float+0x192>
 800668a:	2900      	cmp	r1, #0
 800668c:	bfd4      	ite	le
 800668e:	f1c1 0202 	rsble	r2, r1, #2
 8006692:	2201      	movgt	r2, #1
 8006694:	4413      	add	r3, r2
 8006696:	e7e0      	b.n	800665a <_printf_float+0x192>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	055a      	lsls	r2, r3, #21
 800669c:	d407      	bmi.n	80066ae <_printf_float+0x1e6>
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	4642      	mov	r2, r8
 80066a2:	4631      	mov	r1, r6
 80066a4:	4628      	mov	r0, r5
 80066a6:	47b8      	blx	r7
 80066a8:	3001      	adds	r0, #1
 80066aa:	d12b      	bne.n	8006704 <_printf_float+0x23c>
 80066ac:	e767      	b.n	800657e <_printf_float+0xb6>
 80066ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066b2:	f240 80dd 	bls.w	8006870 <_printf_float+0x3a8>
 80066b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066ba:	2200      	movs	r2, #0
 80066bc:	2300      	movs	r3, #0
 80066be:	f7fa fa0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d033      	beq.n	800672e <_printf_float+0x266>
 80066c6:	4a37      	ldr	r2, [pc, #220]	@ (80067a4 <_printf_float+0x2dc>)
 80066c8:	2301      	movs	r3, #1
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	f43f af54 	beq.w	800657e <_printf_float+0xb6>
 80066d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066da:	4543      	cmp	r3, r8
 80066dc:	db02      	blt.n	80066e4 <_printf_float+0x21c>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	07d8      	lsls	r0, r3, #31
 80066e2:	d50f      	bpl.n	8006704 <_printf_float+0x23c>
 80066e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066e8:	4631      	mov	r1, r6
 80066ea:	4628      	mov	r0, r5
 80066ec:	47b8      	blx	r7
 80066ee:	3001      	adds	r0, #1
 80066f0:	f43f af45 	beq.w	800657e <_printf_float+0xb6>
 80066f4:	f04f 0900 	mov.w	r9, #0
 80066f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80066fc:	f104 0a1a 	add.w	sl, r4, #26
 8006700:	45c8      	cmp	r8, r9
 8006702:	dc09      	bgt.n	8006718 <_printf_float+0x250>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	079b      	lsls	r3, r3, #30
 8006708:	f100 8103 	bmi.w	8006912 <_printf_float+0x44a>
 800670c:	68e0      	ldr	r0, [r4, #12]
 800670e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006710:	4298      	cmp	r0, r3
 8006712:	bfb8      	it	lt
 8006714:	4618      	movlt	r0, r3
 8006716:	e734      	b.n	8006582 <_printf_float+0xba>
 8006718:	2301      	movs	r3, #1
 800671a:	4652      	mov	r2, sl
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	47b8      	blx	r7
 8006722:	3001      	adds	r0, #1
 8006724:	f43f af2b 	beq.w	800657e <_printf_float+0xb6>
 8006728:	f109 0901 	add.w	r9, r9, #1
 800672c:	e7e8      	b.n	8006700 <_printf_float+0x238>
 800672e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	dc39      	bgt.n	80067a8 <_printf_float+0x2e0>
 8006734:	4a1b      	ldr	r2, [pc, #108]	@ (80067a4 <_printf_float+0x2dc>)
 8006736:	2301      	movs	r3, #1
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	f43f af1d 	beq.w	800657e <_printf_float+0xb6>
 8006744:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006748:	ea59 0303 	orrs.w	r3, r9, r3
 800674c:	d102      	bne.n	8006754 <_printf_float+0x28c>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	07d9      	lsls	r1, r3, #31
 8006752:	d5d7      	bpl.n	8006704 <_printf_float+0x23c>
 8006754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	f43f af0d 	beq.w	800657e <_printf_float+0xb6>
 8006764:	f04f 0a00 	mov.w	sl, #0
 8006768:	f104 0b1a 	add.w	fp, r4, #26
 800676c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676e:	425b      	negs	r3, r3
 8006770:	4553      	cmp	r3, sl
 8006772:	dc01      	bgt.n	8006778 <_printf_float+0x2b0>
 8006774:	464b      	mov	r3, r9
 8006776:	e793      	b.n	80066a0 <_printf_float+0x1d8>
 8006778:	2301      	movs	r3, #1
 800677a:	465a      	mov	r2, fp
 800677c:	4631      	mov	r1, r6
 800677e:	4628      	mov	r0, r5
 8006780:	47b8      	blx	r7
 8006782:	3001      	adds	r0, #1
 8006784:	f43f aefb 	beq.w	800657e <_printf_float+0xb6>
 8006788:	f10a 0a01 	add.w	sl, sl, #1
 800678c:	e7ee      	b.n	800676c <_printf_float+0x2a4>
 800678e:	bf00      	nop
 8006790:	7fefffff 	.word	0x7fefffff
 8006794:	0800912c 	.word	0x0800912c
 8006798:	08009130 	.word	0x08009130
 800679c:	08009134 	.word	0x08009134
 80067a0:	08009138 	.word	0x08009138
 80067a4:	0800913c 	.word	0x0800913c
 80067a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067ae:	4553      	cmp	r3, sl
 80067b0:	bfa8      	it	ge
 80067b2:	4653      	movge	r3, sl
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	4699      	mov	r9, r3
 80067b8:	dc36      	bgt.n	8006828 <_printf_float+0x360>
 80067ba:	f04f 0b00 	mov.w	fp, #0
 80067be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067c2:	f104 021a 	add.w	r2, r4, #26
 80067c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067c8:	9306      	str	r3, [sp, #24]
 80067ca:	eba3 0309 	sub.w	r3, r3, r9
 80067ce:	455b      	cmp	r3, fp
 80067d0:	dc31      	bgt.n	8006836 <_printf_float+0x36e>
 80067d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d4:	459a      	cmp	sl, r3
 80067d6:	dc3a      	bgt.n	800684e <_printf_float+0x386>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	07da      	lsls	r2, r3, #31
 80067dc:	d437      	bmi.n	800684e <_printf_float+0x386>
 80067de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e0:	ebaa 0903 	sub.w	r9, sl, r3
 80067e4:	9b06      	ldr	r3, [sp, #24]
 80067e6:	ebaa 0303 	sub.w	r3, sl, r3
 80067ea:	4599      	cmp	r9, r3
 80067ec:	bfa8      	it	ge
 80067ee:	4699      	movge	r9, r3
 80067f0:	f1b9 0f00 	cmp.w	r9, #0
 80067f4:	dc33      	bgt.n	800685e <_printf_float+0x396>
 80067f6:	f04f 0800 	mov.w	r8, #0
 80067fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067fe:	f104 0b1a 	add.w	fp, r4, #26
 8006802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006804:	ebaa 0303 	sub.w	r3, sl, r3
 8006808:	eba3 0309 	sub.w	r3, r3, r9
 800680c:	4543      	cmp	r3, r8
 800680e:	f77f af79 	ble.w	8006704 <_printf_float+0x23c>
 8006812:	2301      	movs	r3, #1
 8006814:	465a      	mov	r2, fp
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	f43f aeae 	beq.w	800657e <_printf_float+0xb6>
 8006822:	f108 0801 	add.w	r8, r8, #1
 8006826:	e7ec      	b.n	8006802 <_printf_float+0x33a>
 8006828:	4642      	mov	r2, r8
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	47b8      	blx	r7
 8006830:	3001      	adds	r0, #1
 8006832:	d1c2      	bne.n	80067ba <_printf_float+0x2f2>
 8006834:	e6a3      	b.n	800657e <_printf_float+0xb6>
 8006836:	2301      	movs	r3, #1
 8006838:	4631      	mov	r1, r6
 800683a:	4628      	mov	r0, r5
 800683c:	9206      	str	r2, [sp, #24]
 800683e:	47b8      	blx	r7
 8006840:	3001      	adds	r0, #1
 8006842:	f43f ae9c 	beq.w	800657e <_printf_float+0xb6>
 8006846:	9a06      	ldr	r2, [sp, #24]
 8006848:	f10b 0b01 	add.w	fp, fp, #1
 800684c:	e7bb      	b.n	80067c6 <_printf_float+0x2fe>
 800684e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	d1c0      	bne.n	80067de <_printf_float+0x316>
 800685c:	e68f      	b.n	800657e <_printf_float+0xb6>
 800685e:	9a06      	ldr	r2, [sp, #24]
 8006860:	464b      	mov	r3, r9
 8006862:	4442      	add	r2, r8
 8006864:	4631      	mov	r1, r6
 8006866:	4628      	mov	r0, r5
 8006868:	47b8      	blx	r7
 800686a:	3001      	adds	r0, #1
 800686c:	d1c3      	bne.n	80067f6 <_printf_float+0x32e>
 800686e:	e686      	b.n	800657e <_printf_float+0xb6>
 8006870:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006874:	f1ba 0f01 	cmp.w	sl, #1
 8006878:	dc01      	bgt.n	800687e <_printf_float+0x3b6>
 800687a:	07db      	lsls	r3, r3, #31
 800687c:	d536      	bpl.n	80068ec <_printf_float+0x424>
 800687e:	2301      	movs	r3, #1
 8006880:	4642      	mov	r2, r8
 8006882:	4631      	mov	r1, r6
 8006884:	4628      	mov	r0, r5
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	f43f ae78 	beq.w	800657e <_printf_float+0xb6>
 800688e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f ae70 	beq.w	800657e <_printf_float+0xb6>
 800689e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068a2:	2200      	movs	r2, #0
 80068a4:	2300      	movs	r3, #0
 80068a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068aa:	f7fa f915 	bl	8000ad8 <__aeabi_dcmpeq>
 80068ae:	b9c0      	cbnz	r0, 80068e2 <_printf_float+0x41a>
 80068b0:	4653      	mov	r3, sl
 80068b2:	f108 0201 	add.w	r2, r8, #1
 80068b6:	4631      	mov	r1, r6
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b8      	blx	r7
 80068bc:	3001      	adds	r0, #1
 80068be:	d10c      	bne.n	80068da <_printf_float+0x412>
 80068c0:	e65d      	b.n	800657e <_printf_float+0xb6>
 80068c2:	2301      	movs	r3, #1
 80068c4:	465a      	mov	r2, fp
 80068c6:	4631      	mov	r1, r6
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	f43f ae56 	beq.w	800657e <_printf_float+0xb6>
 80068d2:	f108 0801 	add.w	r8, r8, #1
 80068d6:	45d0      	cmp	r8, sl
 80068d8:	dbf3      	blt.n	80068c2 <_printf_float+0x3fa>
 80068da:	464b      	mov	r3, r9
 80068dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068e0:	e6df      	b.n	80066a2 <_printf_float+0x1da>
 80068e2:	f04f 0800 	mov.w	r8, #0
 80068e6:	f104 0b1a 	add.w	fp, r4, #26
 80068ea:	e7f4      	b.n	80068d6 <_printf_float+0x40e>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4642      	mov	r2, r8
 80068f0:	e7e1      	b.n	80068b6 <_printf_float+0x3ee>
 80068f2:	2301      	movs	r3, #1
 80068f4:	464a      	mov	r2, r9
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b8      	blx	r7
 80068fc:	3001      	adds	r0, #1
 80068fe:	f43f ae3e 	beq.w	800657e <_printf_float+0xb6>
 8006902:	f108 0801 	add.w	r8, r8, #1
 8006906:	68e3      	ldr	r3, [r4, #12]
 8006908:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800690a:	1a5b      	subs	r3, r3, r1
 800690c:	4543      	cmp	r3, r8
 800690e:	dcf0      	bgt.n	80068f2 <_printf_float+0x42a>
 8006910:	e6fc      	b.n	800670c <_printf_float+0x244>
 8006912:	f04f 0800 	mov.w	r8, #0
 8006916:	f104 0919 	add.w	r9, r4, #25
 800691a:	e7f4      	b.n	8006906 <_printf_float+0x43e>

0800691c <_printf_common>:
 800691c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006920:	4616      	mov	r6, r2
 8006922:	4698      	mov	r8, r3
 8006924:	688a      	ldr	r2, [r1, #8]
 8006926:	690b      	ldr	r3, [r1, #16]
 8006928:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800692c:	4293      	cmp	r3, r2
 800692e:	bfb8      	it	lt
 8006930:	4613      	movlt	r3, r2
 8006932:	6033      	str	r3, [r6, #0]
 8006934:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006938:	4607      	mov	r7, r0
 800693a:	460c      	mov	r4, r1
 800693c:	b10a      	cbz	r2, 8006942 <_printf_common+0x26>
 800693e:	3301      	adds	r3, #1
 8006940:	6033      	str	r3, [r6, #0]
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	0699      	lsls	r1, r3, #26
 8006946:	bf42      	ittt	mi
 8006948:	6833      	ldrmi	r3, [r6, #0]
 800694a:	3302      	addmi	r3, #2
 800694c:	6033      	strmi	r3, [r6, #0]
 800694e:	6825      	ldr	r5, [r4, #0]
 8006950:	f015 0506 	ands.w	r5, r5, #6
 8006954:	d106      	bne.n	8006964 <_printf_common+0x48>
 8006956:	f104 0a19 	add.w	sl, r4, #25
 800695a:	68e3      	ldr	r3, [r4, #12]
 800695c:	6832      	ldr	r2, [r6, #0]
 800695e:	1a9b      	subs	r3, r3, r2
 8006960:	42ab      	cmp	r3, r5
 8006962:	dc26      	bgt.n	80069b2 <_printf_common+0x96>
 8006964:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	3b00      	subs	r3, #0
 800696c:	bf18      	it	ne
 800696e:	2301      	movne	r3, #1
 8006970:	0692      	lsls	r2, r2, #26
 8006972:	d42b      	bmi.n	80069cc <_printf_common+0xb0>
 8006974:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006978:	4641      	mov	r1, r8
 800697a:	4638      	mov	r0, r7
 800697c:	47c8      	blx	r9
 800697e:	3001      	adds	r0, #1
 8006980:	d01e      	beq.n	80069c0 <_printf_common+0xa4>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	6922      	ldr	r2, [r4, #16]
 8006986:	f003 0306 	and.w	r3, r3, #6
 800698a:	2b04      	cmp	r3, #4
 800698c:	bf02      	ittt	eq
 800698e:	68e5      	ldreq	r5, [r4, #12]
 8006990:	6833      	ldreq	r3, [r6, #0]
 8006992:	1aed      	subeq	r5, r5, r3
 8006994:	68a3      	ldr	r3, [r4, #8]
 8006996:	bf0c      	ite	eq
 8006998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800699c:	2500      	movne	r5, #0
 800699e:	4293      	cmp	r3, r2
 80069a0:	bfc4      	itt	gt
 80069a2:	1a9b      	subgt	r3, r3, r2
 80069a4:	18ed      	addgt	r5, r5, r3
 80069a6:	2600      	movs	r6, #0
 80069a8:	341a      	adds	r4, #26
 80069aa:	42b5      	cmp	r5, r6
 80069ac:	d11a      	bne.n	80069e4 <_printf_common+0xc8>
 80069ae:	2000      	movs	r0, #0
 80069b0:	e008      	b.n	80069c4 <_printf_common+0xa8>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4652      	mov	r2, sl
 80069b6:	4641      	mov	r1, r8
 80069b8:	4638      	mov	r0, r7
 80069ba:	47c8      	blx	r9
 80069bc:	3001      	adds	r0, #1
 80069be:	d103      	bne.n	80069c8 <_printf_common+0xac>
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c8:	3501      	adds	r5, #1
 80069ca:	e7c6      	b.n	800695a <_printf_common+0x3e>
 80069cc:	18e1      	adds	r1, r4, r3
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	2030      	movs	r0, #48	@ 0x30
 80069d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069d6:	4422      	add	r2, r4
 80069d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069e0:	3302      	adds	r3, #2
 80069e2:	e7c7      	b.n	8006974 <_printf_common+0x58>
 80069e4:	2301      	movs	r3, #1
 80069e6:	4622      	mov	r2, r4
 80069e8:	4641      	mov	r1, r8
 80069ea:	4638      	mov	r0, r7
 80069ec:	47c8      	blx	r9
 80069ee:	3001      	adds	r0, #1
 80069f0:	d0e6      	beq.n	80069c0 <_printf_common+0xa4>
 80069f2:	3601      	adds	r6, #1
 80069f4:	e7d9      	b.n	80069aa <_printf_common+0x8e>
	...

080069f8 <_printf_i>:
 80069f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069fc:	7e0f      	ldrb	r7, [r1, #24]
 80069fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a00:	2f78      	cmp	r7, #120	@ 0x78
 8006a02:	4691      	mov	r9, r2
 8006a04:	4680      	mov	r8, r0
 8006a06:	460c      	mov	r4, r1
 8006a08:	469a      	mov	sl, r3
 8006a0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a0e:	d807      	bhi.n	8006a20 <_printf_i+0x28>
 8006a10:	2f62      	cmp	r7, #98	@ 0x62
 8006a12:	d80a      	bhi.n	8006a2a <_printf_i+0x32>
 8006a14:	2f00      	cmp	r7, #0
 8006a16:	f000 80d2 	beq.w	8006bbe <_printf_i+0x1c6>
 8006a1a:	2f58      	cmp	r7, #88	@ 0x58
 8006a1c:	f000 80b9 	beq.w	8006b92 <_printf_i+0x19a>
 8006a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a28:	e03a      	b.n	8006aa0 <_printf_i+0xa8>
 8006a2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a2e:	2b15      	cmp	r3, #21
 8006a30:	d8f6      	bhi.n	8006a20 <_printf_i+0x28>
 8006a32:	a101      	add	r1, pc, #4	@ (adr r1, 8006a38 <_printf_i+0x40>)
 8006a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a38:	08006a91 	.word	0x08006a91
 8006a3c:	08006aa5 	.word	0x08006aa5
 8006a40:	08006a21 	.word	0x08006a21
 8006a44:	08006a21 	.word	0x08006a21
 8006a48:	08006a21 	.word	0x08006a21
 8006a4c:	08006a21 	.word	0x08006a21
 8006a50:	08006aa5 	.word	0x08006aa5
 8006a54:	08006a21 	.word	0x08006a21
 8006a58:	08006a21 	.word	0x08006a21
 8006a5c:	08006a21 	.word	0x08006a21
 8006a60:	08006a21 	.word	0x08006a21
 8006a64:	08006ba5 	.word	0x08006ba5
 8006a68:	08006acf 	.word	0x08006acf
 8006a6c:	08006b5f 	.word	0x08006b5f
 8006a70:	08006a21 	.word	0x08006a21
 8006a74:	08006a21 	.word	0x08006a21
 8006a78:	08006bc7 	.word	0x08006bc7
 8006a7c:	08006a21 	.word	0x08006a21
 8006a80:	08006acf 	.word	0x08006acf
 8006a84:	08006a21 	.word	0x08006a21
 8006a88:	08006a21 	.word	0x08006a21
 8006a8c:	08006b67 	.word	0x08006b67
 8006a90:	6833      	ldr	r3, [r6, #0]
 8006a92:	1d1a      	adds	r2, r3, #4
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6032      	str	r2, [r6, #0]
 8006a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e09d      	b.n	8006be0 <_printf_i+0x1e8>
 8006aa4:	6833      	ldr	r3, [r6, #0]
 8006aa6:	6820      	ldr	r0, [r4, #0]
 8006aa8:	1d19      	adds	r1, r3, #4
 8006aaa:	6031      	str	r1, [r6, #0]
 8006aac:	0606      	lsls	r6, r0, #24
 8006aae:	d501      	bpl.n	8006ab4 <_printf_i+0xbc>
 8006ab0:	681d      	ldr	r5, [r3, #0]
 8006ab2:	e003      	b.n	8006abc <_printf_i+0xc4>
 8006ab4:	0645      	lsls	r5, r0, #25
 8006ab6:	d5fb      	bpl.n	8006ab0 <_printf_i+0xb8>
 8006ab8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006abc:	2d00      	cmp	r5, #0
 8006abe:	da03      	bge.n	8006ac8 <_printf_i+0xd0>
 8006ac0:	232d      	movs	r3, #45	@ 0x2d
 8006ac2:	426d      	negs	r5, r5
 8006ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ac8:	4859      	ldr	r0, [pc, #356]	@ (8006c30 <_printf_i+0x238>)
 8006aca:	230a      	movs	r3, #10
 8006acc:	e011      	b.n	8006af2 <_printf_i+0xfa>
 8006ace:	6821      	ldr	r1, [r4, #0]
 8006ad0:	6833      	ldr	r3, [r6, #0]
 8006ad2:	0608      	lsls	r0, r1, #24
 8006ad4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ad8:	d402      	bmi.n	8006ae0 <_printf_i+0xe8>
 8006ada:	0649      	lsls	r1, r1, #25
 8006adc:	bf48      	it	mi
 8006ade:	b2ad      	uxthmi	r5, r5
 8006ae0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ae2:	4853      	ldr	r0, [pc, #332]	@ (8006c30 <_printf_i+0x238>)
 8006ae4:	6033      	str	r3, [r6, #0]
 8006ae6:	bf14      	ite	ne
 8006ae8:	230a      	movne	r3, #10
 8006aea:	2308      	moveq	r3, #8
 8006aec:	2100      	movs	r1, #0
 8006aee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006af2:	6866      	ldr	r6, [r4, #4]
 8006af4:	60a6      	str	r6, [r4, #8]
 8006af6:	2e00      	cmp	r6, #0
 8006af8:	bfa2      	ittt	ge
 8006afa:	6821      	ldrge	r1, [r4, #0]
 8006afc:	f021 0104 	bicge.w	r1, r1, #4
 8006b00:	6021      	strge	r1, [r4, #0]
 8006b02:	b90d      	cbnz	r5, 8006b08 <_printf_i+0x110>
 8006b04:	2e00      	cmp	r6, #0
 8006b06:	d04b      	beq.n	8006ba0 <_printf_i+0x1a8>
 8006b08:	4616      	mov	r6, r2
 8006b0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b0e:	fb03 5711 	mls	r7, r3, r1, r5
 8006b12:	5dc7      	ldrb	r7, [r0, r7]
 8006b14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b18:	462f      	mov	r7, r5
 8006b1a:	42bb      	cmp	r3, r7
 8006b1c:	460d      	mov	r5, r1
 8006b1e:	d9f4      	bls.n	8006b0a <_printf_i+0x112>
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d10b      	bne.n	8006b3c <_printf_i+0x144>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	07df      	lsls	r7, r3, #31
 8006b28:	d508      	bpl.n	8006b3c <_printf_i+0x144>
 8006b2a:	6923      	ldr	r3, [r4, #16]
 8006b2c:	6861      	ldr	r1, [r4, #4]
 8006b2e:	4299      	cmp	r1, r3
 8006b30:	bfde      	ittt	le
 8006b32:	2330      	movle	r3, #48	@ 0x30
 8006b34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b3c:	1b92      	subs	r2, r2, r6
 8006b3e:	6122      	str	r2, [r4, #16]
 8006b40:	f8cd a000 	str.w	sl, [sp]
 8006b44:	464b      	mov	r3, r9
 8006b46:	aa03      	add	r2, sp, #12
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f7ff fee6 	bl	800691c <_printf_common>
 8006b50:	3001      	adds	r0, #1
 8006b52:	d14a      	bne.n	8006bea <_printf_i+0x1f2>
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	b004      	add	sp, #16
 8006b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	f043 0320 	orr.w	r3, r3, #32
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	4833      	ldr	r0, [pc, #204]	@ (8006c34 <_printf_i+0x23c>)
 8006b68:	2778      	movs	r7, #120	@ 0x78
 8006b6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	6831      	ldr	r1, [r6, #0]
 8006b72:	061f      	lsls	r7, r3, #24
 8006b74:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b78:	d402      	bmi.n	8006b80 <_printf_i+0x188>
 8006b7a:	065f      	lsls	r7, r3, #25
 8006b7c:	bf48      	it	mi
 8006b7e:	b2ad      	uxthmi	r5, r5
 8006b80:	6031      	str	r1, [r6, #0]
 8006b82:	07d9      	lsls	r1, r3, #31
 8006b84:	bf44      	itt	mi
 8006b86:	f043 0320 	orrmi.w	r3, r3, #32
 8006b8a:	6023      	strmi	r3, [r4, #0]
 8006b8c:	b11d      	cbz	r5, 8006b96 <_printf_i+0x19e>
 8006b8e:	2310      	movs	r3, #16
 8006b90:	e7ac      	b.n	8006aec <_printf_i+0xf4>
 8006b92:	4827      	ldr	r0, [pc, #156]	@ (8006c30 <_printf_i+0x238>)
 8006b94:	e7e9      	b.n	8006b6a <_printf_i+0x172>
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	f023 0320 	bic.w	r3, r3, #32
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	e7f6      	b.n	8006b8e <_printf_i+0x196>
 8006ba0:	4616      	mov	r6, r2
 8006ba2:	e7bd      	b.n	8006b20 <_printf_i+0x128>
 8006ba4:	6833      	ldr	r3, [r6, #0]
 8006ba6:	6825      	ldr	r5, [r4, #0]
 8006ba8:	6961      	ldr	r1, [r4, #20]
 8006baa:	1d18      	adds	r0, r3, #4
 8006bac:	6030      	str	r0, [r6, #0]
 8006bae:	062e      	lsls	r6, r5, #24
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	d501      	bpl.n	8006bb8 <_printf_i+0x1c0>
 8006bb4:	6019      	str	r1, [r3, #0]
 8006bb6:	e002      	b.n	8006bbe <_printf_i+0x1c6>
 8006bb8:	0668      	lsls	r0, r5, #25
 8006bba:	d5fb      	bpl.n	8006bb4 <_printf_i+0x1bc>
 8006bbc:	8019      	strh	r1, [r3, #0]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	6123      	str	r3, [r4, #16]
 8006bc2:	4616      	mov	r6, r2
 8006bc4:	e7bc      	b.n	8006b40 <_printf_i+0x148>
 8006bc6:	6833      	ldr	r3, [r6, #0]
 8006bc8:	1d1a      	adds	r2, r3, #4
 8006bca:	6032      	str	r2, [r6, #0]
 8006bcc:	681e      	ldr	r6, [r3, #0]
 8006bce:	6862      	ldr	r2, [r4, #4]
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f7f9 fb04 	bl	80001e0 <memchr>
 8006bd8:	b108      	cbz	r0, 8006bde <_printf_i+0x1e6>
 8006bda:	1b80      	subs	r0, r0, r6
 8006bdc:	6060      	str	r0, [r4, #4]
 8006bde:	6863      	ldr	r3, [r4, #4]
 8006be0:	6123      	str	r3, [r4, #16]
 8006be2:	2300      	movs	r3, #0
 8006be4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006be8:	e7aa      	b.n	8006b40 <_printf_i+0x148>
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	4632      	mov	r2, r6
 8006bee:	4649      	mov	r1, r9
 8006bf0:	4640      	mov	r0, r8
 8006bf2:	47d0      	blx	sl
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d0ad      	beq.n	8006b54 <_printf_i+0x15c>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	079b      	lsls	r3, r3, #30
 8006bfc:	d413      	bmi.n	8006c26 <_printf_i+0x22e>
 8006bfe:	68e0      	ldr	r0, [r4, #12]
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	4298      	cmp	r0, r3
 8006c04:	bfb8      	it	lt
 8006c06:	4618      	movlt	r0, r3
 8006c08:	e7a6      	b.n	8006b58 <_printf_i+0x160>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4632      	mov	r2, r6
 8006c0e:	4649      	mov	r1, r9
 8006c10:	4640      	mov	r0, r8
 8006c12:	47d0      	blx	sl
 8006c14:	3001      	adds	r0, #1
 8006c16:	d09d      	beq.n	8006b54 <_printf_i+0x15c>
 8006c18:	3501      	adds	r5, #1
 8006c1a:	68e3      	ldr	r3, [r4, #12]
 8006c1c:	9903      	ldr	r1, [sp, #12]
 8006c1e:	1a5b      	subs	r3, r3, r1
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	dcf2      	bgt.n	8006c0a <_printf_i+0x212>
 8006c24:	e7eb      	b.n	8006bfe <_printf_i+0x206>
 8006c26:	2500      	movs	r5, #0
 8006c28:	f104 0619 	add.w	r6, r4, #25
 8006c2c:	e7f5      	b.n	8006c1a <_printf_i+0x222>
 8006c2e:	bf00      	nop
 8006c30:	0800913e 	.word	0x0800913e
 8006c34:	0800914f 	.word	0x0800914f

08006c38 <std>:
 8006c38:	2300      	movs	r3, #0
 8006c3a:	b510      	push	{r4, lr}
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c46:	6083      	str	r3, [r0, #8]
 8006c48:	8181      	strh	r1, [r0, #12]
 8006c4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c4c:	81c2      	strh	r2, [r0, #14]
 8006c4e:	6183      	str	r3, [r0, #24]
 8006c50:	4619      	mov	r1, r3
 8006c52:	2208      	movs	r2, #8
 8006c54:	305c      	adds	r0, #92	@ 0x5c
 8006c56:	f000 f914 	bl	8006e82 <memset>
 8006c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c90 <std+0x58>)
 8006c5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c94 <std+0x5c>)
 8006c60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c62:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <std+0x60>)
 8006c64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c66:	4b0d      	ldr	r3, [pc, #52]	@ (8006c9c <std+0x64>)
 8006c68:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <std+0x68>)
 8006c6c:	6224      	str	r4, [r4, #32]
 8006c6e:	429c      	cmp	r4, r3
 8006c70:	d006      	beq.n	8006c80 <std+0x48>
 8006c72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c76:	4294      	cmp	r4, r2
 8006c78:	d002      	beq.n	8006c80 <std+0x48>
 8006c7a:	33d0      	adds	r3, #208	@ 0xd0
 8006c7c:	429c      	cmp	r4, r3
 8006c7e:	d105      	bne.n	8006c8c <std+0x54>
 8006c80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c88:	f000 b978 	b.w	8006f7c <__retarget_lock_init_recursive>
 8006c8c:	bd10      	pop	{r4, pc}
 8006c8e:	bf00      	nop
 8006c90:	08006dfd 	.word	0x08006dfd
 8006c94:	08006e1f 	.word	0x08006e1f
 8006c98:	08006e57 	.word	0x08006e57
 8006c9c:	08006e7b 	.word	0x08006e7b
 8006ca0:	200003b0 	.word	0x200003b0

08006ca4 <stdio_exit_handler>:
 8006ca4:	4a02      	ldr	r2, [pc, #8]	@ (8006cb0 <stdio_exit_handler+0xc>)
 8006ca6:	4903      	ldr	r1, [pc, #12]	@ (8006cb4 <stdio_exit_handler+0x10>)
 8006ca8:	4803      	ldr	r0, [pc, #12]	@ (8006cb8 <stdio_exit_handler+0x14>)
 8006caa:	f000 b869 	b.w	8006d80 <_fwalk_sglue>
 8006cae:	bf00      	nop
 8006cb0:	2000000c 	.word	0x2000000c
 8006cb4:	080088dd 	.word	0x080088dd
 8006cb8:	2000001c 	.word	0x2000001c

08006cbc <cleanup_stdio>:
 8006cbc:	6841      	ldr	r1, [r0, #4]
 8006cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf0 <cleanup_stdio+0x34>)
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	b510      	push	{r4, lr}
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	d001      	beq.n	8006ccc <cleanup_stdio+0x10>
 8006cc8:	f001 fe08 	bl	80088dc <_fflush_r>
 8006ccc:	68a1      	ldr	r1, [r4, #8]
 8006cce:	4b09      	ldr	r3, [pc, #36]	@ (8006cf4 <cleanup_stdio+0x38>)
 8006cd0:	4299      	cmp	r1, r3
 8006cd2:	d002      	beq.n	8006cda <cleanup_stdio+0x1e>
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f001 fe01 	bl	80088dc <_fflush_r>
 8006cda:	68e1      	ldr	r1, [r4, #12]
 8006cdc:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <cleanup_stdio+0x3c>)
 8006cde:	4299      	cmp	r1, r3
 8006ce0:	d004      	beq.n	8006cec <cleanup_stdio+0x30>
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce8:	f001 bdf8 	b.w	80088dc <_fflush_r>
 8006cec:	bd10      	pop	{r4, pc}
 8006cee:	bf00      	nop
 8006cf0:	200003b0 	.word	0x200003b0
 8006cf4:	20000418 	.word	0x20000418
 8006cf8:	20000480 	.word	0x20000480

08006cfc <global_stdio_init.part.0>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006d2c <global_stdio_init.part.0+0x30>)
 8006d00:	4c0b      	ldr	r4, [pc, #44]	@ (8006d30 <global_stdio_init.part.0+0x34>)
 8006d02:	4a0c      	ldr	r2, [pc, #48]	@ (8006d34 <global_stdio_init.part.0+0x38>)
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	4620      	mov	r0, r4
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2104      	movs	r1, #4
 8006d0c:	f7ff ff94 	bl	8006c38 <std>
 8006d10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d14:	2201      	movs	r2, #1
 8006d16:	2109      	movs	r1, #9
 8006d18:	f7ff ff8e 	bl	8006c38 <std>
 8006d1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d20:	2202      	movs	r2, #2
 8006d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d26:	2112      	movs	r1, #18
 8006d28:	f7ff bf86 	b.w	8006c38 <std>
 8006d2c:	200004e8 	.word	0x200004e8
 8006d30:	200003b0 	.word	0x200003b0
 8006d34:	08006ca5 	.word	0x08006ca5

08006d38 <__sfp_lock_acquire>:
 8006d38:	4801      	ldr	r0, [pc, #4]	@ (8006d40 <__sfp_lock_acquire+0x8>)
 8006d3a:	f000 b920 	b.w	8006f7e <__retarget_lock_acquire_recursive>
 8006d3e:	bf00      	nop
 8006d40:	200004f1 	.word	0x200004f1

08006d44 <__sfp_lock_release>:
 8006d44:	4801      	ldr	r0, [pc, #4]	@ (8006d4c <__sfp_lock_release+0x8>)
 8006d46:	f000 b91b 	b.w	8006f80 <__retarget_lock_release_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	200004f1 	.word	0x200004f1

08006d50 <__sinit>:
 8006d50:	b510      	push	{r4, lr}
 8006d52:	4604      	mov	r4, r0
 8006d54:	f7ff fff0 	bl	8006d38 <__sfp_lock_acquire>
 8006d58:	6a23      	ldr	r3, [r4, #32]
 8006d5a:	b11b      	cbz	r3, 8006d64 <__sinit+0x14>
 8006d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d60:	f7ff bff0 	b.w	8006d44 <__sfp_lock_release>
 8006d64:	4b04      	ldr	r3, [pc, #16]	@ (8006d78 <__sinit+0x28>)
 8006d66:	6223      	str	r3, [r4, #32]
 8006d68:	4b04      	ldr	r3, [pc, #16]	@ (8006d7c <__sinit+0x2c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1f5      	bne.n	8006d5c <__sinit+0xc>
 8006d70:	f7ff ffc4 	bl	8006cfc <global_stdio_init.part.0>
 8006d74:	e7f2      	b.n	8006d5c <__sinit+0xc>
 8006d76:	bf00      	nop
 8006d78:	08006cbd 	.word	0x08006cbd
 8006d7c:	200004e8 	.word	0x200004e8

08006d80 <_fwalk_sglue>:
 8006d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d84:	4607      	mov	r7, r0
 8006d86:	4688      	mov	r8, r1
 8006d88:	4614      	mov	r4, r2
 8006d8a:	2600      	movs	r6, #0
 8006d8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d90:	f1b9 0901 	subs.w	r9, r9, #1
 8006d94:	d505      	bpl.n	8006da2 <_fwalk_sglue+0x22>
 8006d96:	6824      	ldr	r4, [r4, #0]
 8006d98:	2c00      	cmp	r4, #0
 8006d9a:	d1f7      	bne.n	8006d8c <_fwalk_sglue+0xc>
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006da2:	89ab      	ldrh	r3, [r5, #12]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d907      	bls.n	8006db8 <_fwalk_sglue+0x38>
 8006da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dac:	3301      	adds	r3, #1
 8006dae:	d003      	beq.n	8006db8 <_fwalk_sglue+0x38>
 8006db0:	4629      	mov	r1, r5
 8006db2:	4638      	mov	r0, r7
 8006db4:	47c0      	blx	r8
 8006db6:	4306      	orrs	r6, r0
 8006db8:	3568      	adds	r5, #104	@ 0x68
 8006dba:	e7e9      	b.n	8006d90 <_fwalk_sglue+0x10>

08006dbc <siprintf>:
 8006dbc:	b40e      	push	{r1, r2, r3}
 8006dbe:	b500      	push	{lr}
 8006dc0:	b09c      	sub	sp, #112	@ 0x70
 8006dc2:	ab1d      	add	r3, sp, #116	@ 0x74
 8006dc4:	9002      	str	r0, [sp, #8]
 8006dc6:	9006      	str	r0, [sp, #24]
 8006dc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006dcc:	4809      	ldr	r0, [pc, #36]	@ (8006df4 <siprintf+0x38>)
 8006dce:	9107      	str	r1, [sp, #28]
 8006dd0:	9104      	str	r1, [sp, #16]
 8006dd2:	4909      	ldr	r1, [pc, #36]	@ (8006df8 <siprintf+0x3c>)
 8006dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd8:	9105      	str	r1, [sp, #20]
 8006dda:	6800      	ldr	r0, [r0, #0]
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	a902      	add	r1, sp, #8
 8006de0:	f001 fbfc 	bl	80085dc <_svfiprintf_r>
 8006de4:	9b02      	ldr	r3, [sp, #8]
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	b01c      	add	sp, #112	@ 0x70
 8006dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8006df0:	b003      	add	sp, #12
 8006df2:	4770      	bx	lr
 8006df4:	20000018 	.word	0x20000018
 8006df8:	ffff0208 	.word	0xffff0208

08006dfc <__sread>:
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	460c      	mov	r4, r1
 8006e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e04:	f000 f86c 	bl	8006ee0 <_read_r>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	bfab      	itete	ge
 8006e0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e10:	181b      	addge	r3, r3, r0
 8006e12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e16:	bfac      	ite	ge
 8006e18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e1a:	81a3      	strhlt	r3, [r4, #12]
 8006e1c:	bd10      	pop	{r4, pc}

08006e1e <__swrite>:
 8006e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e22:	461f      	mov	r7, r3
 8006e24:	898b      	ldrh	r3, [r1, #12]
 8006e26:	05db      	lsls	r3, r3, #23
 8006e28:	4605      	mov	r5, r0
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	4616      	mov	r6, r2
 8006e2e:	d505      	bpl.n	8006e3c <__swrite+0x1e>
 8006e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e34:	2302      	movs	r3, #2
 8006e36:	2200      	movs	r2, #0
 8006e38:	f000 f840 	bl	8006ebc <_lseek_r>
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e46:	81a3      	strh	r3, [r4, #12]
 8006e48:	4632      	mov	r2, r6
 8006e4a:	463b      	mov	r3, r7
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e52:	f000 b857 	b.w	8006f04 <_write_r>

08006e56 <__sseek>:
 8006e56:	b510      	push	{r4, lr}
 8006e58:	460c      	mov	r4, r1
 8006e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e5e:	f000 f82d 	bl	8006ebc <_lseek_r>
 8006e62:	1c43      	adds	r3, r0, #1
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	bf15      	itete	ne
 8006e68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e72:	81a3      	strheq	r3, [r4, #12]
 8006e74:	bf18      	it	ne
 8006e76:	81a3      	strhne	r3, [r4, #12]
 8006e78:	bd10      	pop	{r4, pc}

08006e7a <__sclose>:
 8006e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e7e:	f000 b80d 	b.w	8006e9c <_close_r>

08006e82 <memset>:
 8006e82:	4402      	add	r2, r0
 8006e84:	4603      	mov	r3, r0
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d100      	bne.n	8006e8c <memset+0xa>
 8006e8a:	4770      	bx	lr
 8006e8c:	f803 1b01 	strb.w	r1, [r3], #1
 8006e90:	e7f9      	b.n	8006e86 <memset+0x4>
	...

08006e94 <_localeconv_r>:
 8006e94:	4800      	ldr	r0, [pc, #0]	@ (8006e98 <_localeconv_r+0x4>)
 8006e96:	4770      	bx	lr
 8006e98:	20000158 	.word	0x20000158

08006e9c <_close_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d06      	ldr	r5, [pc, #24]	@ (8006eb8 <_close_r+0x1c>)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7fa fb1e 	bl	80014e8 <_close>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_close_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_close_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	200004ec 	.word	0x200004ec

08006ebc <_lseek_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4d07      	ldr	r5, [pc, #28]	@ (8006edc <_lseek_r+0x20>)
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	4608      	mov	r0, r1
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	602a      	str	r2, [r5, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f7fa fb33 	bl	8001536 <_lseek>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_lseek_r+0x1e>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_lseek_r+0x1e>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	200004ec 	.word	0x200004ec

08006ee0 <_read_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4d07      	ldr	r5, [pc, #28]	@ (8006f00 <_read_r+0x20>)
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	4608      	mov	r0, r1
 8006ee8:	4611      	mov	r1, r2
 8006eea:	2200      	movs	r2, #0
 8006eec:	602a      	str	r2, [r5, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f7fa fac1 	bl	8001476 <_read>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_read_r+0x1e>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_read_r+0x1e>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	200004ec 	.word	0x200004ec

08006f04 <_write_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d07      	ldr	r5, [pc, #28]	@ (8006f24 <_write_r+0x20>)
 8006f08:	4604      	mov	r4, r0
 8006f0a:	4608      	mov	r0, r1
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	2200      	movs	r2, #0
 8006f10:	602a      	str	r2, [r5, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f7fa facc 	bl	80014b0 <_write>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_write_r+0x1e>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_write_r+0x1e>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	200004ec 	.word	0x200004ec

08006f28 <__errno>:
 8006f28:	4b01      	ldr	r3, [pc, #4]	@ (8006f30 <__errno+0x8>)
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	20000018 	.word	0x20000018

08006f34 <__libc_init_array>:
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	4d0d      	ldr	r5, [pc, #52]	@ (8006f6c <__libc_init_array+0x38>)
 8006f38:	4c0d      	ldr	r4, [pc, #52]	@ (8006f70 <__libc_init_array+0x3c>)
 8006f3a:	1b64      	subs	r4, r4, r5
 8006f3c:	10a4      	asrs	r4, r4, #2
 8006f3e:	2600      	movs	r6, #0
 8006f40:	42a6      	cmp	r6, r4
 8006f42:	d109      	bne.n	8006f58 <__libc_init_array+0x24>
 8006f44:	4d0b      	ldr	r5, [pc, #44]	@ (8006f74 <__libc_init_array+0x40>)
 8006f46:	4c0c      	ldr	r4, [pc, #48]	@ (8006f78 <__libc_init_array+0x44>)
 8006f48:	f002 f866 	bl	8009018 <_init>
 8006f4c:	1b64      	subs	r4, r4, r5
 8006f4e:	10a4      	asrs	r4, r4, #2
 8006f50:	2600      	movs	r6, #0
 8006f52:	42a6      	cmp	r6, r4
 8006f54:	d105      	bne.n	8006f62 <__libc_init_array+0x2e>
 8006f56:	bd70      	pop	{r4, r5, r6, pc}
 8006f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f5c:	4798      	blx	r3
 8006f5e:	3601      	adds	r6, #1
 8006f60:	e7ee      	b.n	8006f40 <__libc_init_array+0xc>
 8006f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f66:	4798      	blx	r3
 8006f68:	3601      	adds	r6, #1
 8006f6a:	e7f2      	b.n	8006f52 <__libc_init_array+0x1e>
 8006f6c:	080094a8 	.word	0x080094a8
 8006f70:	080094a8 	.word	0x080094a8
 8006f74:	080094a8 	.word	0x080094a8
 8006f78:	080094ac 	.word	0x080094ac

08006f7c <__retarget_lock_init_recursive>:
 8006f7c:	4770      	bx	lr

08006f7e <__retarget_lock_acquire_recursive>:
 8006f7e:	4770      	bx	lr

08006f80 <__retarget_lock_release_recursive>:
 8006f80:	4770      	bx	lr

08006f82 <quorem>:
 8006f82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f86:	6903      	ldr	r3, [r0, #16]
 8006f88:	690c      	ldr	r4, [r1, #16]
 8006f8a:	42a3      	cmp	r3, r4
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	db7e      	blt.n	800708e <quorem+0x10c>
 8006f90:	3c01      	subs	r4, #1
 8006f92:	f101 0814 	add.w	r8, r1, #20
 8006f96:	00a3      	lsls	r3, r4, #2
 8006f98:	f100 0514 	add.w	r5, r0, #20
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fac:	3301      	adds	r3, #1
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fb8:	d32e      	bcc.n	8007018 <quorem+0x96>
 8006fba:	f04f 0a00 	mov.w	sl, #0
 8006fbe:	46c4      	mov	ip, r8
 8006fc0:	46ae      	mov	lr, r5
 8006fc2:	46d3      	mov	fp, sl
 8006fc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fc8:	b298      	uxth	r0, r3
 8006fca:	fb06 a000 	mla	r0, r6, r0, sl
 8006fce:	0c02      	lsrs	r2, r0, #16
 8006fd0:	0c1b      	lsrs	r3, r3, #16
 8006fd2:	fb06 2303 	mla	r3, r6, r3, r2
 8006fd6:	f8de 2000 	ldr.w	r2, [lr]
 8006fda:	b280      	uxth	r0, r0
 8006fdc:	b292      	uxth	r2, r2
 8006fde:	1a12      	subs	r2, r2, r0
 8006fe0:	445a      	add	r2, fp
 8006fe2:	f8de 0000 	ldr.w	r0, [lr]
 8006fe6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ff0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ff4:	b292      	uxth	r2, r2
 8006ff6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ffa:	45e1      	cmp	r9, ip
 8006ffc:	f84e 2b04 	str.w	r2, [lr], #4
 8007000:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007004:	d2de      	bcs.n	8006fc4 <quorem+0x42>
 8007006:	9b00      	ldr	r3, [sp, #0]
 8007008:	58eb      	ldr	r3, [r5, r3]
 800700a:	b92b      	cbnz	r3, 8007018 <quorem+0x96>
 800700c:	9b01      	ldr	r3, [sp, #4]
 800700e:	3b04      	subs	r3, #4
 8007010:	429d      	cmp	r5, r3
 8007012:	461a      	mov	r2, r3
 8007014:	d32f      	bcc.n	8007076 <quorem+0xf4>
 8007016:	613c      	str	r4, [r7, #16]
 8007018:	4638      	mov	r0, r7
 800701a:	f001 f97b 	bl	8008314 <__mcmp>
 800701e:	2800      	cmp	r0, #0
 8007020:	db25      	blt.n	800706e <quorem+0xec>
 8007022:	4629      	mov	r1, r5
 8007024:	2000      	movs	r0, #0
 8007026:	f858 2b04 	ldr.w	r2, [r8], #4
 800702a:	f8d1 c000 	ldr.w	ip, [r1]
 800702e:	fa1f fe82 	uxth.w	lr, r2
 8007032:	fa1f f38c 	uxth.w	r3, ip
 8007036:	eba3 030e 	sub.w	r3, r3, lr
 800703a:	4403      	add	r3, r0
 800703c:	0c12      	lsrs	r2, r2, #16
 800703e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007042:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007046:	b29b      	uxth	r3, r3
 8007048:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800704c:	45c1      	cmp	r9, r8
 800704e:	f841 3b04 	str.w	r3, [r1], #4
 8007052:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007056:	d2e6      	bcs.n	8007026 <quorem+0xa4>
 8007058:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800705c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007060:	b922      	cbnz	r2, 800706c <quorem+0xea>
 8007062:	3b04      	subs	r3, #4
 8007064:	429d      	cmp	r5, r3
 8007066:	461a      	mov	r2, r3
 8007068:	d30b      	bcc.n	8007082 <quorem+0x100>
 800706a:	613c      	str	r4, [r7, #16]
 800706c:	3601      	adds	r6, #1
 800706e:	4630      	mov	r0, r6
 8007070:	b003      	add	sp, #12
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	6812      	ldr	r2, [r2, #0]
 8007078:	3b04      	subs	r3, #4
 800707a:	2a00      	cmp	r2, #0
 800707c:	d1cb      	bne.n	8007016 <quorem+0x94>
 800707e:	3c01      	subs	r4, #1
 8007080:	e7c6      	b.n	8007010 <quorem+0x8e>
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	3b04      	subs	r3, #4
 8007086:	2a00      	cmp	r2, #0
 8007088:	d1ef      	bne.n	800706a <quorem+0xe8>
 800708a:	3c01      	subs	r4, #1
 800708c:	e7ea      	b.n	8007064 <quorem+0xe2>
 800708e:	2000      	movs	r0, #0
 8007090:	e7ee      	b.n	8007070 <quorem+0xee>
 8007092:	0000      	movs	r0, r0
 8007094:	0000      	movs	r0, r0
	...

08007098 <_dtoa_r>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	69c7      	ldr	r7, [r0, #28]
 800709e:	b099      	sub	sp, #100	@ 0x64
 80070a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80070a4:	ec55 4b10 	vmov	r4, r5, d0
 80070a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80070aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80070ac:	4683      	mov	fp, r0
 80070ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80070b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80070b2:	b97f      	cbnz	r7, 80070d4 <_dtoa_r+0x3c>
 80070b4:	2010      	movs	r0, #16
 80070b6:	f000 fdfd 	bl	8007cb4 <malloc>
 80070ba:	4602      	mov	r2, r0
 80070bc:	f8cb 001c 	str.w	r0, [fp, #28]
 80070c0:	b920      	cbnz	r0, 80070cc <_dtoa_r+0x34>
 80070c2:	4ba7      	ldr	r3, [pc, #668]	@ (8007360 <_dtoa_r+0x2c8>)
 80070c4:	21ef      	movs	r1, #239	@ 0xef
 80070c6:	48a7      	ldr	r0, [pc, #668]	@ (8007364 <_dtoa_r+0x2cc>)
 80070c8:	f001 fc68 	bl	800899c <__assert_func>
 80070cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80070d0:	6007      	str	r7, [r0, #0]
 80070d2:	60c7      	str	r7, [r0, #12]
 80070d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070d8:	6819      	ldr	r1, [r3, #0]
 80070da:	b159      	cbz	r1, 80070f4 <_dtoa_r+0x5c>
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	604a      	str	r2, [r1, #4]
 80070e0:	2301      	movs	r3, #1
 80070e2:	4093      	lsls	r3, r2
 80070e4:	608b      	str	r3, [r1, #8]
 80070e6:	4658      	mov	r0, fp
 80070e8:	f000 feda 	bl	8007ea0 <_Bfree>
 80070ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	1e2b      	subs	r3, r5, #0
 80070f6:	bfb9      	ittee	lt
 80070f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80070fc:	9303      	strlt	r3, [sp, #12]
 80070fe:	2300      	movge	r3, #0
 8007100:	6033      	strge	r3, [r6, #0]
 8007102:	9f03      	ldr	r7, [sp, #12]
 8007104:	4b98      	ldr	r3, [pc, #608]	@ (8007368 <_dtoa_r+0x2d0>)
 8007106:	bfbc      	itt	lt
 8007108:	2201      	movlt	r2, #1
 800710a:	6032      	strlt	r2, [r6, #0]
 800710c:	43bb      	bics	r3, r7
 800710e:	d112      	bne.n	8007136 <_dtoa_r+0x9e>
 8007110:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007112:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800711c:	4323      	orrs	r3, r4
 800711e:	f000 854d 	beq.w	8007bbc <_dtoa_r+0xb24>
 8007122:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007124:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800737c <_dtoa_r+0x2e4>
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 854f 	beq.w	8007bcc <_dtoa_r+0xb34>
 800712e:	f10a 0303 	add.w	r3, sl, #3
 8007132:	f000 bd49 	b.w	8007bc8 <_dtoa_r+0xb30>
 8007136:	ed9d 7b02 	vldr	d7, [sp, #8]
 800713a:	2200      	movs	r2, #0
 800713c:	ec51 0b17 	vmov	r0, r1, d7
 8007140:	2300      	movs	r3, #0
 8007142:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007146:	f7f9 fcc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800714a:	4680      	mov	r8, r0
 800714c:	b158      	cbz	r0, 8007166 <_dtoa_r+0xce>
 800714e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007150:	2301      	movs	r3, #1
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007156:	b113      	cbz	r3, 800715e <_dtoa_r+0xc6>
 8007158:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800715a:	4b84      	ldr	r3, [pc, #528]	@ (800736c <_dtoa_r+0x2d4>)
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007380 <_dtoa_r+0x2e8>
 8007162:	f000 bd33 	b.w	8007bcc <_dtoa_r+0xb34>
 8007166:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800716a:	aa16      	add	r2, sp, #88	@ 0x58
 800716c:	a917      	add	r1, sp, #92	@ 0x5c
 800716e:	4658      	mov	r0, fp
 8007170:	f001 f980 	bl	8008474 <__d2b>
 8007174:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007178:	4681      	mov	r9, r0
 800717a:	2e00      	cmp	r6, #0
 800717c:	d077      	beq.n	800726e <_dtoa_r+0x1d6>
 800717e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007180:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800718c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007190:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007194:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007198:	4619      	mov	r1, r3
 800719a:	2200      	movs	r2, #0
 800719c:	4b74      	ldr	r3, [pc, #464]	@ (8007370 <_dtoa_r+0x2d8>)
 800719e:	f7f9 f87b 	bl	8000298 <__aeabi_dsub>
 80071a2:	a369      	add	r3, pc, #420	@ (adr r3, 8007348 <_dtoa_r+0x2b0>)
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f7f9 fa2e 	bl	8000608 <__aeabi_dmul>
 80071ac:	a368      	add	r3, pc, #416	@ (adr r3, 8007350 <_dtoa_r+0x2b8>)
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f7f9 f873 	bl	800029c <__adddf3>
 80071b6:	4604      	mov	r4, r0
 80071b8:	4630      	mov	r0, r6
 80071ba:	460d      	mov	r5, r1
 80071bc:	f7f9 f9ba 	bl	8000534 <__aeabi_i2d>
 80071c0:	a365      	add	r3, pc, #404	@ (adr r3, 8007358 <_dtoa_r+0x2c0>)
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	f7f9 fa1f 	bl	8000608 <__aeabi_dmul>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4620      	mov	r0, r4
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7f9 f863 	bl	800029c <__adddf3>
 80071d6:	4604      	mov	r4, r0
 80071d8:	460d      	mov	r5, r1
 80071da:	f7f9 fcc5 	bl	8000b68 <__aeabi_d2iz>
 80071de:	2200      	movs	r2, #0
 80071e0:	4607      	mov	r7, r0
 80071e2:	2300      	movs	r3, #0
 80071e4:	4620      	mov	r0, r4
 80071e6:	4629      	mov	r1, r5
 80071e8:	f7f9 fc80 	bl	8000aec <__aeabi_dcmplt>
 80071ec:	b140      	cbz	r0, 8007200 <_dtoa_r+0x168>
 80071ee:	4638      	mov	r0, r7
 80071f0:	f7f9 f9a0 	bl	8000534 <__aeabi_i2d>
 80071f4:	4622      	mov	r2, r4
 80071f6:	462b      	mov	r3, r5
 80071f8:	f7f9 fc6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80071fc:	b900      	cbnz	r0, 8007200 <_dtoa_r+0x168>
 80071fe:	3f01      	subs	r7, #1
 8007200:	2f16      	cmp	r7, #22
 8007202:	d851      	bhi.n	80072a8 <_dtoa_r+0x210>
 8007204:	4b5b      	ldr	r3, [pc, #364]	@ (8007374 <_dtoa_r+0x2dc>)
 8007206:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007212:	f7f9 fc6b 	bl	8000aec <__aeabi_dcmplt>
 8007216:	2800      	cmp	r0, #0
 8007218:	d048      	beq.n	80072ac <_dtoa_r+0x214>
 800721a:	3f01      	subs	r7, #1
 800721c:	2300      	movs	r3, #0
 800721e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007220:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007222:	1b9b      	subs	r3, r3, r6
 8007224:	1e5a      	subs	r2, r3, #1
 8007226:	bf44      	itt	mi
 8007228:	f1c3 0801 	rsbmi	r8, r3, #1
 800722c:	2300      	movmi	r3, #0
 800722e:	9208      	str	r2, [sp, #32]
 8007230:	bf54      	ite	pl
 8007232:	f04f 0800 	movpl.w	r8, #0
 8007236:	9308      	strmi	r3, [sp, #32]
 8007238:	2f00      	cmp	r7, #0
 800723a:	db39      	blt.n	80072b0 <_dtoa_r+0x218>
 800723c:	9b08      	ldr	r3, [sp, #32]
 800723e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007240:	443b      	add	r3, r7
 8007242:	9308      	str	r3, [sp, #32]
 8007244:	2300      	movs	r3, #0
 8007246:	930a      	str	r3, [sp, #40]	@ 0x28
 8007248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724a:	2b09      	cmp	r3, #9
 800724c:	d864      	bhi.n	8007318 <_dtoa_r+0x280>
 800724e:	2b05      	cmp	r3, #5
 8007250:	bfc4      	itt	gt
 8007252:	3b04      	subgt	r3, #4
 8007254:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007258:	f1a3 0302 	sub.w	r3, r3, #2
 800725c:	bfcc      	ite	gt
 800725e:	2400      	movgt	r4, #0
 8007260:	2401      	movle	r4, #1
 8007262:	2b03      	cmp	r3, #3
 8007264:	d863      	bhi.n	800732e <_dtoa_r+0x296>
 8007266:	e8df f003 	tbb	[pc, r3]
 800726a:	372a      	.short	0x372a
 800726c:	5535      	.short	0x5535
 800726e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007272:	441e      	add	r6, r3
 8007274:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007278:	2b20      	cmp	r3, #32
 800727a:	bfc1      	itttt	gt
 800727c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007280:	409f      	lslgt	r7, r3
 8007282:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007286:	fa24 f303 	lsrgt.w	r3, r4, r3
 800728a:	bfd6      	itet	le
 800728c:	f1c3 0320 	rsble	r3, r3, #32
 8007290:	ea47 0003 	orrgt.w	r0, r7, r3
 8007294:	fa04 f003 	lslle.w	r0, r4, r3
 8007298:	f7f9 f93c 	bl	8000514 <__aeabi_ui2d>
 800729c:	2201      	movs	r2, #1
 800729e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80072a2:	3e01      	subs	r6, #1
 80072a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80072a6:	e777      	b.n	8007198 <_dtoa_r+0x100>
 80072a8:	2301      	movs	r3, #1
 80072aa:	e7b8      	b.n	800721e <_dtoa_r+0x186>
 80072ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80072ae:	e7b7      	b.n	8007220 <_dtoa_r+0x188>
 80072b0:	427b      	negs	r3, r7
 80072b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80072b4:	2300      	movs	r3, #0
 80072b6:	eba8 0807 	sub.w	r8, r8, r7
 80072ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072bc:	e7c4      	b.n	8007248 <_dtoa_r+0x1b0>
 80072be:	2300      	movs	r3, #0
 80072c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dc35      	bgt.n	8007334 <_dtoa_r+0x29c>
 80072c8:	2301      	movs	r3, #1
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	9307      	str	r3, [sp, #28]
 80072ce:	461a      	mov	r2, r3
 80072d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80072d2:	e00b      	b.n	80072ec <_dtoa_r+0x254>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e7f3      	b.n	80072c0 <_dtoa_r+0x228>
 80072d8:	2300      	movs	r3, #0
 80072da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072de:	18fb      	adds	r3, r7, r3
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	3301      	adds	r3, #1
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	9307      	str	r3, [sp, #28]
 80072e8:	bfb8      	it	lt
 80072ea:	2301      	movlt	r3, #1
 80072ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80072f0:	2100      	movs	r1, #0
 80072f2:	2204      	movs	r2, #4
 80072f4:	f102 0514 	add.w	r5, r2, #20
 80072f8:	429d      	cmp	r5, r3
 80072fa:	d91f      	bls.n	800733c <_dtoa_r+0x2a4>
 80072fc:	6041      	str	r1, [r0, #4]
 80072fe:	4658      	mov	r0, fp
 8007300:	f000 fd8e 	bl	8007e20 <_Balloc>
 8007304:	4682      	mov	sl, r0
 8007306:	2800      	cmp	r0, #0
 8007308:	d13c      	bne.n	8007384 <_dtoa_r+0x2ec>
 800730a:	4b1b      	ldr	r3, [pc, #108]	@ (8007378 <_dtoa_r+0x2e0>)
 800730c:	4602      	mov	r2, r0
 800730e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007312:	e6d8      	b.n	80070c6 <_dtoa_r+0x2e>
 8007314:	2301      	movs	r3, #1
 8007316:	e7e0      	b.n	80072da <_dtoa_r+0x242>
 8007318:	2401      	movs	r4, #1
 800731a:	2300      	movs	r3, #0
 800731c:	9309      	str	r3, [sp, #36]	@ 0x24
 800731e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007320:	f04f 33ff 	mov.w	r3, #4294967295
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	9307      	str	r3, [sp, #28]
 8007328:	2200      	movs	r2, #0
 800732a:	2312      	movs	r3, #18
 800732c:	e7d0      	b.n	80072d0 <_dtoa_r+0x238>
 800732e:	2301      	movs	r3, #1
 8007330:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007332:	e7f5      	b.n	8007320 <_dtoa_r+0x288>
 8007334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	9307      	str	r3, [sp, #28]
 800733a:	e7d7      	b.n	80072ec <_dtoa_r+0x254>
 800733c:	3101      	adds	r1, #1
 800733e:	0052      	lsls	r2, r2, #1
 8007340:	e7d8      	b.n	80072f4 <_dtoa_r+0x25c>
 8007342:	bf00      	nop
 8007344:	f3af 8000 	nop.w
 8007348:	636f4361 	.word	0x636f4361
 800734c:	3fd287a7 	.word	0x3fd287a7
 8007350:	8b60c8b3 	.word	0x8b60c8b3
 8007354:	3fc68a28 	.word	0x3fc68a28
 8007358:	509f79fb 	.word	0x509f79fb
 800735c:	3fd34413 	.word	0x3fd34413
 8007360:	0800916d 	.word	0x0800916d
 8007364:	08009184 	.word	0x08009184
 8007368:	7ff00000 	.word	0x7ff00000
 800736c:	0800913d 	.word	0x0800913d
 8007370:	3ff80000 	.word	0x3ff80000
 8007374:	08009280 	.word	0x08009280
 8007378:	080091dc 	.word	0x080091dc
 800737c:	08009169 	.word	0x08009169
 8007380:	0800913c 	.word	0x0800913c
 8007384:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007388:	6018      	str	r0, [r3, #0]
 800738a:	9b07      	ldr	r3, [sp, #28]
 800738c:	2b0e      	cmp	r3, #14
 800738e:	f200 80a4 	bhi.w	80074da <_dtoa_r+0x442>
 8007392:	2c00      	cmp	r4, #0
 8007394:	f000 80a1 	beq.w	80074da <_dtoa_r+0x442>
 8007398:	2f00      	cmp	r7, #0
 800739a:	dd33      	ble.n	8007404 <_dtoa_r+0x36c>
 800739c:	4bad      	ldr	r3, [pc, #692]	@ (8007654 <_dtoa_r+0x5bc>)
 800739e:	f007 020f 	and.w	r2, r7, #15
 80073a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073a6:	ed93 7b00 	vldr	d7, [r3]
 80073aa:	05f8      	lsls	r0, r7, #23
 80073ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80073b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80073b4:	d516      	bpl.n	80073e4 <_dtoa_r+0x34c>
 80073b6:	4ba8      	ldr	r3, [pc, #672]	@ (8007658 <_dtoa_r+0x5c0>)
 80073b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073c0:	f7f9 fa4c 	bl	800085c <__aeabi_ddiv>
 80073c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073c8:	f004 040f 	and.w	r4, r4, #15
 80073cc:	2603      	movs	r6, #3
 80073ce:	4da2      	ldr	r5, [pc, #648]	@ (8007658 <_dtoa_r+0x5c0>)
 80073d0:	b954      	cbnz	r4, 80073e8 <_dtoa_r+0x350>
 80073d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073da:	f7f9 fa3f 	bl	800085c <__aeabi_ddiv>
 80073de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e2:	e028      	b.n	8007436 <_dtoa_r+0x39e>
 80073e4:	2602      	movs	r6, #2
 80073e6:	e7f2      	b.n	80073ce <_dtoa_r+0x336>
 80073e8:	07e1      	lsls	r1, r4, #31
 80073ea:	d508      	bpl.n	80073fe <_dtoa_r+0x366>
 80073ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073f4:	f7f9 f908 	bl	8000608 <__aeabi_dmul>
 80073f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073fc:	3601      	adds	r6, #1
 80073fe:	1064      	asrs	r4, r4, #1
 8007400:	3508      	adds	r5, #8
 8007402:	e7e5      	b.n	80073d0 <_dtoa_r+0x338>
 8007404:	f000 80d2 	beq.w	80075ac <_dtoa_r+0x514>
 8007408:	427c      	negs	r4, r7
 800740a:	4b92      	ldr	r3, [pc, #584]	@ (8007654 <_dtoa_r+0x5bc>)
 800740c:	4d92      	ldr	r5, [pc, #584]	@ (8007658 <_dtoa_r+0x5c0>)
 800740e:	f004 020f 	and.w	r2, r4, #15
 8007412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800741e:	f7f9 f8f3 	bl	8000608 <__aeabi_dmul>
 8007422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007426:	1124      	asrs	r4, r4, #4
 8007428:	2300      	movs	r3, #0
 800742a:	2602      	movs	r6, #2
 800742c:	2c00      	cmp	r4, #0
 800742e:	f040 80b2 	bne.w	8007596 <_dtoa_r+0x4fe>
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1d3      	bne.n	80073de <_dtoa_r+0x346>
 8007436:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007438:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 80b7 	beq.w	80075b0 <_dtoa_r+0x518>
 8007442:	4b86      	ldr	r3, [pc, #536]	@ (800765c <_dtoa_r+0x5c4>)
 8007444:	2200      	movs	r2, #0
 8007446:	4620      	mov	r0, r4
 8007448:	4629      	mov	r1, r5
 800744a:	f7f9 fb4f 	bl	8000aec <__aeabi_dcmplt>
 800744e:	2800      	cmp	r0, #0
 8007450:	f000 80ae 	beq.w	80075b0 <_dtoa_r+0x518>
 8007454:	9b07      	ldr	r3, [sp, #28]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 80aa 	beq.w	80075b0 <_dtoa_r+0x518>
 800745c:	9b00      	ldr	r3, [sp, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	dd37      	ble.n	80074d2 <_dtoa_r+0x43a>
 8007462:	1e7b      	subs	r3, r7, #1
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	4620      	mov	r0, r4
 8007468:	4b7d      	ldr	r3, [pc, #500]	@ (8007660 <_dtoa_r+0x5c8>)
 800746a:	2200      	movs	r2, #0
 800746c:	4629      	mov	r1, r5
 800746e:	f7f9 f8cb 	bl	8000608 <__aeabi_dmul>
 8007472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007476:	9c00      	ldr	r4, [sp, #0]
 8007478:	3601      	adds	r6, #1
 800747a:	4630      	mov	r0, r6
 800747c:	f7f9 f85a 	bl	8000534 <__aeabi_i2d>
 8007480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007484:	f7f9 f8c0 	bl	8000608 <__aeabi_dmul>
 8007488:	4b76      	ldr	r3, [pc, #472]	@ (8007664 <_dtoa_r+0x5cc>)
 800748a:	2200      	movs	r2, #0
 800748c:	f7f8 ff06 	bl	800029c <__adddf3>
 8007490:	4605      	mov	r5, r0
 8007492:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007496:	2c00      	cmp	r4, #0
 8007498:	f040 808d 	bne.w	80075b6 <_dtoa_r+0x51e>
 800749c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074a0:	4b71      	ldr	r3, [pc, #452]	@ (8007668 <_dtoa_r+0x5d0>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	f7f8 fef8 	bl	8000298 <__aeabi_dsub>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074b0:	462a      	mov	r2, r5
 80074b2:	4633      	mov	r3, r6
 80074b4:	f7f9 fb38 	bl	8000b28 <__aeabi_dcmpgt>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	f040 828b 	bne.w	80079d4 <_dtoa_r+0x93c>
 80074be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074c2:	462a      	mov	r2, r5
 80074c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80074c8:	f7f9 fb10 	bl	8000aec <__aeabi_dcmplt>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f040 8128 	bne.w	8007722 <_dtoa_r+0x68a>
 80074d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80074d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80074da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f2c0 815a 	blt.w	8007796 <_dtoa_r+0x6fe>
 80074e2:	2f0e      	cmp	r7, #14
 80074e4:	f300 8157 	bgt.w	8007796 <_dtoa_r+0x6fe>
 80074e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007654 <_dtoa_r+0x5bc>)
 80074ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074ee:	ed93 7b00 	vldr	d7, [r3]
 80074f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	ed8d 7b00 	vstr	d7, [sp]
 80074fa:	da03      	bge.n	8007504 <_dtoa_r+0x46c>
 80074fc:	9b07      	ldr	r3, [sp, #28]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f340 8101 	ble.w	8007706 <_dtoa_r+0x66e>
 8007504:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007508:	4656      	mov	r6, sl
 800750a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800750e:	4620      	mov	r0, r4
 8007510:	4629      	mov	r1, r5
 8007512:	f7f9 f9a3 	bl	800085c <__aeabi_ddiv>
 8007516:	f7f9 fb27 	bl	8000b68 <__aeabi_d2iz>
 800751a:	4680      	mov	r8, r0
 800751c:	f7f9 f80a 	bl	8000534 <__aeabi_i2d>
 8007520:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007524:	f7f9 f870 	bl	8000608 <__aeabi_dmul>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4620      	mov	r0, r4
 800752e:	4629      	mov	r1, r5
 8007530:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007534:	f7f8 feb0 	bl	8000298 <__aeabi_dsub>
 8007538:	f806 4b01 	strb.w	r4, [r6], #1
 800753c:	9d07      	ldr	r5, [sp, #28]
 800753e:	eba6 040a 	sub.w	r4, r6, sl
 8007542:	42a5      	cmp	r5, r4
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	f040 8117 	bne.w	800777a <_dtoa_r+0x6e2>
 800754c:	f7f8 fea6 	bl	800029c <__adddf3>
 8007550:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007554:	4604      	mov	r4, r0
 8007556:	460d      	mov	r5, r1
 8007558:	f7f9 fae6 	bl	8000b28 <__aeabi_dcmpgt>
 800755c:	2800      	cmp	r0, #0
 800755e:	f040 80f9 	bne.w	8007754 <_dtoa_r+0x6bc>
 8007562:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	f7f9 fab5 	bl	8000ad8 <__aeabi_dcmpeq>
 800756e:	b118      	cbz	r0, 8007578 <_dtoa_r+0x4e0>
 8007570:	f018 0f01 	tst.w	r8, #1
 8007574:	f040 80ee 	bne.w	8007754 <_dtoa_r+0x6bc>
 8007578:	4649      	mov	r1, r9
 800757a:	4658      	mov	r0, fp
 800757c:	f000 fc90 	bl	8007ea0 <_Bfree>
 8007580:	2300      	movs	r3, #0
 8007582:	7033      	strb	r3, [r6, #0]
 8007584:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007586:	3701      	adds	r7, #1
 8007588:	601f      	str	r7, [r3, #0]
 800758a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 831d 	beq.w	8007bcc <_dtoa_r+0xb34>
 8007592:	601e      	str	r6, [r3, #0]
 8007594:	e31a      	b.n	8007bcc <_dtoa_r+0xb34>
 8007596:	07e2      	lsls	r2, r4, #31
 8007598:	d505      	bpl.n	80075a6 <_dtoa_r+0x50e>
 800759a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800759e:	f7f9 f833 	bl	8000608 <__aeabi_dmul>
 80075a2:	3601      	adds	r6, #1
 80075a4:	2301      	movs	r3, #1
 80075a6:	1064      	asrs	r4, r4, #1
 80075a8:	3508      	adds	r5, #8
 80075aa:	e73f      	b.n	800742c <_dtoa_r+0x394>
 80075ac:	2602      	movs	r6, #2
 80075ae:	e742      	b.n	8007436 <_dtoa_r+0x39e>
 80075b0:	9c07      	ldr	r4, [sp, #28]
 80075b2:	9704      	str	r7, [sp, #16]
 80075b4:	e761      	b.n	800747a <_dtoa_r+0x3e2>
 80075b6:	4b27      	ldr	r3, [pc, #156]	@ (8007654 <_dtoa_r+0x5bc>)
 80075b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075c2:	4454      	add	r4, sl
 80075c4:	2900      	cmp	r1, #0
 80075c6:	d053      	beq.n	8007670 <_dtoa_r+0x5d8>
 80075c8:	4928      	ldr	r1, [pc, #160]	@ (800766c <_dtoa_r+0x5d4>)
 80075ca:	2000      	movs	r0, #0
 80075cc:	f7f9 f946 	bl	800085c <__aeabi_ddiv>
 80075d0:	4633      	mov	r3, r6
 80075d2:	462a      	mov	r2, r5
 80075d4:	f7f8 fe60 	bl	8000298 <__aeabi_dsub>
 80075d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075dc:	4656      	mov	r6, sl
 80075de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e2:	f7f9 fac1 	bl	8000b68 <__aeabi_d2iz>
 80075e6:	4605      	mov	r5, r0
 80075e8:	f7f8 ffa4 	bl	8000534 <__aeabi_i2d>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075f4:	f7f8 fe50 	bl	8000298 <__aeabi_dsub>
 80075f8:	3530      	adds	r5, #48	@ 0x30
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007602:	f806 5b01 	strb.w	r5, [r6], #1
 8007606:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800760a:	f7f9 fa6f 	bl	8000aec <__aeabi_dcmplt>
 800760e:	2800      	cmp	r0, #0
 8007610:	d171      	bne.n	80076f6 <_dtoa_r+0x65e>
 8007612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007616:	4911      	ldr	r1, [pc, #68]	@ (800765c <_dtoa_r+0x5c4>)
 8007618:	2000      	movs	r0, #0
 800761a:	f7f8 fe3d 	bl	8000298 <__aeabi_dsub>
 800761e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007622:	f7f9 fa63 	bl	8000aec <__aeabi_dcmplt>
 8007626:	2800      	cmp	r0, #0
 8007628:	f040 8095 	bne.w	8007756 <_dtoa_r+0x6be>
 800762c:	42a6      	cmp	r6, r4
 800762e:	f43f af50 	beq.w	80074d2 <_dtoa_r+0x43a>
 8007632:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007636:	4b0a      	ldr	r3, [pc, #40]	@ (8007660 <_dtoa_r+0x5c8>)
 8007638:	2200      	movs	r2, #0
 800763a:	f7f8 ffe5 	bl	8000608 <__aeabi_dmul>
 800763e:	4b08      	ldr	r3, [pc, #32]	@ (8007660 <_dtoa_r+0x5c8>)
 8007640:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007644:	2200      	movs	r2, #0
 8007646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800764a:	f7f8 ffdd 	bl	8000608 <__aeabi_dmul>
 800764e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007652:	e7c4      	b.n	80075de <_dtoa_r+0x546>
 8007654:	08009280 	.word	0x08009280
 8007658:	08009258 	.word	0x08009258
 800765c:	3ff00000 	.word	0x3ff00000
 8007660:	40240000 	.word	0x40240000
 8007664:	401c0000 	.word	0x401c0000
 8007668:	40140000 	.word	0x40140000
 800766c:	3fe00000 	.word	0x3fe00000
 8007670:	4631      	mov	r1, r6
 8007672:	4628      	mov	r0, r5
 8007674:	f7f8 ffc8 	bl	8000608 <__aeabi_dmul>
 8007678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800767c:	9415      	str	r4, [sp, #84]	@ 0x54
 800767e:	4656      	mov	r6, sl
 8007680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007684:	f7f9 fa70 	bl	8000b68 <__aeabi_d2iz>
 8007688:	4605      	mov	r5, r0
 800768a:	f7f8 ff53 	bl	8000534 <__aeabi_i2d>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007696:	f7f8 fdff 	bl	8000298 <__aeabi_dsub>
 800769a:	3530      	adds	r5, #48	@ 0x30
 800769c:	f806 5b01 	strb.w	r5, [r6], #1
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	42a6      	cmp	r6, r4
 80076a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076aa:	f04f 0200 	mov.w	r2, #0
 80076ae:	d124      	bne.n	80076fa <_dtoa_r+0x662>
 80076b0:	4bac      	ldr	r3, [pc, #688]	@ (8007964 <_dtoa_r+0x8cc>)
 80076b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076b6:	f7f8 fdf1 	bl	800029c <__adddf3>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076c2:	f7f9 fa31 	bl	8000b28 <__aeabi_dcmpgt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d145      	bne.n	8007756 <_dtoa_r+0x6be>
 80076ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076ce:	49a5      	ldr	r1, [pc, #660]	@ (8007964 <_dtoa_r+0x8cc>)
 80076d0:	2000      	movs	r0, #0
 80076d2:	f7f8 fde1 	bl	8000298 <__aeabi_dsub>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076de:	f7f9 fa05 	bl	8000aec <__aeabi_dcmplt>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	f43f aef5 	beq.w	80074d2 <_dtoa_r+0x43a>
 80076e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80076ea:	1e73      	subs	r3, r6, #1
 80076ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80076ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076f2:	2b30      	cmp	r3, #48	@ 0x30
 80076f4:	d0f8      	beq.n	80076e8 <_dtoa_r+0x650>
 80076f6:	9f04      	ldr	r7, [sp, #16]
 80076f8:	e73e      	b.n	8007578 <_dtoa_r+0x4e0>
 80076fa:	4b9b      	ldr	r3, [pc, #620]	@ (8007968 <_dtoa_r+0x8d0>)
 80076fc:	f7f8 ff84 	bl	8000608 <__aeabi_dmul>
 8007700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007704:	e7bc      	b.n	8007680 <_dtoa_r+0x5e8>
 8007706:	d10c      	bne.n	8007722 <_dtoa_r+0x68a>
 8007708:	4b98      	ldr	r3, [pc, #608]	@ (800796c <_dtoa_r+0x8d4>)
 800770a:	2200      	movs	r2, #0
 800770c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007710:	f7f8 ff7a 	bl	8000608 <__aeabi_dmul>
 8007714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007718:	f7f9 f9fc 	bl	8000b14 <__aeabi_dcmpge>
 800771c:	2800      	cmp	r0, #0
 800771e:	f000 8157 	beq.w	80079d0 <_dtoa_r+0x938>
 8007722:	2400      	movs	r4, #0
 8007724:	4625      	mov	r5, r4
 8007726:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007728:	43db      	mvns	r3, r3
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	4656      	mov	r6, sl
 800772e:	2700      	movs	r7, #0
 8007730:	4621      	mov	r1, r4
 8007732:	4658      	mov	r0, fp
 8007734:	f000 fbb4 	bl	8007ea0 <_Bfree>
 8007738:	2d00      	cmp	r5, #0
 800773a:	d0dc      	beq.n	80076f6 <_dtoa_r+0x65e>
 800773c:	b12f      	cbz	r7, 800774a <_dtoa_r+0x6b2>
 800773e:	42af      	cmp	r7, r5
 8007740:	d003      	beq.n	800774a <_dtoa_r+0x6b2>
 8007742:	4639      	mov	r1, r7
 8007744:	4658      	mov	r0, fp
 8007746:	f000 fbab 	bl	8007ea0 <_Bfree>
 800774a:	4629      	mov	r1, r5
 800774c:	4658      	mov	r0, fp
 800774e:	f000 fba7 	bl	8007ea0 <_Bfree>
 8007752:	e7d0      	b.n	80076f6 <_dtoa_r+0x65e>
 8007754:	9704      	str	r7, [sp, #16]
 8007756:	4633      	mov	r3, r6
 8007758:	461e      	mov	r6, r3
 800775a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800775e:	2a39      	cmp	r2, #57	@ 0x39
 8007760:	d107      	bne.n	8007772 <_dtoa_r+0x6da>
 8007762:	459a      	cmp	sl, r3
 8007764:	d1f8      	bne.n	8007758 <_dtoa_r+0x6c0>
 8007766:	9a04      	ldr	r2, [sp, #16]
 8007768:	3201      	adds	r2, #1
 800776a:	9204      	str	r2, [sp, #16]
 800776c:	2230      	movs	r2, #48	@ 0x30
 800776e:	f88a 2000 	strb.w	r2, [sl]
 8007772:	781a      	ldrb	r2, [r3, #0]
 8007774:	3201      	adds	r2, #1
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	e7bd      	b.n	80076f6 <_dtoa_r+0x65e>
 800777a:	4b7b      	ldr	r3, [pc, #492]	@ (8007968 <_dtoa_r+0x8d0>)
 800777c:	2200      	movs	r2, #0
 800777e:	f7f8 ff43 	bl	8000608 <__aeabi_dmul>
 8007782:	2200      	movs	r2, #0
 8007784:	2300      	movs	r3, #0
 8007786:	4604      	mov	r4, r0
 8007788:	460d      	mov	r5, r1
 800778a:	f7f9 f9a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800778e:	2800      	cmp	r0, #0
 8007790:	f43f aebb 	beq.w	800750a <_dtoa_r+0x472>
 8007794:	e6f0      	b.n	8007578 <_dtoa_r+0x4e0>
 8007796:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007798:	2a00      	cmp	r2, #0
 800779a:	f000 80db 	beq.w	8007954 <_dtoa_r+0x8bc>
 800779e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077a0:	2a01      	cmp	r2, #1
 80077a2:	f300 80bf 	bgt.w	8007924 <_dtoa_r+0x88c>
 80077a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80077a8:	2a00      	cmp	r2, #0
 80077aa:	f000 80b7 	beq.w	800791c <_dtoa_r+0x884>
 80077ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80077b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80077b4:	4646      	mov	r6, r8
 80077b6:	9a08      	ldr	r2, [sp, #32]
 80077b8:	2101      	movs	r1, #1
 80077ba:	441a      	add	r2, r3
 80077bc:	4658      	mov	r0, fp
 80077be:	4498      	add	r8, r3
 80077c0:	9208      	str	r2, [sp, #32]
 80077c2:	f000 fc21 	bl	8008008 <__i2b>
 80077c6:	4605      	mov	r5, r0
 80077c8:	b15e      	cbz	r6, 80077e2 <_dtoa_r+0x74a>
 80077ca:	9b08      	ldr	r3, [sp, #32]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dd08      	ble.n	80077e2 <_dtoa_r+0x74a>
 80077d0:	42b3      	cmp	r3, r6
 80077d2:	9a08      	ldr	r2, [sp, #32]
 80077d4:	bfa8      	it	ge
 80077d6:	4633      	movge	r3, r6
 80077d8:	eba8 0803 	sub.w	r8, r8, r3
 80077dc:	1af6      	subs	r6, r6, r3
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	9308      	str	r3, [sp, #32]
 80077e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077e4:	b1f3      	cbz	r3, 8007824 <_dtoa_r+0x78c>
 80077e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 80b7 	beq.w	800795c <_dtoa_r+0x8c4>
 80077ee:	b18c      	cbz	r4, 8007814 <_dtoa_r+0x77c>
 80077f0:	4629      	mov	r1, r5
 80077f2:	4622      	mov	r2, r4
 80077f4:	4658      	mov	r0, fp
 80077f6:	f000 fcc7 	bl	8008188 <__pow5mult>
 80077fa:	464a      	mov	r2, r9
 80077fc:	4601      	mov	r1, r0
 80077fe:	4605      	mov	r5, r0
 8007800:	4658      	mov	r0, fp
 8007802:	f000 fc17 	bl	8008034 <__multiply>
 8007806:	4649      	mov	r1, r9
 8007808:	9004      	str	r0, [sp, #16]
 800780a:	4658      	mov	r0, fp
 800780c:	f000 fb48 	bl	8007ea0 <_Bfree>
 8007810:	9b04      	ldr	r3, [sp, #16]
 8007812:	4699      	mov	r9, r3
 8007814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007816:	1b1a      	subs	r2, r3, r4
 8007818:	d004      	beq.n	8007824 <_dtoa_r+0x78c>
 800781a:	4649      	mov	r1, r9
 800781c:	4658      	mov	r0, fp
 800781e:	f000 fcb3 	bl	8008188 <__pow5mult>
 8007822:	4681      	mov	r9, r0
 8007824:	2101      	movs	r1, #1
 8007826:	4658      	mov	r0, fp
 8007828:	f000 fbee 	bl	8008008 <__i2b>
 800782c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800782e:	4604      	mov	r4, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 81cf 	beq.w	8007bd4 <_dtoa_r+0xb3c>
 8007836:	461a      	mov	r2, r3
 8007838:	4601      	mov	r1, r0
 800783a:	4658      	mov	r0, fp
 800783c:	f000 fca4 	bl	8008188 <__pow5mult>
 8007840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007842:	2b01      	cmp	r3, #1
 8007844:	4604      	mov	r4, r0
 8007846:	f300 8095 	bgt.w	8007974 <_dtoa_r+0x8dc>
 800784a:	9b02      	ldr	r3, [sp, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f040 8087 	bne.w	8007960 <_dtoa_r+0x8c8>
 8007852:	9b03      	ldr	r3, [sp, #12]
 8007854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007858:	2b00      	cmp	r3, #0
 800785a:	f040 8089 	bne.w	8007970 <_dtoa_r+0x8d8>
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007864:	0d1b      	lsrs	r3, r3, #20
 8007866:	051b      	lsls	r3, r3, #20
 8007868:	b12b      	cbz	r3, 8007876 <_dtoa_r+0x7de>
 800786a:	9b08      	ldr	r3, [sp, #32]
 800786c:	3301      	adds	r3, #1
 800786e:	9308      	str	r3, [sp, #32]
 8007870:	f108 0801 	add.w	r8, r8, #1
 8007874:	2301      	movs	r3, #1
 8007876:	930a      	str	r3, [sp, #40]	@ 0x28
 8007878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 81b0 	beq.w	8007be0 <_dtoa_r+0xb48>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007886:	6918      	ldr	r0, [r3, #16]
 8007888:	f000 fb72 	bl	8007f70 <__hi0bits>
 800788c:	f1c0 0020 	rsb	r0, r0, #32
 8007890:	9b08      	ldr	r3, [sp, #32]
 8007892:	4418      	add	r0, r3
 8007894:	f010 001f 	ands.w	r0, r0, #31
 8007898:	d077      	beq.n	800798a <_dtoa_r+0x8f2>
 800789a:	f1c0 0320 	rsb	r3, r0, #32
 800789e:	2b04      	cmp	r3, #4
 80078a0:	dd6b      	ble.n	800797a <_dtoa_r+0x8e2>
 80078a2:	9b08      	ldr	r3, [sp, #32]
 80078a4:	f1c0 001c 	rsb	r0, r0, #28
 80078a8:	4403      	add	r3, r0
 80078aa:	4480      	add	r8, r0
 80078ac:	4406      	add	r6, r0
 80078ae:	9308      	str	r3, [sp, #32]
 80078b0:	f1b8 0f00 	cmp.w	r8, #0
 80078b4:	dd05      	ble.n	80078c2 <_dtoa_r+0x82a>
 80078b6:	4649      	mov	r1, r9
 80078b8:	4642      	mov	r2, r8
 80078ba:	4658      	mov	r0, fp
 80078bc:	f000 fcbe 	bl	800823c <__lshift>
 80078c0:	4681      	mov	r9, r0
 80078c2:	9b08      	ldr	r3, [sp, #32]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	dd05      	ble.n	80078d4 <_dtoa_r+0x83c>
 80078c8:	4621      	mov	r1, r4
 80078ca:	461a      	mov	r2, r3
 80078cc:	4658      	mov	r0, fp
 80078ce:	f000 fcb5 	bl	800823c <__lshift>
 80078d2:	4604      	mov	r4, r0
 80078d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d059      	beq.n	800798e <_dtoa_r+0x8f6>
 80078da:	4621      	mov	r1, r4
 80078dc:	4648      	mov	r0, r9
 80078de:	f000 fd19 	bl	8008314 <__mcmp>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	da53      	bge.n	800798e <_dtoa_r+0x8f6>
 80078e6:	1e7b      	subs	r3, r7, #1
 80078e8:	9304      	str	r3, [sp, #16]
 80078ea:	4649      	mov	r1, r9
 80078ec:	2300      	movs	r3, #0
 80078ee:	220a      	movs	r2, #10
 80078f0:	4658      	mov	r0, fp
 80078f2:	f000 faf7 	bl	8007ee4 <__multadd>
 80078f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078f8:	4681      	mov	r9, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 8172 	beq.w	8007be4 <_dtoa_r+0xb4c>
 8007900:	2300      	movs	r3, #0
 8007902:	4629      	mov	r1, r5
 8007904:	220a      	movs	r2, #10
 8007906:	4658      	mov	r0, fp
 8007908:	f000 faec 	bl	8007ee4 <__multadd>
 800790c:	9b00      	ldr	r3, [sp, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	4605      	mov	r5, r0
 8007912:	dc67      	bgt.n	80079e4 <_dtoa_r+0x94c>
 8007914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007916:	2b02      	cmp	r3, #2
 8007918:	dc41      	bgt.n	800799e <_dtoa_r+0x906>
 800791a:	e063      	b.n	80079e4 <_dtoa_r+0x94c>
 800791c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800791e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007922:	e746      	b.n	80077b2 <_dtoa_r+0x71a>
 8007924:	9b07      	ldr	r3, [sp, #28]
 8007926:	1e5c      	subs	r4, r3, #1
 8007928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800792a:	42a3      	cmp	r3, r4
 800792c:	bfbf      	itttt	lt
 800792e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007930:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007932:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007934:	1ae3      	sublt	r3, r4, r3
 8007936:	bfb4      	ite	lt
 8007938:	18d2      	addlt	r2, r2, r3
 800793a:	1b1c      	subge	r4, r3, r4
 800793c:	9b07      	ldr	r3, [sp, #28]
 800793e:	bfbc      	itt	lt
 8007940:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007942:	2400      	movlt	r4, #0
 8007944:	2b00      	cmp	r3, #0
 8007946:	bfb5      	itete	lt
 8007948:	eba8 0603 	sublt.w	r6, r8, r3
 800794c:	9b07      	ldrge	r3, [sp, #28]
 800794e:	2300      	movlt	r3, #0
 8007950:	4646      	movge	r6, r8
 8007952:	e730      	b.n	80077b6 <_dtoa_r+0x71e>
 8007954:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007956:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007958:	4646      	mov	r6, r8
 800795a:	e735      	b.n	80077c8 <_dtoa_r+0x730>
 800795c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800795e:	e75c      	b.n	800781a <_dtoa_r+0x782>
 8007960:	2300      	movs	r3, #0
 8007962:	e788      	b.n	8007876 <_dtoa_r+0x7de>
 8007964:	3fe00000 	.word	0x3fe00000
 8007968:	40240000 	.word	0x40240000
 800796c:	40140000 	.word	0x40140000
 8007970:	9b02      	ldr	r3, [sp, #8]
 8007972:	e780      	b.n	8007876 <_dtoa_r+0x7de>
 8007974:	2300      	movs	r3, #0
 8007976:	930a      	str	r3, [sp, #40]	@ 0x28
 8007978:	e782      	b.n	8007880 <_dtoa_r+0x7e8>
 800797a:	d099      	beq.n	80078b0 <_dtoa_r+0x818>
 800797c:	9a08      	ldr	r2, [sp, #32]
 800797e:	331c      	adds	r3, #28
 8007980:	441a      	add	r2, r3
 8007982:	4498      	add	r8, r3
 8007984:	441e      	add	r6, r3
 8007986:	9208      	str	r2, [sp, #32]
 8007988:	e792      	b.n	80078b0 <_dtoa_r+0x818>
 800798a:	4603      	mov	r3, r0
 800798c:	e7f6      	b.n	800797c <_dtoa_r+0x8e4>
 800798e:	9b07      	ldr	r3, [sp, #28]
 8007990:	9704      	str	r7, [sp, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	dc20      	bgt.n	80079d8 <_dtoa_r+0x940>
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800799a:	2b02      	cmp	r3, #2
 800799c:	dd1e      	ble.n	80079dc <_dtoa_r+0x944>
 800799e:	9b00      	ldr	r3, [sp, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f47f aec0 	bne.w	8007726 <_dtoa_r+0x68e>
 80079a6:	4621      	mov	r1, r4
 80079a8:	2205      	movs	r2, #5
 80079aa:	4658      	mov	r0, fp
 80079ac:	f000 fa9a 	bl	8007ee4 <__multadd>
 80079b0:	4601      	mov	r1, r0
 80079b2:	4604      	mov	r4, r0
 80079b4:	4648      	mov	r0, r9
 80079b6:	f000 fcad 	bl	8008314 <__mcmp>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	f77f aeb3 	ble.w	8007726 <_dtoa_r+0x68e>
 80079c0:	4656      	mov	r6, sl
 80079c2:	2331      	movs	r3, #49	@ 0x31
 80079c4:	f806 3b01 	strb.w	r3, [r6], #1
 80079c8:	9b04      	ldr	r3, [sp, #16]
 80079ca:	3301      	adds	r3, #1
 80079cc:	9304      	str	r3, [sp, #16]
 80079ce:	e6ae      	b.n	800772e <_dtoa_r+0x696>
 80079d0:	9c07      	ldr	r4, [sp, #28]
 80079d2:	9704      	str	r7, [sp, #16]
 80079d4:	4625      	mov	r5, r4
 80079d6:	e7f3      	b.n	80079c0 <_dtoa_r+0x928>
 80079d8:	9b07      	ldr	r3, [sp, #28]
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 8104 	beq.w	8007bec <_dtoa_r+0xb54>
 80079e4:	2e00      	cmp	r6, #0
 80079e6:	dd05      	ble.n	80079f4 <_dtoa_r+0x95c>
 80079e8:	4629      	mov	r1, r5
 80079ea:	4632      	mov	r2, r6
 80079ec:	4658      	mov	r0, fp
 80079ee:	f000 fc25 	bl	800823c <__lshift>
 80079f2:	4605      	mov	r5, r0
 80079f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d05a      	beq.n	8007ab0 <_dtoa_r+0xa18>
 80079fa:	6869      	ldr	r1, [r5, #4]
 80079fc:	4658      	mov	r0, fp
 80079fe:	f000 fa0f 	bl	8007e20 <_Balloc>
 8007a02:	4606      	mov	r6, r0
 8007a04:	b928      	cbnz	r0, 8007a12 <_dtoa_r+0x97a>
 8007a06:	4b84      	ldr	r3, [pc, #528]	@ (8007c18 <_dtoa_r+0xb80>)
 8007a08:	4602      	mov	r2, r0
 8007a0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a0e:	f7ff bb5a 	b.w	80070c6 <_dtoa_r+0x2e>
 8007a12:	692a      	ldr	r2, [r5, #16]
 8007a14:	3202      	adds	r2, #2
 8007a16:	0092      	lsls	r2, r2, #2
 8007a18:	f105 010c 	add.w	r1, r5, #12
 8007a1c:	300c      	adds	r0, #12
 8007a1e:	f000 ffaf 	bl	8008980 <memcpy>
 8007a22:	2201      	movs	r2, #1
 8007a24:	4631      	mov	r1, r6
 8007a26:	4658      	mov	r0, fp
 8007a28:	f000 fc08 	bl	800823c <__lshift>
 8007a2c:	f10a 0301 	add.w	r3, sl, #1
 8007a30:	9307      	str	r3, [sp, #28]
 8007a32:	9b00      	ldr	r3, [sp, #0]
 8007a34:	4453      	add	r3, sl
 8007a36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a38:	9b02      	ldr	r3, [sp, #8]
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	462f      	mov	r7, r5
 8007a40:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a42:	4605      	mov	r5, r0
 8007a44:	9b07      	ldr	r3, [sp, #28]
 8007a46:	4621      	mov	r1, r4
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	4648      	mov	r0, r9
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	f7ff fa98 	bl	8006f82 <quorem>
 8007a52:	4639      	mov	r1, r7
 8007a54:	9002      	str	r0, [sp, #8]
 8007a56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a5a:	4648      	mov	r0, r9
 8007a5c:	f000 fc5a 	bl	8008314 <__mcmp>
 8007a60:	462a      	mov	r2, r5
 8007a62:	9008      	str	r0, [sp, #32]
 8007a64:	4621      	mov	r1, r4
 8007a66:	4658      	mov	r0, fp
 8007a68:	f000 fc70 	bl	800834c <__mdiff>
 8007a6c:	68c2      	ldr	r2, [r0, #12]
 8007a6e:	4606      	mov	r6, r0
 8007a70:	bb02      	cbnz	r2, 8007ab4 <_dtoa_r+0xa1c>
 8007a72:	4601      	mov	r1, r0
 8007a74:	4648      	mov	r0, r9
 8007a76:	f000 fc4d 	bl	8008314 <__mcmp>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4658      	mov	r0, fp
 8007a80:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a82:	f000 fa0d 	bl	8007ea0 <_Bfree>
 8007a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a8a:	9e07      	ldr	r6, [sp, #28]
 8007a8c:	ea43 0102 	orr.w	r1, r3, r2
 8007a90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a92:	4319      	orrs	r1, r3
 8007a94:	d110      	bne.n	8007ab8 <_dtoa_r+0xa20>
 8007a96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a9a:	d029      	beq.n	8007af0 <_dtoa_r+0xa58>
 8007a9c:	9b08      	ldr	r3, [sp, #32]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	dd02      	ble.n	8007aa8 <_dtoa_r+0xa10>
 8007aa2:	9b02      	ldr	r3, [sp, #8]
 8007aa4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007aa8:	9b00      	ldr	r3, [sp, #0]
 8007aaa:	f883 8000 	strb.w	r8, [r3]
 8007aae:	e63f      	b.n	8007730 <_dtoa_r+0x698>
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	e7bb      	b.n	8007a2c <_dtoa_r+0x994>
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	e7e1      	b.n	8007a7c <_dtoa_r+0x9e4>
 8007ab8:	9b08      	ldr	r3, [sp, #32]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	db04      	blt.n	8007ac8 <_dtoa_r+0xa30>
 8007abe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	d120      	bne.n	8007b0a <_dtoa_r+0xa72>
 8007ac8:	2a00      	cmp	r2, #0
 8007aca:	dded      	ble.n	8007aa8 <_dtoa_r+0xa10>
 8007acc:	4649      	mov	r1, r9
 8007ace:	2201      	movs	r2, #1
 8007ad0:	4658      	mov	r0, fp
 8007ad2:	f000 fbb3 	bl	800823c <__lshift>
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	4681      	mov	r9, r0
 8007ada:	f000 fc1b 	bl	8008314 <__mcmp>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	dc03      	bgt.n	8007aea <_dtoa_r+0xa52>
 8007ae2:	d1e1      	bne.n	8007aa8 <_dtoa_r+0xa10>
 8007ae4:	f018 0f01 	tst.w	r8, #1
 8007ae8:	d0de      	beq.n	8007aa8 <_dtoa_r+0xa10>
 8007aea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007aee:	d1d8      	bne.n	8007aa2 <_dtoa_r+0xa0a>
 8007af0:	9a00      	ldr	r2, [sp, #0]
 8007af2:	2339      	movs	r3, #57	@ 0x39
 8007af4:	7013      	strb	r3, [r2, #0]
 8007af6:	4633      	mov	r3, r6
 8007af8:	461e      	mov	r6, r3
 8007afa:	3b01      	subs	r3, #1
 8007afc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b00:	2a39      	cmp	r2, #57	@ 0x39
 8007b02:	d052      	beq.n	8007baa <_dtoa_r+0xb12>
 8007b04:	3201      	adds	r2, #1
 8007b06:	701a      	strb	r2, [r3, #0]
 8007b08:	e612      	b.n	8007730 <_dtoa_r+0x698>
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	dd07      	ble.n	8007b1e <_dtoa_r+0xa86>
 8007b0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b12:	d0ed      	beq.n	8007af0 <_dtoa_r+0xa58>
 8007b14:	9a00      	ldr	r2, [sp, #0]
 8007b16:	f108 0301 	add.w	r3, r8, #1
 8007b1a:	7013      	strb	r3, [r2, #0]
 8007b1c:	e608      	b.n	8007730 <_dtoa_r+0x698>
 8007b1e:	9b07      	ldr	r3, [sp, #28]
 8007b20:	9a07      	ldr	r2, [sp, #28]
 8007b22:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007b26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d028      	beq.n	8007b7e <_dtoa_r+0xae6>
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	2300      	movs	r3, #0
 8007b30:	220a      	movs	r2, #10
 8007b32:	4658      	mov	r0, fp
 8007b34:	f000 f9d6 	bl	8007ee4 <__multadd>
 8007b38:	42af      	cmp	r7, r5
 8007b3a:	4681      	mov	r9, r0
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	f04f 020a 	mov.w	r2, #10
 8007b44:	4639      	mov	r1, r7
 8007b46:	4658      	mov	r0, fp
 8007b48:	d107      	bne.n	8007b5a <_dtoa_r+0xac2>
 8007b4a:	f000 f9cb 	bl	8007ee4 <__multadd>
 8007b4e:	4607      	mov	r7, r0
 8007b50:	4605      	mov	r5, r0
 8007b52:	9b07      	ldr	r3, [sp, #28]
 8007b54:	3301      	adds	r3, #1
 8007b56:	9307      	str	r3, [sp, #28]
 8007b58:	e774      	b.n	8007a44 <_dtoa_r+0x9ac>
 8007b5a:	f000 f9c3 	bl	8007ee4 <__multadd>
 8007b5e:	4629      	mov	r1, r5
 8007b60:	4607      	mov	r7, r0
 8007b62:	2300      	movs	r3, #0
 8007b64:	220a      	movs	r2, #10
 8007b66:	4658      	mov	r0, fp
 8007b68:	f000 f9bc 	bl	8007ee4 <__multadd>
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	e7f0      	b.n	8007b52 <_dtoa_r+0xaba>
 8007b70:	9b00      	ldr	r3, [sp, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	bfcc      	ite	gt
 8007b76:	461e      	movgt	r6, r3
 8007b78:	2601      	movle	r6, #1
 8007b7a:	4456      	add	r6, sl
 8007b7c:	2700      	movs	r7, #0
 8007b7e:	4649      	mov	r1, r9
 8007b80:	2201      	movs	r2, #1
 8007b82:	4658      	mov	r0, fp
 8007b84:	f000 fb5a 	bl	800823c <__lshift>
 8007b88:	4621      	mov	r1, r4
 8007b8a:	4681      	mov	r9, r0
 8007b8c:	f000 fbc2 	bl	8008314 <__mcmp>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	dcb0      	bgt.n	8007af6 <_dtoa_r+0xa5e>
 8007b94:	d102      	bne.n	8007b9c <_dtoa_r+0xb04>
 8007b96:	f018 0f01 	tst.w	r8, #1
 8007b9a:	d1ac      	bne.n	8007af6 <_dtoa_r+0xa5e>
 8007b9c:	4633      	mov	r3, r6
 8007b9e:	461e      	mov	r6, r3
 8007ba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ba4:	2a30      	cmp	r2, #48	@ 0x30
 8007ba6:	d0fa      	beq.n	8007b9e <_dtoa_r+0xb06>
 8007ba8:	e5c2      	b.n	8007730 <_dtoa_r+0x698>
 8007baa:	459a      	cmp	sl, r3
 8007bac:	d1a4      	bne.n	8007af8 <_dtoa_r+0xa60>
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	9304      	str	r3, [sp, #16]
 8007bb4:	2331      	movs	r3, #49	@ 0x31
 8007bb6:	f88a 3000 	strb.w	r3, [sl]
 8007bba:	e5b9      	b.n	8007730 <_dtoa_r+0x698>
 8007bbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007bbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007c1c <_dtoa_r+0xb84>
 8007bc2:	b11b      	cbz	r3, 8007bcc <_dtoa_r+0xb34>
 8007bc4:	f10a 0308 	add.w	r3, sl, #8
 8007bc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	4650      	mov	r0, sl
 8007bce:	b019      	add	sp, #100	@ 0x64
 8007bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	f77f ae37 	ble.w	800784a <_dtoa_r+0x7b2>
 8007bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bde:	930a      	str	r3, [sp, #40]	@ 0x28
 8007be0:	2001      	movs	r0, #1
 8007be2:	e655      	b.n	8007890 <_dtoa_r+0x7f8>
 8007be4:	9b00      	ldr	r3, [sp, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f77f aed6 	ble.w	8007998 <_dtoa_r+0x900>
 8007bec:	4656      	mov	r6, sl
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4648      	mov	r0, r9
 8007bf2:	f7ff f9c6 	bl	8006f82 <quorem>
 8007bf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007bfa:	f806 8b01 	strb.w	r8, [r6], #1
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	eba6 020a 	sub.w	r2, r6, sl
 8007c04:	4293      	cmp	r3, r2
 8007c06:	ddb3      	ble.n	8007b70 <_dtoa_r+0xad8>
 8007c08:	4649      	mov	r1, r9
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	220a      	movs	r2, #10
 8007c0e:	4658      	mov	r0, fp
 8007c10:	f000 f968 	bl	8007ee4 <__multadd>
 8007c14:	4681      	mov	r9, r0
 8007c16:	e7ea      	b.n	8007bee <_dtoa_r+0xb56>
 8007c18:	080091dc 	.word	0x080091dc
 8007c1c:	08009160 	.word	0x08009160

08007c20 <_free_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4605      	mov	r5, r0
 8007c24:	2900      	cmp	r1, #0
 8007c26:	d041      	beq.n	8007cac <_free_r+0x8c>
 8007c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c2c:	1f0c      	subs	r4, r1, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bfb8      	it	lt
 8007c32:	18e4      	addlt	r4, r4, r3
 8007c34:	f000 f8e8 	bl	8007e08 <__malloc_lock>
 8007c38:	4a1d      	ldr	r2, [pc, #116]	@ (8007cb0 <_free_r+0x90>)
 8007c3a:	6813      	ldr	r3, [r2, #0]
 8007c3c:	b933      	cbnz	r3, 8007c4c <_free_r+0x2c>
 8007c3e:	6063      	str	r3, [r4, #4]
 8007c40:	6014      	str	r4, [r2, #0]
 8007c42:	4628      	mov	r0, r5
 8007c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c48:	f000 b8e4 	b.w	8007e14 <__malloc_unlock>
 8007c4c:	42a3      	cmp	r3, r4
 8007c4e:	d908      	bls.n	8007c62 <_free_r+0x42>
 8007c50:	6820      	ldr	r0, [r4, #0]
 8007c52:	1821      	adds	r1, r4, r0
 8007c54:	428b      	cmp	r3, r1
 8007c56:	bf01      	itttt	eq
 8007c58:	6819      	ldreq	r1, [r3, #0]
 8007c5a:	685b      	ldreq	r3, [r3, #4]
 8007c5c:	1809      	addeq	r1, r1, r0
 8007c5e:	6021      	streq	r1, [r4, #0]
 8007c60:	e7ed      	b.n	8007c3e <_free_r+0x1e>
 8007c62:	461a      	mov	r2, r3
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	b10b      	cbz	r3, 8007c6c <_free_r+0x4c>
 8007c68:	42a3      	cmp	r3, r4
 8007c6a:	d9fa      	bls.n	8007c62 <_free_r+0x42>
 8007c6c:	6811      	ldr	r1, [r2, #0]
 8007c6e:	1850      	adds	r0, r2, r1
 8007c70:	42a0      	cmp	r0, r4
 8007c72:	d10b      	bne.n	8007c8c <_free_r+0x6c>
 8007c74:	6820      	ldr	r0, [r4, #0]
 8007c76:	4401      	add	r1, r0
 8007c78:	1850      	adds	r0, r2, r1
 8007c7a:	4283      	cmp	r3, r0
 8007c7c:	6011      	str	r1, [r2, #0]
 8007c7e:	d1e0      	bne.n	8007c42 <_free_r+0x22>
 8007c80:	6818      	ldr	r0, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	6053      	str	r3, [r2, #4]
 8007c86:	4408      	add	r0, r1
 8007c88:	6010      	str	r0, [r2, #0]
 8007c8a:	e7da      	b.n	8007c42 <_free_r+0x22>
 8007c8c:	d902      	bls.n	8007c94 <_free_r+0x74>
 8007c8e:	230c      	movs	r3, #12
 8007c90:	602b      	str	r3, [r5, #0]
 8007c92:	e7d6      	b.n	8007c42 <_free_r+0x22>
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	1821      	adds	r1, r4, r0
 8007c98:	428b      	cmp	r3, r1
 8007c9a:	bf04      	itt	eq
 8007c9c:	6819      	ldreq	r1, [r3, #0]
 8007c9e:	685b      	ldreq	r3, [r3, #4]
 8007ca0:	6063      	str	r3, [r4, #4]
 8007ca2:	bf04      	itt	eq
 8007ca4:	1809      	addeq	r1, r1, r0
 8007ca6:	6021      	streq	r1, [r4, #0]
 8007ca8:	6054      	str	r4, [r2, #4]
 8007caa:	e7ca      	b.n	8007c42 <_free_r+0x22>
 8007cac:	bd38      	pop	{r3, r4, r5, pc}
 8007cae:	bf00      	nop
 8007cb0:	200004f8 	.word	0x200004f8

08007cb4 <malloc>:
 8007cb4:	4b02      	ldr	r3, [pc, #8]	@ (8007cc0 <malloc+0xc>)
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	f000 b825 	b.w	8007d08 <_malloc_r>
 8007cbe:	bf00      	nop
 8007cc0:	20000018 	.word	0x20000018

08007cc4 <sbrk_aligned>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	4e0f      	ldr	r6, [pc, #60]	@ (8007d04 <sbrk_aligned+0x40>)
 8007cc8:	460c      	mov	r4, r1
 8007cca:	6831      	ldr	r1, [r6, #0]
 8007ccc:	4605      	mov	r5, r0
 8007cce:	b911      	cbnz	r1, 8007cd6 <sbrk_aligned+0x12>
 8007cd0:	f000 fe46 	bl	8008960 <_sbrk_r>
 8007cd4:	6030      	str	r0, [r6, #0]
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 fe41 	bl	8008960 <_sbrk_r>
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	d103      	bne.n	8007cea <sbrk_aligned+0x26>
 8007ce2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	bd70      	pop	{r4, r5, r6, pc}
 8007cea:	1cc4      	adds	r4, r0, #3
 8007cec:	f024 0403 	bic.w	r4, r4, #3
 8007cf0:	42a0      	cmp	r0, r4
 8007cf2:	d0f8      	beq.n	8007ce6 <sbrk_aligned+0x22>
 8007cf4:	1a21      	subs	r1, r4, r0
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f000 fe32 	bl	8008960 <_sbrk_r>
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	d1f2      	bne.n	8007ce6 <sbrk_aligned+0x22>
 8007d00:	e7ef      	b.n	8007ce2 <sbrk_aligned+0x1e>
 8007d02:	bf00      	nop
 8007d04:	200004f4 	.word	0x200004f4

08007d08 <_malloc_r>:
 8007d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d0c:	1ccd      	adds	r5, r1, #3
 8007d0e:	f025 0503 	bic.w	r5, r5, #3
 8007d12:	3508      	adds	r5, #8
 8007d14:	2d0c      	cmp	r5, #12
 8007d16:	bf38      	it	cc
 8007d18:	250c      	movcc	r5, #12
 8007d1a:	2d00      	cmp	r5, #0
 8007d1c:	4606      	mov	r6, r0
 8007d1e:	db01      	blt.n	8007d24 <_malloc_r+0x1c>
 8007d20:	42a9      	cmp	r1, r5
 8007d22:	d904      	bls.n	8007d2e <_malloc_r+0x26>
 8007d24:	230c      	movs	r3, #12
 8007d26:	6033      	str	r3, [r6, #0]
 8007d28:	2000      	movs	r0, #0
 8007d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e04 <_malloc_r+0xfc>
 8007d32:	f000 f869 	bl	8007e08 <__malloc_lock>
 8007d36:	f8d8 3000 	ldr.w	r3, [r8]
 8007d3a:	461c      	mov	r4, r3
 8007d3c:	bb44      	cbnz	r4, 8007d90 <_malloc_r+0x88>
 8007d3e:	4629      	mov	r1, r5
 8007d40:	4630      	mov	r0, r6
 8007d42:	f7ff ffbf 	bl	8007cc4 <sbrk_aligned>
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	4604      	mov	r4, r0
 8007d4a:	d158      	bne.n	8007dfe <_malloc_r+0xf6>
 8007d4c:	f8d8 4000 	ldr.w	r4, [r8]
 8007d50:	4627      	mov	r7, r4
 8007d52:	2f00      	cmp	r7, #0
 8007d54:	d143      	bne.n	8007dde <_malloc_r+0xd6>
 8007d56:	2c00      	cmp	r4, #0
 8007d58:	d04b      	beq.n	8007df2 <_malloc_r+0xea>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	4639      	mov	r1, r7
 8007d5e:	4630      	mov	r0, r6
 8007d60:	eb04 0903 	add.w	r9, r4, r3
 8007d64:	f000 fdfc 	bl	8008960 <_sbrk_r>
 8007d68:	4581      	cmp	r9, r0
 8007d6a:	d142      	bne.n	8007df2 <_malloc_r+0xea>
 8007d6c:	6821      	ldr	r1, [r4, #0]
 8007d6e:	1a6d      	subs	r5, r5, r1
 8007d70:	4629      	mov	r1, r5
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7ff ffa6 	bl	8007cc4 <sbrk_aligned>
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d03a      	beq.n	8007df2 <_malloc_r+0xea>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	442b      	add	r3, r5
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	f8d8 3000 	ldr.w	r3, [r8]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	bb62      	cbnz	r2, 8007de4 <_malloc_r+0xdc>
 8007d8a:	f8c8 7000 	str.w	r7, [r8]
 8007d8e:	e00f      	b.n	8007db0 <_malloc_r+0xa8>
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	1b52      	subs	r2, r2, r5
 8007d94:	d420      	bmi.n	8007dd8 <_malloc_r+0xd0>
 8007d96:	2a0b      	cmp	r2, #11
 8007d98:	d917      	bls.n	8007dca <_malloc_r+0xc2>
 8007d9a:	1961      	adds	r1, r4, r5
 8007d9c:	42a3      	cmp	r3, r4
 8007d9e:	6025      	str	r5, [r4, #0]
 8007da0:	bf18      	it	ne
 8007da2:	6059      	strne	r1, [r3, #4]
 8007da4:	6863      	ldr	r3, [r4, #4]
 8007da6:	bf08      	it	eq
 8007da8:	f8c8 1000 	streq.w	r1, [r8]
 8007dac:	5162      	str	r2, [r4, r5]
 8007dae:	604b      	str	r3, [r1, #4]
 8007db0:	4630      	mov	r0, r6
 8007db2:	f000 f82f 	bl	8007e14 <__malloc_unlock>
 8007db6:	f104 000b 	add.w	r0, r4, #11
 8007dba:	1d23      	adds	r3, r4, #4
 8007dbc:	f020 0007 	bic.w	r0, r0, #7
 8007dc0:	1ac2      	subs	r2, r0, r3
 8007dc2:	bf1c      	itt	ne
 8007dc4:	1a1b      	subne	r3, r3, r0
 8007dc6:	50a3      	strne	r3, [r4, r2]
 8007dc8:	e7af      	b.n	8007d2a <_malloc_r+0x22>
 8007dca:	6862      	ldr	r2, [r4, #4]
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	bf0c      	ite	eq
 8007dd0:	f8c8 2000 	streq.w	r2, [r8]
 8007dd4:	605a      	strne	r2, [r3, #4]
 8007dd6:	e7eb      	b.n	8007db0 <_malloc_r+0xa8>
 8007dd8:	4623      	mov	r3, r4
 8007dda:	6864      	ldr	r4, [r4, #4]
 8007ddc:	e7ae      	b.n	8007d3c <_malloc_r+0x34>
 8007dde:	463c      	mov	r4, r7
 8007de0:	687f      	ldr	r7, [r7, #4]
 8007de2:	e7b6      	b.n	8007d52 <_malloc_r+0x4a>
 8007de4:	461a      	mov	r2, r3
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	d1fb      	bne.n	8007de4 <_malloc_r+0xdc>
 8007dec:	2300      	movs	r3, #0
 8007dee:	6053      	str	r3, [r2, #4]
 8007df0:	e7de      	b.n	8007db0 <_malloc_r+0xa8>
 8007df2:	230c      	movs	r3, #12
 8007df4:	6033      	str	r3, [r6, #0]
 8007df6:	4630      	mov	r0, r6
 8007df8:	f000 f80c 	bl	8007e14 <__malloc_unlock>
 8007dfc:	e794      	b.n	8007d28 <_malloc_r+0x20>
 8007dfe:	6005      	str	r5, [r0, #0]
 8007e00:	e7d6      	b.n	8007db0 <_malloc_r+0xa8>
 8007e02:	bf00      	nop
 8007e04:	200004f8 	.word	0x200004f8

08007e08 <__malloc_lock>:
 8007e08:	4801      	ldr	r0, [pc, #4]	@ (8007e10 <__malloc_lock+0x8>)
 8007e0a:	f7ff b8b8 	b.w	8006f7e <__retarget_lock_acquire_recursive>
 8007e0e:	bf00      	nop
 8007e10:	200004f0 	.word	0x200004f0

08007e14 <__malloc_unlock>:
 8007e14:	4801      	ldr	r0, [pc, #4]	@ (8007e1c <__malloc_unlock+0x8>)
 8007e16:	f7ff b8b3 	b.w	8006f80 <__retarget_lock_release_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	200004f0 	.word	0x200004f0

08007e20 <_Balloc>:
 8007e20:	b570      	push	{r4, r5, r6, lr}
 8007e22:	69c6      	ldr	r6, [r0, #28]
 8007e24:	4604      	mov	r4, r0
 8007e26:	460d      	mov	r5, r1
 8007e28:	b976      	cbnz	r6, 8007e48 <_Balloc+0x28>
 8007e2a:	2010      	movs	r0, #16
 8007e2c:	f7ff ff42 	bl	8007cb4 <malloc>
 8007e30:	4602      	mov	r2, r0
 8007e32:	61e0      	str	r0, [r4, #28]
 8007e34:	b920      	cbnz	r0, 8007e40 <_Balloc+0x20>
 8007e36:	4b18      	ldr	r3, [pc, #96]	@ (8007e98 <_Balloc+0x78>)
 8007e38:	4818      	ldr	r0, [pc, #96]	@ (8007e9c <_Balloc+0x7c>)
 8007e3a:	216b      	movs	r1, #107	@ 0x6b
 8007e3c:	f000 fdae 	bl	800899c <__assert_func>
 8007e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e44:	6006      	str	r6, [r0, #0]
 8007e46:	60c6      	str	r6, [r0, #12]
 8007e48:	69e6      	ldr	r6, [r4, #28]
 8007e4a:	68f3      	ldr	r3, [r6, #12]
 8007e4c:	b183      	cbz	r3, 8007e70 <_Balloc+0x50>
 8007e4e:	69e3      	ldr	r3, [r4, #28]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e56:	b9b8      	cbnz	r0, 8007e88 <_Balloc+0x68>
 8007e58:	2101      	movs	r1, #1
 8007e5a:	fa01 f605 	lsl.w	r6, r1, r5
 8007e5e:	1d72      	adds	r2, r6, #5
 8007e60:	0092      	lsls	r2, r2, #2
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 fdb8 	bl	80089d8 <_calloc_r>
 8007e68:	b160      	cbz	r0, 8007e84 <_Balloc+0x64>
 8007e6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e6e:	e00e      	b.n	8007e8e <_Balloc+0x6e>
 8007e70:	2221      	movs	r2, #33	@ 0x21
 8007e72:	2104      	movs	r1, #4
 8007e74:	4620      	mov	r0, r4
 8007e76:	f000 fdaf 	bl	80089d8 <_calloc_r>
 8007e7a:	69e3      	ldr	r3, [r4, #28]
 8007e7c:	60f0      	str	r0, [r6, #12]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e4      	bne.n	8007e4e <_Balloc+0x2e>
 8007e84:	2000      	movs	r0, #0
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	6802      	ldr	r2, [r0, #0]
 8007e8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e94:	e7f7      	b.n	8007e86 <_Balloc+0x66>
 8007e96:	bf00      	nop
 8007e98:	0800916d 	.word	0x0800916d
 8007e9c:	080091ed 	.word	0x080091ed

08007ea0 <_Bfree>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	69c6      	ldr	r6, [r0, #28]
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	b976      	cbnz	r6, 8007ec8 <_Bfree+0x28>
 8007eaa:	2010      	movs	r0, #16
 8007eac:	f7ff ff02 	bl	8007cb4 <malloc>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	61e8      	str	r0, [r5, #28]
 8007eb4:	b920      	cbnz	r0, 8007ec0 <_Bfree+0x20>
 8007eb6:	4b09      	ldr	r3, [pc, #36]	@ (8007edc <_Bfree+0x3c>)
 8007eb8:	4809      	ldr	r0, [pc, #36]	@ (8007ee0 <_Bfree+0x40>)
 8007eba:	218f      	movs	r1, #143	@ 0x8f
 8007ebc:	f000 fd6e 	bl	800899c <__assert_func>
 8007ec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ec4:	6006      	str	r6, [r0, #0]
 8007ec6:	60c6      	str	r6, [r0, #12]
 8007ec8:	b13c      	cbz	r4, 8007eda <_Bfree+0x3a>
 8007eca:	69eb      	ldr	r3, [r5, #28]
 8007ecc:	6862      	ldr	r2, [r4, #4]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ed4:	6021      	str	r1, [r4, #0]
 8007ed6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007eda:	bd70      	pop	{r4, r5, r6, pc}
 8007edc:	0800916d 	.word	0x0800916d
 8007ee0:	080091ed 	.word	0x080091ed

08007ee4 <__multadd>:
 8007ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee8:	690d      	ldr	r5, [r1, #16]
 8007eea:	4607      	mov	r7, r0
 8007eec:	460c      	mov	r4, r1
 8007eee:	461e      	mov	r6, r3
 8007ef0:	f101 0c14 	add.w	ip, r1, #20
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	f8dc 3000 	ldr.w	r3, [ip]
 8007efa:	b299      	uxth	r1, r3
 8007efc:	fb02 6101 	mla	r1, r2, r1, r6
 8007f00:	0c1e      	lsrs	r6, r3, #16
 8007f02:	0c0b      	lsrs	r3, r1, #16
 8007f04:	fb02 3306 	mla	r3, r2, r6, r3
 8007f08:	b289      	uxth	r1, r1
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f10:	4285      	cmp	r5, r0
 8007f12:	f84c 1b04 	str.w	r1, [ip], #4
 8007f16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f1a:	dcec      	bgt.n	8007ef6 <__multadd+0x12>
 8007f1c:	b30e      	cbz	r6, 8007f62 <__multadd+0x7e>
 8007f1e:	68a3      	ldr	r3, [r4, #8]
 8007f20:	42ab      	cmp	r3, r5
 8007f22:	dc19      	bgt.n	8007f58 <__multadd+0x74>
 8007f24:	6861      	ldr	r1, [r4, #4]
 8007f26:	4638      	mov	r0, r7
 8007f28:	3101      	adds	r1, #1
 8007f2a:	f7ff ff79 	bl	8007e20 <_Balloc>
 8007f2e:	4680      	mov	r8, r0
 8007f30:	b928      	cbnz	r0, 8007f3e <__multadd+0x5a>
 8007f32:	4602      	mov	r2, r0
 8007f34:	4b0c      	ldr	r3, [pc, #48]	@ (8007f68 <__multadd+0x84>)
 8007f36:	480d      	ldr	r0, [pc, #52]	@ (8007f6c <__multadd+0x88>)
 8007f38:	21ba      	movs	r1, #186	@ 0xba
 8007f3a:	f000 fd2f 	bl	800899c <__assert_func>
 8007f3e:	6922      	ldr	r2, [r4, #16]
 8007f40:	3202      	adds	r2, #2
 8007f42:	f104 010c 	add.w	r1, r4, #12
 8007f46:	0092      	lsls	r2, r2, #2
 8007f48:	300c      	adds	r0, #12
 8007f4a:	f000 fd19 	bl	8008980 <memcpy>
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4638      	mov	r0, r7
 8007f52:	f7ff ffa5 	bl	8007ea0 <_Bfree>
 8007f56:	4644      	mov	r4, r8
 8007f58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f5c:	3501      	adds	r5, #1
 8007f5e:	615e      	str	r6, [r3, #20]
 8007f60:	6125      	str	r5, [r4, #16]
 8007f62:	4620      	mov	r0, r4
 8007f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f68:	080091dc 	.word	0x080091dc
 8007f6c:	080091ed 	.word	0x080091ed

08007f70 <__hi0bits>:
 8007f70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f74:	4603      	mov	r3, r0
 8007f76:	bf36      	itet	cc
 8007f78:	0403      	lslcc	r3, r0, #16
 8007f7a:	2000      	movcs	r0, #0
 8007f7c:	2010      	movcc	r0, #16
 8007f7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f82:	bf3c      	itt	cc
 8007f84:	021b      	lslcc	r3, r3, #8
 8007f86:	3008      	addcc	r0, #8
 8007f88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f8c:	bf3c      	itt	cc
 8007f8e:	011b      	lslcc	r3, r3, #4
 8007f90:	3004      	addcc	r0, #4
 8007f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f96:	bf3c      	itt	cc
 8007f98:	009b      	lslcc	r3, r3, #2
 8007f9a:	3002      	addcc	r0, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	db05      	blt.n	8007fac <__hi0bits+0x3c>
 8007fa0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007fa4:	f100 0001 	add.w	r0, r0, #1
 8007fa8:	bf08      	it	eq
 8007faa:	2020      	moveq	r0, #32
 8007fac:	4770      	bx	lr

08007fae <__lo0bits>:
 8007fae:	6803      	ldr	r3, [r0, #0]
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	f013 0007 	ands.w	r0, r3, #7
 8007fb6:	d00b      	beq.n	8007fd0 <__lo0bits+0x22>
 8007fb8:	07d9      	lsls	r1, r3, #31
 8007fba:	d421      	bmi.n	8008000 <__lo0bits+0x52>
 8007fbc:	0798      	lsls	r0, r3, #30
 8007fbe:	bf49      	itett	mi
 8007fc0:	085b      	lsrmi	r3, r3, #1
 8007fc2:	089b      	lsrpl	r3, r3, #2
 8007fc4:	2001      	movmi	r0, #1
 8007fc6:	6013      	strmi	r3, [r2, #0]
 8007fc8:	bf5c      	itt	pl
 8007fca:	6013      	strpl	r3, [r2, #0]
 8007fcc:	2002      	movpl	r0, #2
 8007fce:	4770      	bx	lr
 8007fd0:	b299      	uxth	r1, r3
 8007fd2:	b909      	cbnz	r1, 8007fd8 <__lo0bits+0x2a>
 8007fd4:	0c1b      	lsrs	r3, r3, #16
 8007fd6:	2010      	movs	r0, #16
 8007fd8:	b2d9      	uxtb	r1, r3
 8007fda:	b909      	cbnz	r1, 8007fe0 <__lo0bits+0x32>
 8007fdc:	3008      	adds	r0, #8
 8007fde:	0a1b      	lsrs	r3, r3, #8
 8007fe0:	0719      	lsls	r1, r3, #28
 8007fe2:	bf04      	itt	eq
 8007fe4:	091b      	lsreq	r3, r3, #4
 8007fe6:	3004      	addeq	r0, #4
 8007fe8:	0799      	lsls	r1, r3, #30
 8007fea:	bf04      	itt	eq
 8007fec:	089b      	lsreq	r3, r3, #2
 8007fee:	3002      	addeq	r0, #2
 8007ff0:	07d9      	lsls	r1, r3, #31
 8007ff2:	d403      	bmi.n	8007ffc <__lo0bits+0x4e>
 8007ff4:	085b      	lsrs	r3, r3, #1
 8007ff6:	f100 0001 	add.w	r0, r0, #1
 8007ffa:	d003      	beq.n	8008004 <__lo0bits+0x56>
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	4770      	bx	lr
 8008000:	2000      	movs	r0, #0
 8008002:	4770      	bx	lr
 8008004:	2020      	movs	r0, #32
 8008006:	4770      	bx	lr

08008008 <__i2b>:
 8008008:	b510      	push	{r4, lr}
 800800a:	460c      	mov	r4, r1
 800800c:	2101      	movs	r1, #1
 800800e:	f7ff ff07 	bl	8007e20 <_Balloc>
 8008012:	4602      	mov	r2, r0
 8008014:	b928      	cbnz	r0, 8008022 <__i2b+0x1a>
 8008016:	4b05      	ldr	r3, [pc, #20]	@ (800802c <__i2b+0x24>)
 8008018:	4805      	ldr	r0, [pc, #20]	@ (8008030 <__i2b+0x28>)
 800801a:	f240 1145 	movw	r1, #325	@ 0x145
 800801e:	f000 fcbd 	bl	800899c <__assert_func>
 8008022:	2301      	movs	r3, #1
 8008024:	6144      	str	r4, [r0, #20]
 8008026:	6103      	str	r3, [r0, #16]
 8008028:	bd10      	pop	{r4, pc}
 800802a:	bf00      	nop
 800802c:	080091dc 	.word	0x080091dc
 8008030:	080091ed 	.word	0x080091ed

08008034 <__multiply>:
 8008034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	4614      	mov	r4, r2
 800803a:	690a      	ldr	r2, [r1, #16]
 800803c:	6923      	ldr	r3, [r4, #16]
 800803e:	429a      	cmp	r2, r3
 8008040:	bfa8      	it	ge
 8008042:	4623      	movge	r3, r4
 8008044:	460f      	mov	r7, r1
 8008046:	bfa4      	itt	ge
 8008048:	460c      	movge	r4, r1
 800804a:	461f      	movge	r7, r3
 800804c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008050:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008054:	68a3      	ldr	r3, [r4, #8]
 8008056:	6861      	ldr	r1, [r4, #4]
 8008058:	eb0a 0609 	add.w	r6, sl, r9
 800805c:	42b3      	cmp	r3, r6
 800805e:	b085      	sub	sp, #20
 8008060:	bfb8      	it	lt
 8008062:	3101      	addlt	r1, #1
 8008064:	f7ff fedc 	bl	8007e20 <_Balloc>
 8008068:	b930      	cbnz	r0, 8008078 <__multiply+0x44>
 800806a:	4602      	mov	r2, r0
 800806c:	4b44      	ldr	r3, [pc, #272]	@ (8008180 <__multiply+0x14c>)
 800806e:	4845      	ldr	r0, [pc, #276]	@ (8008184 <__multiply+0x150>)
 8008070:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008074:	f000 fc92 	bl	800899c <__assert_func>
 8008078:	f100 0514 	add.w	r5, r0, #20
 800807c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008080:	462b      	mov	r3, r5
 8008082:	2200      	movs	r2, #0
 8008084:	4543      	cmp	r3, r8
 8008086:	d321      	bcc.n	80080cc <__multiply+0x98>
 8008088:	f107 0114 	add.w	r1, r7, #20
 800808c:	f104 0214 	add.w	r2, r4, #20
 8008090:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008094:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008098:	9302      	str	r3, [sp, #8]
 800809a:	1b13      	subs	r3, r2, r4
 800809c:	3b15      	subs	r3, #21
 800809e:	f023 0303 	bic.w	r3, r3, #3
 80080a2:	3304      	adds	r3, #4
 80080a4:	f104 0715 	add.w	r7, r4, #21
 80080a8:	42ba      	cmp	r2, r7
 80080aa:	bf38      	it	cc
 80080ac:	2304      	movcc	r3, #4
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	9b02      	ldr	r3, [sp, #8]
 80080b2:	9103      	str	r1, [sp, #12]
 80080b4:	428b      	cmp	r3, r1
 80080b6:	d80c      	bhi.n	80080d2 <__multiply+0x9e>
 80080b8:	2e00      	cmp	r6, #0
 80080ba:	dd03      	ble.n	80080c4 <__multiply+0x90>
 80080bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d05b      	beq.n	800817c <__multiply+0x148>
 80080c4:	6106      	str	r6, [r0, #16]
 80080c6:	b005      	add	sp, #20
 80080c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080cc:	f843 2b04 	str.w	r2, [r3], #4
 80080d0:	e7d8      	b.n	8008084 <__multiply+0x50>
 80080d2:	f8b1 a000 	ldrh.w	sl, [r1]
 80080d6:	f1ba 0f00 	cmp.w	sl, #0
 80080da:	d024      	beq.n	8008126 <__multiply+0xf2>
 80080dc:	f104 0e14 	add.w	lr, r4, #20
 80080e0:	46a9      	mov	r9, r5
 80080e2:	f04f 0c00 	mov.w	ip, #0
 80080e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80080ea:	f8d9 3000 	ldr.w	r3, [r9]
 80080ee:	fa1f fb87 	uxth.w	fp, r7
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80080f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80080fc:	f8d9 7000 	ldr.w	r7, [r9]
 8008100:	4463      	add	r3, ip
 8008102:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008106:	fb0a c70b 	mla	r7, sl, fp, ip
 800810a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800810e:	b29b      	uxth	r3, r3
 8008110:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008114:	4572      	cmp	r2, lr
 8008116:	f849 3b04 	str.w	r3, [r9], #4
 800811a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800811e:	d8e2      	bhi.n	80080e6 <__multiply+0xb2>
 8008120:	9b01      	ldr	r3, [sp, #4]
 8008122:	f845 c003 	str.w	ip, [r5, r3]
 8008126:	9b03      	ldr	r3, [sp, #12]
 8008128:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800812c:	3104      	adds	r1, #4
 800812e:	f1b9 0f00 	cmp.w	r9, #0
 8008132:	d021      	beq.n	8008178 <__multiply+0x144>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	f104 0c14 	add.w	ip, r4, #20
 800813a:	46ae      	mov	lr, r5
 800813c:	f04f 0a00 	mov.w	sl, #0
 8008140:	f8bc b000 	ldrh.w	fp, [ip]
 8008144:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008148:	fb09 770b 	mla	r7, r9, fp, r7
 800814c:	4457      	add	r7, sl
 800814e:	b29b      	uxth	r3, r3
 8008150:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008154:	f84e 3b04 	str.w	r3, [lr], #4
 8008158:	f85c 3b04 	ldr.w	r3, [ip], #4
 800815c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008160:	f8be 3000 	ldrh.w	r3, [lr]
 8008164:	fb09 330a 	mla	r3, r9, sl, r3
 8008168:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800816c:	4562      	cmp	r2, ip
 800816e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008172:	d8e5      	bhi.n	8008140 <__multiply+0x10c>
 8008174:	9f01      	ldr	r7, [sp, #4]
 8008176:	51eb      	str	r3, [r5, r7]
 8008178:	3504      	adds	r5, #4
 800817a:	e799      	b.n	80080b0 <__multiply+0x7c>
 800817c:	3e01      	subs	r6, #1
 800817e:	e79b      	b.n	80080b8 <__multiply+0x84>
 8008180:	080091dc 	.word	0x080091dc
 8008184:	080091ed 	.word	0x080091ed

08008188 <__pow5mult>:
 8008188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800818c:	4615      	mov	r5, r2
 800818e:	f012 0203 	ands.w	r2, r2, #3
 8008192:	4607      	mov	r7, r0
 8008194:	460e      	mov	r6, r1
 8008196:	d007      	beq.n	80081a8 <__pow5mult+0x20>
 8008198:	4c25      	ldr	r4, [pc, #148]	@ (8008230 <__pow5mult+0xa8>)
 800819a:	3a01      	subs	r2, #1
 800819c:	2300      	movs	r3, #0
 800819e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081a2:	f7ff fe9f 	bl	8007ee4 <__multadd>
 80081a6:	4606      	mov	r6, r0
 80081a8:	10ad      	asrs	r5, r5, #2
 80081aa:	d03d      	beq.n	8008228 <__pow5mult+0xa0>
 80081ac:	69fc      	ldr	r4, [r7, #28]
 80081ae:	b97c      	cbnz	r4, 80081d0 <__pow5mult+0x48>
 80081b0:	2010      	movs	r0, #16
 80081b2:	f7ff fd7f 	bl	8007cb4 <malloc>
 80081b6:	4602      	mov	r2, r0
 80081b8:	61f8      	str	r0, [r7, #28]
 80081ba:	b928      	cbnz	r0, 80081c8 <__pow5mult+0x40>
 80081bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008234 <__pow5mult+0xac>)
 80081be:	481e      	ldr	r0, [pc, #120]	@ (8008238 <__pow5mult+0xb0>)
 80081c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80081c4:	f000 fbea 	bl	800899c <__assert_func>
 80081c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081cc:	6004      	str	r4, [r0, #0]
 80081ce:	60c4      	str	r4, [r0, #12]
 80081d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80081d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081d8:	b94c      	cbnz	r4, 80081ee <__pow5mult+0x66>
 80081da:	f240 2171 	movw	r1, #625	@ 0x271
 80081de:	4638      	mov	r0, r7
 80081e0:	f7ff ff12 	bl	8008008 <__i2b>
 80081e4:	2300      	movs	r3, #0
 80081e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80081ea:	4604      	mov	r4, r0
 80081ec:	6003      	str	r3, [r0, #0]
 80081ee:	f04f 0900 	mov.w	r9, #0
 80081f2:	07eb      	lsls	r3, r5, #31
 80081f4:	d50a      	bpl.n	800820c <__pow5mult+0x84>
 80081f6:	4631      	mov	r1, r6
 80081f8:	4622      	mov	r2, r4
 80081fa:	4638      	mov	r0, r7
 80081fc:	f7ff ff1a 	bl	8008034 <__multiply>
 8008200:	4631      	mov	r1, r6
 8008202:	4680      	mov	r8, r0
 8008204:	4638      	mov	r0, r7
 8008206:	f7ff fe4b 	bl	8007ea0 <_Bfree>
 800820a:	4646      	mov	r6, r8
 800820c:	106d      	asrs	r5, r5, #1
 800820e:	d00b      	beq.n	8008228 <__pow5mult+0xa0>
 8008210:	6820      	ldr	r0, [r4, #0]
 8008212:	b938      	cbnz	r0, 8008224 <__pow5mult+0x9c>
 8008214:	4622      	mov	r2, r4
 8008216:	4621      	mov	r1, r4
 8008218:	4638      	mov	r0, r7
 800821a:	f7ff ff0b 	bl	8008034 <__multiply>
 800821e:	6020      	str	r0, [r4, #0]
 8008220:	f8c0 9000 	str.w	r9, [r0]
 8008224:	4604      	mov	r4, r0
 8008226:	e7e4      	b.n	80081f2 <__pow5mult+0x6a>
 8008228:	4630      	mov	r0, r6
 800822a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800822e:	bf00      	nop
 8008230:	08009248 	.word	0x08009248
 8008234:	0800916d 	.word	0x0800916d
 8008238:	080091ed 	.word	0x080091ed

0800823c <__lshift>:
 800823c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008240:	460c      	mov	r4, r1
 8008242:	6849      	ldr	r1, [r1, #4]
 8008244:	6923      	ldr	r3, [r4, #16]
 8008246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800824a:	68a3      	ldr	r3, [r4, #8]
 800824c:	4607      	mov	r7, r0
 800824e:	4691      	mov	r9, r2
 8008250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008254:	f108 0601 	add.w	r6, r8, #1
 8008258:	42b3      	cmp	r3, r6
 800825a:	db0b      	blt.n	8008274 <__lshift+0x38>
 800825c:	4638      	mov	r0, r7
 800825e:	f7ff fddf 	bl	8007e20 <_Balloc>
 8008262:	4605      	mov	r5, r0
 8008264:	b948      	cbnz	r0, 800827a <__lshift+0x3e>
 8008266:	4602      	mov	r2, r0
 8008268:	4b28      	ldr	r3, [pc, #160]	@ (800830c <__lshift+0xd0>)
 800826a:	4829      	ldr	r0, [pc, #164]	@ (8008310 <__lshift+0xd4>)
 800826c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008270:	f000 fb94 	bl	800899c <__assert_func>
 8008274:	3101      	adds	r1, #1
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	e7ee      	b.n	8008258 <__lshift+0x1c>
 800827a:	2300      	movs	r3, #0
 800827c:	f100 0114 	add.w	r1, r0, #20
 8008280:	f100 0210 	add.w	r2, r0, #16
 8008284:	4618      	mov	r0, r3
 8008286:	4553      	cmp	r3, sl
 8008288:	db33      	blt.n	80082f2 <__lshift+0xb6>
 800828a:	6920      	ldr	r0, [r4, #16]
 800828c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008290:	f104 0314 	add.w	r3, r4, #20
 8008294:	f019 091f 	ands.w	r9, r9, #31
 8008298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800829c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082a0:	d02b      	beq.n	80082fa <__lshift+0xbe>
 80082a2:	f1c9 0e20 	rsb	lr, r9, #32
 80082a6:	468a      	mov	sl, r1
 80082a8:	2200      	movs	r2, #0
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	fa00 f009 	lsl.w	r0, r0, r9
 80082b0:	4310      	orrs	r0, r2
 80082b2:	f84a 0b04 	str.w	r0, [sl], #4
 80082b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ba:	459c      	cmp	ip, r3
 80082bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80082c0:	d8f3      	bhi.n	80082aa <__lshift+0x6e>
 80082c2:	ebac 0304 	sub.w	r3, ip, r4
 80082c6:	3b15      	subs	r3, #21
 80082c8:	f023 0303 	bic.w	r3, r3, #3
 80082cc:	3304      	adds	r3, #4
 80082ce:	f104 0015 	add.w	r0, r4, #21
 80082d2:	4584      	cmp	ip, r0
 80082d4:	bf38      	it	cc
 80082d6:	2304      	movcc	r3, #4
 80082d8:	50ca      	str	r2, [r1, r3]
 80082da:	b10a      	cbz	r2, 80082e0 <__lshift+0xa4>
 80082dc:	f108 0602 	add.w	r6, r8, #2
 80082e0:	3e01      	subs	r6, #1
 80082e2:	4638      	mov	r0, r7
 80082e4:	612e      	str	r6, [r5, #16]
 80082e6:	4621      	mov	r1, r4
 80082e8:	f7ff fdda 	bl	8007ea0 <_Bfree>
 80082ec:	4628      	mov	r0, r5
 80082ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80082f6:	3301      	adds	r3, #1
 80082f8:	e7c5      	b.n	8008286 <__lshift+0x4a>
 80082fa:	3904      	subs	r1, #4
 80082fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008300:	f841 2f04 	str.w	r2, [r1, #4]!
 8008304:	459c      	cmp	ip, r3
 8008306:	d8f9      	bhi.n	80082fc <__lshift+0xc0>
 8008308:	e7ea      	b.n	80082e0 <__lshift+0xa4>
 800830a:	bf00      	nop
 800830c:	080091dc 	.word	0x080091dc
 8008310:	080091ed 	.word	0x080091ed

08008314 <__mcmp>:
 8008314:	690a      	ldr	r2, [r1, #16]
 8008316:	4603      	mov	r3, r0
 8008318:	6900      	ldr	r0, [r0, #16]
 800831a:	1a80      	subs	r0, r0, r2
 800831c:	b530      	push	{r4, r5, lr}
 800831e:	d10e      	bne.n	800833e <__mcmp+0x2a>
 8008320:	3314      	adds	r3, #20
 8008322:	3114      	adds	r1, #20
 8008324:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008328:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800832c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008330:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008334:	4295      	cmp	r5, r2
 8008336:	d003      	beq.n	8008340 <__mcmp+0x2c>
 8008338:	d205      	bcs.n	8008346 <__mcmp+0x32>
 800833a:	f04f 30ff 	mov.w	r0, #4294967295
 800833e:	bd30      	pop	{r4, r5, pc}
 8008340:	42a3      	cmp	r3, r4
 8008342:	d3f3      	bcc.n	800832c <__mcmp+0x18>
 8008344:	e7fb      	b.n	800833e <__mcmp+0x2a>
 8008346:	2001      	movs	r0, #1
 8008348:	e7f9      	b.n	800833e <__mcmp+0x2a>
	...

0800834c <__mdiff>:
 800834c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	4689      	mov	r9, r1
 8008352:	4606      	mov	r6, r0
 8008354:	4611      	mov	r1, r2
 8008356:	4648      	mov	r0, r9
 8008358:	4614      	mov	r4, r2
 800835a:	f7ff ffdb 	bl	8008314 <__mcmp>
 800835e:	1e05      	subs	r5, r0, #0
 8008360:	d112      	bne.n	8008388 <__mdiff+0x3c>
 8008362:	4629      	mov	r1, r5
 8008364:	4630      	mov	r0, r6
 8008366:	f7ff fd5b 	bl	8007e20 <_Balloc>
 800836a:	4602      	mov	r2, r0
 800836c:	b928      	cbnz	r0, 800837a <__mdiff+0x2e>
 800836e:	4b3f      	ldr	r3, [pc, #252]	@ (800846c <__mdiff+0x120>)
 8008370:	f240 2137 	movw	r1, #567	@ 0x237
 8008374:	483e      	ldr	r0, [pc, #248]	@ (8008470 <__mdiff+0x124>)
 8008376:	f000 fb11 	bl	800899c <__assert_func>
 800837a:	2301      	movs	r3, #1
 800837c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008380:	4610      	mov	r0, r2
 8008382:	b003      	add	sp, #12
 8008384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008388:	bfbc      	itt	lt
 800838a:	464b      	movlt	r3, r9
 800838c:	46a1      	movlt	r9, r4
 800838e:	4630      	mov	r0, r6
 8008390:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008394:	bfba      	itte	lt
 8008396:	461c      	movlt	r4, r3
 8008398:	2501      	movlt	r5, #1
 800839a:	2500      	movge	r5, #0
 800839c:	f7ff fd40 	bl	8007e20 <_Balloc>
 80083a0:	4602      	mov	r2, r0
 80083a2:	b918      	cbnz	r0, 80083ac <__mdiff+0x60>
 80083a4:	4b31      	ldr	r3, [pc, #196]	@ (800846c <__mdiff+0x120>)
 80083a6:	f240 2145 	movw	r1, #581	@ 0x245
 80083aa:	e7e3      	b.n	8008374 <__mdiff+0x28>
 80083ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80083b0:	6926      	ldr	r6, [r4, #16]
 80083b2:	60c5      	str	r5, [r0, #12]
 80083b4:	f109 0310 	add.w	r3, r9, #16
 80083b8:	f109 0514 	add.w	r5, r9, #20
 80083bc:	f104 0e14 	add.w	lr, r4, #20
 80083c0:	f100 0b14 	add.w	fp, r0, #20
 80083c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	46d9      	mov	r9, fp
 80083d0:	f04f 0c00 	mov.w	ip, #0
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80083da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	fa1f f38a 	uxth.w	r3, sl
 80083e4:	4619      	mov	r1, r3
 80083e6:	b283      	uxth	r3, r0
 80083e8:	1acb      	subs	r3, r1, r3
 80083ea:	0c00      	lsrs	r0, r0, #16
 80083ec:	4463      	add	r3, ip
 80083ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80083f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80083fc:	4576      	cmp	r6, lr
 80083fe:	f849 3b04 	str.w	r3, [r9], #4
 8008402:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008406:	d8e5      	bhi.n	80083d4 <__mdiff+0x88>
 8008408:	1b33      	subs	r3, r6, r4
 800840a:	3b15      	subs	r3, #21
 800840c:	f023 0303 	bic.w	r3, r3, #3
 8008410:	3415      	adds	r4, #21
 8008412:	3304      	adds	r3, #4
 8008414:	42a6      	cmp	r6, r4
 8008416:	bf38      	it	cc
 8008418:	2304      	movcc	r3, #4
 800841a:	441d      	add	r5, r3
 800841c:	445b      	add	r3, fp
 800841e:	461e      	mov	r6, r3
 8008420:	462c      	mov	r4, r5
 8008422:	4544      	cmp	r4, r8
 8008424:	d30e      	bcc.n	8008444 <__mdiff+0xf8>
 8008426:	f108 0103 	add.w	r1, r8, #3
 800842a:	1b49      	subs	r1, r1, r5
 800842c:	f021 0103 	bic.w	r1, r1, #3
 8008430:	3d03      	subs	r5, #3
 8008432:	45a8      	cmp	r8, r5
 8008434:	bf38      	it	cc
 8008436:	2100      	movcc	r1, #0
 8008438:	440b      	add	r3, r1
 800843a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800843e:	b191      	cbz	r1, 8008466 <__mdiff+0x11a>
 8008440:	6117      	str	r7, [r2, #16]
 8008442:	e79d      	b.n	8008380 <__mdiff+0x34>
 8008444:	f854 1b04 	ldr.w	r1, [r4], #4
 8008448:	46e6      	mov	lr, ip
 800844a:	0c08      	lsrs	r0, r1, #16
 800844c:	fa1c fc81 	uxtah	ip, ip, r1
 8008450:	4471      	add	r1, lr
 8008452:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008456:	b289      	uxth	r1, r1
 8008458:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800845c:	f846 1b04 	str.w	r1, [r6], #4
 8008460:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008464:	e7dd      	b.n	8008422 <__mdiff+0xd6>
 8008466:	3f01      	subs	r7, #1
 8008468:	e7e7      	b.n	800843a <__mdiff+0xee>
 800846a:	bf00      	nop
 800846c:	080091dc 	.word	0x080091dc
 8008470:	080091ed 	.word	0x080091ed

08008474 <__d2b>:
 8008474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008478:	460f      	mov	r7, r1
 800847a:	2101      	movs	r1, #1
 800847c:	ec59 8b10 	vmov	r8, r9, d0
 8008480:	4616      	mov	r6, r2
 8008482:	f7ff fccd 	bl	8007e20 <_Balloc>
 8008486:	4604      	mov	r4, r0
 8008488:	b930      	cbnz	r0, 8008498 <__d2b+0x24>
 800848a:	4602      	mov	r2, r0
 800848c:	4b23      	ldr	r3, [pc, #140]	@ (800851c <__d2b+0xa8>)
 800848e:	4824      	ldr	r0, [pc, #144]	@ (8008520 <__d2b+0xac>)
 8008490:	f240 310f 	movw	r1, #783	@ 0x30f
 8008494:	f000 fa82 	bl	800899c <__assert_func>
 8008498:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800849c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084a0:	b10d      	cbz	r5, 80084a6 <__d2b+0x32>
 80084a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084a6:	9301      	str	r3, [sp, #4]
 80084a8:	f1b8 0300 	subs.w	r3, r8, #0
 80084ac:	d023      	beq.n	80084f6 <__d2b+0x82>
 80084ae:	4668      	mov	r0, sp
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	f7ff fd7c 	bl	8007fae <__lo0bits>
 80084b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084ba:	b1d0      	cbz	r0, 80084f2 <__d2b+0x7e>
 80084bc:	f1c0 0320 	rsb	r3, r0, #32
 80084c0:	fa02 f303 	lsl.w	r3, r2, r3
 80084c4:	430b      	orrs	r3, r1
 80084c6:	40c2      	lsrs	r2, r0
 80084c8:	6163      	str	r3, [r4, #20]
 80084ca:	9201      	str	r2, [sp, #4]
 80084cc:	9b01      	ldr	r3, [sp, #4]
 80084ce:	61a3      	str	r3, [r4, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	bf0c      	ite	eq
 80084d4:	2201      	moveq	r2, #1
 80084d6:	2202      	movne	r2, #2
 80084d8:	6122      	str	r2, [r4, #16]
 80084da:	b1a5      	cbz	r5, 8008506 <__d2b+0x92>
 80084dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80084e0:	4405      	add	r5, r0
 80084e2:	603d      	str	r5, [r7, #0]
 80084e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80084e8:	6030      	str	r0, [r6, #0]
 80084ea:	4620      	mov	r0, r4
 80084ec:	b003      	add	sp, #12
 80084ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084f2:	6161      	str	r1, [r4, #20]
 80084f4:	e7ea      	b.n	80084cc <__d2b+0x58>
 80084f6:	a801      	add	r0, sp, #4
 80084f8:	f7ff fd59 	bl	8007fae <__lo0bits>
 80084fc:	9b01      	ldr	r3, [sp, #4]
 80084fe:	6163      	str	r3, [r4, #20]
 8008500:	3020      	adds	r0, #32
 8008502:	2201      	movs	r2, #1
 8008504:	e7e8      	b.n	80084d8 <__d2b+0x64>
 8008506:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800850a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800850e:	6038      	str	r0, [r7, #0]
 8008510:	6918      	ldr	r0, [r3, #16]
 8008512:	f7ff fd2d 	bl	8007f70 <__hi0bits>
 8008516:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800851a:	e7e5      	b.n	80084e8 <__d2b+0x74>
 800851c:	080091dc 	.word	0x080091dc
 8008520:	080091ed 	.word	0x080091ed

08008524 <__ssputs_r>:
 8008524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008528:	688e      	ldr	r6, [r1, #8]
 800852a:	461f      	mov	r7, r3
 800852c:	42be      	cmp	r6, r7
 800852e:	680b      	ldr	r3, [r1, #0]
 8008530:	4682      	mov	sl, r0
 8008532:	460c      	mov	r4, r1
 8008534:	4690      	mov	r8, r2
 8008536:	d82d      	bhi.n	8008594 <__ssputs_r+0x70>
 8008538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800853c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008540:	d026      	beq.n	8008590 <__ssputs_r+0x6c>
 8008542:	6965      	ldr	r5, [r4, #20]
 8008544:	6909      	ldr	r1, [r1, #16]
 8008546:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800854a:	eba3 0901 	sub.w	r9, r3, r1
 800854e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008552:	1c7b      	adds	r3, r7, #1
 8008554:	444b      	add	r3, r9
 8008556:	106d      	asrs	r5, r5, #1
 8008558:	429d      	cmp	r5, r3
 800855a:	bf38      	it	cc
 800855c:	461d      	movcc	r5, r3
 800855e:	0553      	lsls	r3, r2, #21
 8008560:	d527      	bpl.n	80085b2 <__ssputs_r+0x8e>
 8008562:	4629      	mov	r1, r5
 8008564:	f7ff fbd0 	bl	8007d08 <_malloc_r>
 8008568:	4606      	mov	r6, r0
 800856a:	b360      	cbz	r0, 80085c6 <__ssputs_r+0xa2>
 800856c:	6921      	ldr	r1, [r4, #16]
 800856e:	464a      	mov	r2, r9
 8008570:	f000 fa06 	bl	8008980 <memcpy>
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800857a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	6126      	str	r6, [r4, #16]
 8008582:	6165      	str	r5, [r4, #20]
 8008584:	444e      	add	r6, r9
 8008586:	eba5 0509 	sub.w	r5, r5, r9
 800858a:	6026      	str	r6, [r4, #0]
 800858c:	60a5      	str	r5, [r4, #8]
 800858e:	463e      	mov	r6, r7
 8008590:	42be      	cmp	r6, r7
 8008592:	d900      	bls.n	8008596 <__ssputs_r+0x72>
 8008594:	463e      	mov	r6, r7
 8008596:	6820      	ldr	r0, [r4, #0]
 8008598:	4632      	mov	r2, r6
 800859a:	4641      	mov	r1, r8
 800859c:	f000 f9c6 	bl	800892c <memmove>
 80085a0:	68a3      	ldr	r3, [r4, #8]
 80085a2:	1b9b      	subs	r3, r3, r6
 80085a4:	60a3      	str	r3, [r4, #8]
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	4433      	add	r3, r6
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	2000      	movs	r0, #0
 80085ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b2:	462a      	mov	r2, r5
 80085b4:	f000 fa36 	bl	8008a24 <_realloc_r>
 80085b8:	4606      	mov	r6, r0
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d1e0      	bne.n	8008580 <__ssputs_r+0x5c>
 80085be:	6921      	ldr	r1, [r4, #16]
 80085c0:	4650      	mov	r0, sl
 80085c2:	f7ff fb2d 	bl	8007c20 <_free_r>
 80085c6:	230c      	movs	r3, #12
 80085c8:	f8ca 3000 	str.w	r3, [sl]
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085d2:	81a3      	strh	r3, [r4, #12]
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	e7e9      	b.n	80085ae <__ssputs_r+0x8a>
	...

080085dc <_svfiprintf_r>:
 80085dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	4698      	mov	r8, r3
 80085e2:	898b      	ldrh	r3, [r1, #12]
 80085e4:	061b      	lsls	r3, r3, #24
 80085e6:	b09d      	sub	sp, #116	@ 0x74
 80085e8:	4607      	mov	r7, r0
 80085ea:	460d      	mov	r5, r1
 80085ec:	4614      	mov	r4, r2
 80085ee:	d510      	bpl.n	8008612 <_svfiprintf_r+0x36>
 80085f0:	690b      	ldr	r3, [r1, #16]
 80085f2:	b973      	cbnz	r3, 8008612 <_svfiprintf_r+0x36>
 80085f4:	2140      	movs	r1, #64	@ 0x40
 80085f6:	f7ff fb87 	bl	8007d08 <_malloc_r>
 80085fa:	6028      	str	r0, [r5, #0]
 80085fc:	6128      	str	r0, [r5, #16]
 80085fe:	b930      	cbnz	r0, 800860e <_svfiprintf_r+0x32>
 8008600:	230c      	movs	r3, #12
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	f04f 30ff 	mov.w	r0, #4294967295
 8008608:	b01d      	add	sp, #116	@ 0x74
 800860a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860e:	2340      	movs	r3, #64	@ 0x40
 8008610:	616b      	str	r3, [r5, #20]
 8008612:	2300      	movs	r3, #0
 8008614:	9309      	str	r3, [sp, #36]	@ 0x24
 8008616:	2320      	movs	r3, #32
 8008618:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800861c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008620:	2330      	movs	r3, #48	@ 0x30
 8008622:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80087c0 <_svfiprintf_r+0x1e4>
 8008626:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800862a:	f04f 0901 	mov.w	r9, #1
 800862e:	4623      	mov	r3, r4
 8008630:	469a      	mov	sl, r3
 8008632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008636:	b10a      	cbz	r2, 800863c <_svfiprintf_r+0x60>
 8008638:	2a25      	cmp	r2, #37	@ 0x25
 800863a:	d1f9      	bne.n	8008630 <_svfiprintf_r+0x54>
 800863c:	ebba 0b04 	subs.w	fp, sl, r4
 8008640:	d00b      	beq.n	800865a <_svfiprintf_r+0x7e>
 8008642:	465b      	mov	r3, fp
 8008644:	4622      	mov	r2, r4
 8008646:	4629      	mov	r1, r5
 8008648:	4638      	mov	r0, r7
 800864a:	f7ff ff6b 	bl	8008524 <__ssputs_r>
 800864e:	3001      	adds	r0, #1
 8008650:	f000 80a7 	beq.w	80087a2 <_svfiprintf_r+0x1c6>
 8008654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008656:	445a      	add	r2, fp
 8008658:	9209      	str	r2, [sp, #36]	@ 0x24
 800865a:	f89a 3000 	ldrb.w	r3, [sl]
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 809f 	beq.w	80087a2 <_svfiprintf_r+0x1c6>
 8008664:	2300      	movs	r3, #0
 8008666:	f04f 32ff 	mov.w	r2, #4294967295
 800866a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800866e:	f10a 0a01 	add.w	sl, sl, #1
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	9307      	str	r3, [sp, #28]
 8008676:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800867a:	931a      	str	r3, [sp, #104]	@ 0x68
 800867c:	4654      	mov	r4, sl
 800867e:	2205      	movs	r2, #5
 8008680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008684:	484e      	ldr	r0, [pc, #312]	@ (80087c0 <_svfiprintf_r+0x1e4>)
 8008686:	f7f7 fdab 	bl	80001e0 <memchr>
 800868a:	9a04      	ldr	r2, [sp, #16]
 800868c:	b9d8      	cbnz	r0, 80086c6 <_svfiprintf_r+0xea>
 800868e:	06d0      	lsls	r0, r2, #27
 8008690:	bf44      	itt	mi
 8008692:	2320      	movmi	r3, #32
 8008694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008698:	0711      	lsls	r1, r2, #28
 800869a:	bf44      	itt	mi
 800869c:	232b      	movmi	r3, #43	@ 0x2b
 800869e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086a2:	f89a 3000 	ldrb.w	r3, [sl]
 80086a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80086a8:	d015      	beq.n	80086d6 <_svfiprintf_r+0xfa>
 80086aa:	9a07      	ldr	r2, [sp, #28]
 80086ac:	4654      	mov	r4, sl
 80086ae:	2000      	movs	r0, #0
 80086b0:	f04f 0c0a 	mov.w	ip, #10
 80086b4:	4621      	mov	r1, r4
 80086b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ba:	3b30      	subs	r3, #48	@ 0x30
 80086bc:	2b09      	cmp	r3, #9
 80086be:	d94b      	bls.n	8008758 <_svfiprintf_r+0x17c>
 80086c0:	b1b0      	cbz	r0, 80086f0 <_svfiprintf_r+0x114>
 80086c2:	9207      	str	r2, [sp, #28]
 80086c4:	e014      	b.n	80086f0 <_svfiprintf_r+0x114>
 80086c6:	eba0 0308 	sub.w	r3, r0, r8
 80086ca:	fa09 f303 	lsl.w	r3, r9, r3
 80086ce:	4313      	orrs	r3, r2
 80086d0:	9304      	str	r3, [sp, #16]
 80086d2:	46a2      	mov	sl, r4
 80086d4:	e7d2      	b.n	800867c <_svfiprintf_r+0xa0>
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	1d19      	adds	r1, r3, #4
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	9103      	str	r1, [sp, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	bfbb      	ittet	lt
 80086e2:	425b      	neglt	r3, r3
 80086e4:	f042 0202 	orrlt.w	r2, r2, #2
 80086e8:	9307      	strge	r3, [sp, #28]
 80086ea:	9307      	strlt	r3, [sp, #28]
 80086ec:	bfb8      	it	lt
 80086ee:	9204      	strlt	r2, [sp, #16]
 80086f0:	7823      	ldrb	r3, [r4, #0]
 80086f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80086f4:	d10a      	bne.n	800870c <_svfiprintf_r+0x130>
 80086f6:	7863      	ldrb	r3, [r4, #1]
 80086f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80086fa:	d132      	bne.n	8008762 <_svfiprintf_r+0x186>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	1d1a      	adds	r2, r3, #4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	9203      	str	r2, [sp, #12]
 8008704:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008708:	3402      	adds	r4, #2
 800870a:	9305      	str	r3, [sp, #20]
 800870c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80087d0 <_svfiprintf_r+0x1f4>
 8008710:	7821      	ldrb	r1, [r4, #0]
 8008712:	2203      	movs	r2, #3
 8008714:	4650      	mov	r0, sl
 8008716:	f7f7 fd63 	bl	80001e0 <memchr>
 800871a:	b138      	cbz	r0, 800872c <_svfiprintf_r+0x150>
 800871c:	9b04      	ldr	r3, [sp, #16]
 800871e:	eba0 000a 	sub.w	r0, r0, sl
 8008722:	2240      	movs	r2, #64	@ 0x40
 8008724:	4082      	lsls	r2, r0
 8008726:	4313      	orrs	r3, r2
 8008728:	3401      	adds	r4, #1
 800872a:	9304      	str	r3, [sp, #16]
 800872c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008730:	4824      	ldr	r0, [pc, #144]	@ (80087c4 <_svfiprintf_r+0x1e8>)
 8008732:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008736:	2206      	movs	r2, #6
 8008738:	f7f7 fd52 	bl	80001e0 <memchr>
 800873c:	2800      	cmp	r0, #0
 800873e:	d036      	beq.n	80087ae <_svfiprintf_r+0x1d2>
 8008740:	4b21      	ldr	r3, [pc, #132]	@ (80087c8 <_svfiprintf_r+0x1ec>)
 8008742:	bb1b      	cbnz	r3, 800878c <_svfiprintf_r+0x1b0>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	3307      	adds	r3, #7
 8008748:	f023 0307 	bic.w	r3, r3, #7
 800874c:	3308      	adds	r3, #8
 800874e:	9303      	str	r3, [sp, #12]
 8008750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008752:	4433      	add	r3, r6
 8008754:	9309      	str	r3, [sp, #36]	@ 0x24
 8008756:	e76a      	b.n	800862e <_svfiprintf_r+0x52>
 8008758:	fb0c 3202 	mla	r2, ip, r2, r3
 800875c:	460c      	mov	r4, r1
 800875e:	2001      	movs	r0, #1
 8008760:	e7a8      	b.n	80086b4 <_svfiprintf_r+0xd8>
 8008762:	2300      	movs	r3, #0
 8008764:	3401      	adds	r4, #1
 8008766:	9305      	str	r3, [sp, #20]
 8008768:	4619      	mov	r1, r3
 800876a:	f04f 0c0a 	mov.w	ip, #10
 800876e:	4620      	mov	r0, r4
 8008770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008774:	3a30      	subs	r2, #48	@ 0x30
 8008776:	2a09      	cmp	r2, #9
 8008778:	d903      	bls.n	8008782 <_svfiprintf_r+0x1a6>
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0c6      	beq.n	800870c <_svfiprintf_r+0x130>
 800877e:	9105      	str	r1, [sp, #20]
 8008780:	e7c4      	b.n	800870c <_svfiprintf_r+0x130>
 8008782:	fb0c 2101 	mla	r1, ip, r1, r2
 8008786:	4604      	mov	r4, r0
 8008788:	2301      	movs	r3, #1
 800878a:	e7f0      	b.n	800876e <_svfiprintf_r+0x192>
 800878c:	ab03      	add	r3, sp, #12
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	462a      	mov	r2, r5
 8008792:	4b0e      	ldr	r3, [pc, #56]	@ (80087cc <_svfiprintf_r+0x1f0>)
 8008794:	a904      	add	r1, sp, #16
 8008796:	4638      	mov	r0, r7
 8008798:	f7fd fe96 	bl	80064c8 <_printf_float>
 800879c:	1c42      	adds	r2, r0, #1
 800879e:	4606      	mov	r6, r0
 80087a0:	d1d6      	bne.n	8008750 <_svfiprintf_r+0x174>
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	065b      	lsls	r3, r3, #25
 80087a6:	f53f af2d 	bmi.w	8008604 <_svfiprintf_r+0x28>
 80087aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087ac:	e72c      	b.n	8008608 <_svfiprintf_r+0x2c>
 80087ae:	ab03      	add	r3, sp, #12
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	462a      	mov	r2, r5
 80087b4:	4b05      	ldr	r3, [pc, #20]	@ (80087cc <_svfiprintf_r+0x1f0>)
 80087b6:	a904      	add	r1, sp, #16
 80087b8:	4638      	mov	r0, r7
 80087ba:	f7fe f91d 	bl	80069f8 <_printf_i>
 80087be:	e7ed      	b.n	800879c <_svfiprintf_r+0x1c0>
 80087c0:	08009348 	.word	0x08009348
 80087c4:	08009352 	.word	0x08009352
 80087c8:	080064c9 	.word	0x080064c9
 80087cc:	08008525 	.word	0x08008525
 80087d0:	0800934e 	.word	0x0800934e

080087d4 <__sflush_r>:
 80087d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087dc:	0716      	lsls	r6, r2, #28
 80087de:	4605      	mov	r5, r0
 80087e0:	460c      	mov	r4, r1
 80087e2:	d454      	bmi.n	800888e <__sflush_r+0xba>
 80087e4:	684b      	ldr	r3, [r1, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	dc02      	bgt.n	80087f0 <__sflush_r+0x1c>
 80087ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dd48      	ble.n	8008882 <__sflush_r+0xae>
 80087f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087f2:	2e00      	cmp	r6, #0
 80087f4:	d045      	beq.n	8008882 <__sflush_r+0xae>
 80087f6:	2300      	movs	r3, #0
 80087f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087fc:	682f      	ldr	r7, [r5, #0]
 80087fe:	6a21      	ldr	r1, [r4, #32]
 8008800:	602b      	str	r3, [r5, #0]
 8008802:	d030      	beq.n	8008866 <__sflush_r+0x92>
 8008804:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	0759      	lsls	r1, r3, #29
 800880a:	d505      	bpl.n	8008818 <__sflush_r+0x44>
 800880c:	6863      	ldr	r3, [r4, #4]
 800880e:	1ad2      	subs	r2, r2, r3
 8008810:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008812:	b10b      	cbz	r3, 8008818 <__sflush_r+0x44>
 8008814:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008816:	1ad2      	subs	r2, r2, r3
 8008818:	2300      	movs	r3, #0
 800881a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800881c:	6a21      	ldr	r1, [r4, #32]
 800881e:	4628      	mov	r0, r5
 8008820:	47b0      	blx	r6
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	d106      	bne.n	8008836 <__sflush_r+0x62>
 8008828:	6829      	ldr	r1, [r5, #0]
 800882a:	291d      	cmp	r1, #29
 800882c:	d82b      	bhi.n	8008886 <__sflush_r+0xb2>
 800882e:	4a2a      	ldr	r2, [pc, #168]	@ (80088d8 <__sflush_r+0x104>)
 8008830:	410a      	asrs	r2, r1
 8008832:	07d6      	lsls	r6, r2, #31
 8008834:	d427      	bmi.n	8008886 <__sflush_r+0xb2>
 8008836:	2200      	movs	r2, #0
 8008838:	6062      	str	r2, [r4, #4]
 800883a:	04d9      	lsls	r1, r3, #19
 800883c:	6922      	ldr	r2, [r4, #16]
 800883e:	6022      	str	r2, [r4, #0]
 8008840:	d504      	bpl.n	800884c <__sflush_r+0x78>
 8008842:	1c42      	adds	r2, r0, #1
 8008844:	d101      	bne.n	800884a <__sflush_r+0x76>
 8008846:	682b      	ldr	r3, [r5, #0]
 8008848:	b903      	cbnz	r3, 800884c <__sflush_r+0x78>
 800884a:	6560      	str	r0, [r4, #84]	@ 0x54
 800884c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800884e:	602f      	str	r7, [r5, #0]
 8008850:	b1b9      	cbz	r1, 8008882 <__sflush_r+0xae>
 8008852:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008856:	4299      	cmp	r1, r3
 8008858:	d002      	beq.n	8008860 <__sflush_r+0x8c>
 800885a:	4628      	mov	r0, r5
 800885c:	f7ff f9e0 	bl	8007c20 <_free_r>
 8008860:	2300      	movs	r3, #0
 8008862:	6363      	str	r3, [r4, #52]	@ 0x34
 8008864:	e00d      	b.n	8008882 <__sflush_r+0xae>
 8008866:	2301      	movs	r3, #1
 8008868:	4628      	mov	r0, r5
 800886a:	47b0      	blx	r6
 800886c:	4602      	mov	r2, r0
 800886e:	1c50      	adds	r0, r2, #1
 8008870:	d1c9      	bne.n	8008806 <__sflush_r+0x32>
 8008872:	682b      	ldr	r3, [r5, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0c6      	beq.n	8008806 <__sflush_r+0x32>
 8008878:	2b1d      	cmp	r3, #29
 800887a:	d001      	beq.n	8008880 <__sflush_r+0xac>
 800887c:	2b16      	cmp	r3, #22
 800887e:	d11e      	bne.n	80088be <__sflush_r+0xea>
 8008880:	602f      	str	r7, [r5, #0]
 8008882:	2000      	movs	r0, #0
 8008884:	e022      	b.n	80088cc <__sflush_r+0xf8>
 8008886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800888a:	b21b      	sxth	r3, r3
 800888c:	e01b      	b.n	80088c6 <__sflush_r+0xf2>
 800888e:	690f      	ldr	r7, [r1, #16]
 8008890:	2f00      	cmp	r7, #0
 8008892:	d0f6      	beq.n	8008882 <__sflush_r+0xae>
 8008894:	0793      	lsls	r3, r2, #30
 8008896:	680e      	ldr	r6, [r1, #0]
 8008898:	bf08      	it	eq
 800889a:	694b      	ldreq	r3, [r1, #20]
 800889c:	600f      	str	r7, [r1, #0]
 800889e:	bf18      	it	ne
 80088a0:	2300      	movne	r3, #0
 80088a2:	eba6 0807 	sub.w	r8, r6, r7
 80088a6:	608b      	str	r3, [r1, #8]
 80088a8:	f1b8 0f00 	cmp.w	r8, #0
 80088ac:	dde9      	ble.n	8008882 <__sflush_r+0xae>
 80088ae:	6a21      	ldr	r1, [r4, #32]
 80088b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088b2:	4643      	mov	r3, r8
 80088b4:	463a      	mov	r2, r7
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b0      	blx	r6
 80088ba:	2800      	cmp	r0, #0
 80088bc:	dc08      	bgt.n	80088d0 <__sflush_r+0xfc>
 80088be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295
 80088cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d0:	4407      	add	r7, r0
 80088d2:	eba8 0800 	sub.w	r8, r8, r0
 80088d6:	e7e7      	b.n	80088a8 <__sflush_r+0xd4>
 80088d8:	dfbffffe 	.word	0xdfbffffe

080088dc <_fflush_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	690b      	ldr	r3, [r1, #16]
 80088e0:	4605      	mov	r5, r0
 80088e2:	460c      	mov	r4, r1
 80088e4:	b913      	cbnz	r3, 80088ec <_fflush_r+0x10>
 80088e6:	2500      	movs	r5, #0
 80088e8:	4628      	mov	r0, r5
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	b118      	cbz	r0, 80088f6 <_fflush_r+0x1a>
 80088ee:	6a03      	ldr	r3, [r0, #32]
 80088f0:	b90b      	cbnz	r3, 80088f6 <_fflush_r+0x1a>
 80088f2:	f7fe fa2d 	bl	8006d50 <__sinit>
 80088f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0f3      	beq.n	80088e6 <_fflush_r+0xa>
 80088fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008900:	07d0      	lsls	r0, r2, #31
 8008902:	d404      	bmi.n	800890e <_fflush_r+0x32>
 8008904:	0599      	lsls	r1, r3, #22
 8008906:	d402      	bmi.n	800890e <_fflush_r+0x32>
 8008908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800890a:	f7fe fb38 	bl	8006f7e <__retarget_lock_acquire_recursive>
 800890e:	4628      	mov	r0, r5
 8008910:	4621      	mov	r1, r4
 8008912:	f7ff ff5f 	bl	80087d4 <__sflush_r>
 8008916:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008918:	07da      	lsls	r2, r3, #31
 800891a:	4605      	mov	r5, r0
 800891c:	d4e4      	bmi.n	80088e8 <_fflush_r+0xc>
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	059b      	lsls	r3, r3, #22
 8008922:	d4e1      	bmi.n	80088e8 <_fflush_r+0xc>
 8008924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008926:	f7fe fb2b 	bl	8006f80 <__retarget_lock_release_recursive>
 800892a:	e7dd      	b.n	80088e8 <_fflush_r+0xc>

0800892c <memmove>:
 800892c:	4288      	cmp	r0, r1
 800892e:	b510      	push	{r4, lr}
 8008930:	eb01 0402 	add.w	r4, r1, r2
 8008934:	d902      	bls.n	800893c <memmove+0x10>
 8008936:	4284      	cmp	r4, r0
 8008938:	4623      	mov	r3, r4
 800893a:	d807      	bhi.n	800894c <memmove+0x20>
 800893c:	1e43      	subs	r3, r0, #1
 800893e:	42a1      	cmp	r1, r4
 8008940:	d008      	beq.n	8008954 <memmove+0x28>
 8008942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008946:	f803 2f01 	strb.w	r2, [r3, #1]!
 800894a:	e7f8      	b.n	800893e <memmove+0x12>
 800894c:	4402      	add	r2, r0
 800894e:	4601      	mov	r1, r0
 8008950:	428a      	cmp	r2, r1
 8008952:	d100      	bne.n	8008956 <memmove+0x2a>
 8008954:	bd10      	pop	{r4, pc}
 8008956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800895a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800895e:	e7f7      	b.n	8008950 <memmove+0x24>

08008960 <_sbrk_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4d06      	ldr	r5, [pc, #24]	@ (800897c <_sbrk_r+0x1c>)
 8008964:	2300      	movs	r3, #0
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	f7f8 fdf0 	bl	8001550 <_sbrk>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_sbrk_r+0x1a>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_sbrk_r+0x1a>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	200004ec 	.word	0x200004ec

08008980 <memcpy>:
 8008980:	440a      	add	r2, r1
 8008982:	4291      	cmp	r1, r2
 8008984:	f100 33ff 	add.w	r3, r0, #4294967295
 8008988:	d100      	bne.n	800898c <memcpy+0xc>
 800898a:	4770      	bx	lr
 800898c:	b510      	push	{r4, lr}
 800898e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008996:	4291      	cmp	r1, r2
 8008998:	d1f9      	bne.n	800898e <memcpy+0xe>
 800899a:	bd10      	pop	{r4, pc}

0800899c <__assert_func>:
 800899c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800899e:	4614      	mov	r4, r2
 80089a0:	461a      	mov	r2, r3
 80089a2:	4b09      	ldr	r3, [pc, #36]	@ (80089c8 <__assert_func+0x2c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4605      	mov	r5, r0
 80089a8:	68d8      	ldr	r0, [r3, #12]
 80089aa:	b954      	cbnz	r4, 80089c2 <__assert_func+0x26>
 80089ac:	4b07      	ldr	r3, [pc, #28]	@ (80089cc <__assert_func+0x30>)
 80089ae:	461c      	mov	r4, r3
 80089b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089b4:	9100      	str	r1, [sp, #0]
 80089b6:	462b      	mov	r3, r5
 80089b8:	4905      	ldr	r1, [pc, #20]	@ (80089d0 <__assert_func+0x34>)
 80089ba:	f000 f86f 	bl	8008a9c <fiprintf>
 80089be:	f000 f87f 	bl	8008ac0 <abort>
 80089c2:	4b04      	ldr	r3, [pc, #16]	@ (80089d4 <__assert_func+0x38>)
 80089c4:	e7f4      	b.n	80089b0 <__assert_func+0x14>
 80089c6:	bf00      	nop
 80089c8:	20000018 	.word	0x20000018
 80089cc:	0800939e 	.word	0x0800939e
 80089d0:	08009370 	.word	0x08009370
 80089d4:	08009363 	.word	0x08009363

080089d8 <_calloc_r>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	fba1 5402 	umull	r5, r4, r1, r2
 80089de:	b93c      	cbnz	r4, 80089f0 <_calloc_r+0x18>
 80089e0:	4629      	mov	r1, r5
 80089e2:	f7ff f991 	bl	8007d08 <_malloc_r>
 80089e6:	4606      	mov	r6, r0
 80089e8:	b928      	cbnz	r0, 80089f6 <_calloc_r+0x1e>
 80089ea:	2600      	movs	r6, #0
 80089ec:	4630      	mov	r0, r6
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	220c      	movs	r2, #12
 80089f2:	6002      	str	r2, [r0, #0]
 80089f4:	e7f9      	b.n	80089ea <_calloc_r+0x12>
 80089f6:	462a      	mov	r2, r5
 80089f8:	4621      	mov	r1, r4
 80089fa:	f7fe fa42 	bl	8006e82 <memset>
 80089fe:	e7f5      	b.n	80089ec <_calloc_r+0x14>

08008a00 <__ascii_mbtowc>:
 8008a00:	b082      	sub	sp, #8
 8008a02:	b901      	cbnz	r1, 8008a06 <__ascii_mbtowc+0x6>
 8008a04:	a901      	add	r1, sp, #4
 8008a06:	b142      	cbz	r2, 8008a1a <__ascii_mbtowc+0x1a>
 8008a08:	b14b      	cbz	r3, 8008a1e <__ascii_mbtowc+0x1e>
 8008a0a:	7813      	ldrb	r3, [r2, #0]
 8008a0c:	600b      	str	r3, [r1, #0]
 8008a0e:	7812      	ldrb	r2, [r2, #0]
 8008a10:	1e10      	subs	r0, r2, #0
 8008a12:	bf18      	it	ne
 8008a14:	2001      	movne	r0, #1
 8008a16:	b002      	add	sp, #8
 8008a18:	4770      	bx	lr
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	e7fb      	b.n	8008a16 <__ascii_mbtowc+0x16>
 8008a1e:	f06f 0001 	mvn.w	r0, #1
 8008a22:	e7f8      	b.n	8008a16 <__ascii_mbtowc+0x16>

08008a24 <_realloc_r>:
 8008a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a28:	4680      	mov	r8, r0
 8008a2a:	4615      	mov	r5, r2
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	b921      	cbnz	r1, 8008a3a <_realloc_r+0x16>
 8008a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a34:	4611      	mov	r1, r2
 8008a36:	f7ff b967 	b.w	8007d08 <_malloc_r>
 8008a3a:	b92a      	cbnz	r2, 8008a48 <_realloc_r+0x24>
 8008a3c:	f7ff f8f0 	bl	8007c20 <_free_r>
 8008a40:	2400      	movs	r4, #0
 8008a42:	4620      	mov	r0, r4
 8008a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a48:	f000 f841 	bl	8008ace <_malloc_usable_size_r>
 8008a4c:	4285      	cmp	r5, r0
 8008a4e:	4606      	mov	r6, r0
 8008a50:	d802      	bhi.n	8008a58 <_realloc_r+0x34>
 8008a52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a56:	d8f4      	bhi.n	8008a42 <_realloc_r+0x1e>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	f7ff f954 	bl	8007d08 <_malloc_r>
 8008a60:	4607      	mov	r7, r0
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d0ec      	beq.n	8008a40 <_realloc_r+0x1c>
 8008a66:	42b5      	cmp	r5, r6
 8008a68:	462a      	mov	r2, r5
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	bf28      	it	cs
 8008a6e:	4632      	movcs	r2, r6
 8008a70:	f7ff ff86 	bl	8008980 <memcpy>
 8008a74:	4621      	mov	r1, r4
 8008a76:	4640      	mov	r0, r8
 8008a78:	f7ff f8d2 	bl	8007c20 <_free_r>
 8008a7c:	463c      	mov	r4, r7
 8008a7e:	e7e0      	b.n	8008a42 <_realloc_r+0x1e>

08008a80 <__ascii_wctomb>:
 8008a80:	4603      	mov	r3, r0
 8008a82:	4608      	mov	r0, r1
 8008a84:	b141      	cbz	r1, 8008a98 <__ascii_wctomb+0x18>
 8008a86:	2aff      	cmp	r2, #255	@ 0xff
 8008a88:	d904      	bls.n	8008a94 <__ascii_wctomb+0x14>
 8008a8a:	228a      	movs	r2, #138	@ 0x8a
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a92:	4770      	bx	lr
 8008a94:	700a      	strb	r2, [r1, #0]
 8008a96:	2001      	movs	r0, #1
 8008a98:	4770      	bx	lr
	...

08008a9c <fiprintf>:
 8008a9c:	b40e      	push	{r1, r2, r3}
 8008a9e:	b503      	push	{r0, r1, lr}
 8008aa0:	4601      	mov	r1, r0
 8008aa2:	ab03      	add	r3, sp, #12
 8008aa4:	4805      	ldr	r0, [pc, #20]	@ (8008abc <fiprintf+0x20>)
 8008aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aaa:	6800      	ldr	r0, [r0, #0]
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	f000 f83f 	bl	8008b30 <_vfiprintf_r>
 8008ab2:	b002      	add	sp, #8
 8008ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ab8:	b003      	add	sp, #12
 8008aba:	4770      	bx	lr
 8008abc:	20000018 	.word	0x20000018

08008ac0 <abort>:
 8008ac0:	b508      	push	{r3, lr}
 8008ac2:	2006      	movs	r0, #6
 8008ac4:	f000 fa08 	bl	8008ed8 <raise>
 8008ac8:	2001      	movs	r0, #1
 8008aca:	f7f8 fcc9 	bl	8001460 <_exit>

08008ace <_malloc_usable_size_r>:
 8008ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad2:	1f18      	subs	r0, r3, #4
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	bfbc      	itt	lt
 8008ad8:	580b      	ldrlt	r3, [r1, r0]
 8008ada:	18c0      	addlt	r0, r0, r3
 8008adc:	4770      	bx	lr

08008ade <__sfputc_r>:
 8008ade:	6893      	ldr	r3, [r2, #8]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	b410      	push	{r4}
 8008ae6:	6093      	str	r3, [r2, #8]
 8008ae8:	da08      	bge.n	8008afc <__sfputc_r+0x1e>
 8008aea:	6994      	ldr	r4, [r2, #24]
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	db01      	blt.n	8008af4 <__sfputc_r+0x16>
 8008af0:	290a      	cmp	r1, #10
 8008af2:	d103      	bne.n	8008afc <__sfputc_r+0x1e>
 8008af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008af8:	f000 b932 	b.w	8008d60 <__swbuf_r>
 8008afc:	6813      	ldr	r3, [r2, #0]
 8008afe:	1c58      	adds	r0, r3, #1
 8008b00:	6010      	str	r0, [r2, #0]
 8008b02:	7019      	strb	r1, [r3, #0]
 8008b04:	4608      	mov	r0, r1
 8008b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <__sfputs_r>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	4606      	mov	r6, r0
 8008b10:	460f      	mov	r7, r1
 8008b12:	4614      	mov	r4, r2
 8008b14:	18d5      	adds	r5, r2, r3
 8008b16:	42ac      	cmp	r4, r5
 8008b18:	d101      	bne.n	8008b1e <__sfputs_r+0x12>
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	e007      	b.n	8008b2e <__sfputs_r+0x22>
 8008b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b22:	463a      	mov	r2, r7
 8008b24:	4630      	mov	r0, r6
 8008b26:	f7ff ffda 	bl	8008ade <__sfputc_r>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	d1f3      	bne.n	8008b16 <__sfputs_r+0xa>
 8008b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b30 <_vfiprintf_r>:
 8008b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b34:	460d      	mov	r5, r1
 8008b36:	b09d      	sub	sp, #116	@ 0x74
 8008b38:	4614      	mov	r4, r2
 8008b3a:	4698      	mov	r8, r3
 8008b3c:	4606      	mov	r6, r0
 8008b3e:	b118      	cbz	r0, 8008b48 <_vfiprintf_r+0x18>
 8008b40:	6a03      	ldr	r3, [r0, #32]
 8008b42:	b90b      	cbnz	r3, 8008b48 <_vfiprintf_r+0x18>
 8008b44:	f7fe f904 	bl	8006d50 <__sinit>
 8008b48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b4a:	07d9      	lsls	r1, r3, #31
 8008b4c:	d405      	bmi.n	8008b5a <_vfiprintf_r+0x2a>
 8008b4e:	89ab      	ldrh	r3, [r5, #12]
 8008b50:	059a      	lsls	r2, r3, #22
 8008b52:	d402      	bmi.n	8008b5a <_vfiprintf_r+0x2a>
 8008b54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b56:	f7fe fa12 	bl	8006f7e <__retarget_lock_acquire_recursive>
 8008b5a:	89ab      	ldrh	r3, [r5, #12]
 8008b5c:	071b      	lsls	r3, r3, #28
 8008b5e:	d501      	bpl.n	8008b64 <_vfiprintf_r+0x34>
 8008b60:	692b      	ldr	r3, [r5, #16]
 8008b62:	b99b      	cbnz	r3, 8008b8c <_vfiprintf_r+0x5c>
 8008b64:	4629      	mov	r1, r5
 8008b66:	4630      	mov	r0, r6
 8008b68:	f000 f938 	bl	8008ddc <__swsetup_r>
 8008b6c:	b170      	cbz	r0, 8008b8c <_vfiprintf_r+0x5c>
 8008b6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b70:	07dc      	lsls	r4, r3, #31
 8008b72:	d504      	bpl.n	8008b7e <_vfiprintf_r+0x4e>
 8008b74:	f04f 30ff 	mov.w	r0, #4294967295
 8008b78:	b01d      	add	sp, #116	@ 0x74
 8008b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7e:	89ab      	ldrh	r3, [r5, #12]
 8008b80:	0598      	lsls	r0, r3, #22
 8008b82:	d4f7      	bmi.n	8008b74 <_vfiprintf_r+0x44>
 8008b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b86:	f7fe f9fb 	bl	8006f80 <__retarget_lock_release_recursive>
 8008b8a:	e7f3      	b.n	8008b74 <_vfiprintf_r+0x44>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b90:	2320      	movs	r3, #32
 8008b92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b9a:	2330      	movs	r3, #48	@ 0x30
 8008b9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d4c <_vfiprintf_r+0x21c>
 8008ba0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ba4:	f04f 0901 	mov.w	r9, #1
 8008ba8:	4623      	mov	r3, r4
 8008baa:	469a      	mov	sl, r3
 8008bac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bb0:	b10a      	cbz	r2, 8008bb6 <_vfiprintf_r+0x86>
 8008bb2:	2a25      	cmp	r2, #37	@ 0x25
 8008bb4:	d1f9      	bne.n	8008baa <_vfiprintf_r+0x7a>
 8008bb6:	ebba 0b04 	subs.w	fp, sl, r4
 8008bba:	d00b      	beq.n	8008bd4 <_vfiprintf_r+0xa4>
 8008bbc:	465b      	mov	r3, fp
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f7ff ffa2 	bl	8008b0c <__sfputs_r>
 8008bc8:	3001      	adds	r0, #1
 8008bca:	f000 80a7 	beq.w	8008d1c <_vfiprintf_r+0x1ec>
 8008bce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bd0:	445a      	add	r2, fp
 8008bd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 809f 	beq.w	8008d1c <_vfiprintf_r+0x1ec>
 8008bde:	2300      	movs	r3, #0
 8008be0:	f04f 32ff 	mov.w	r2, #4294967295
 8008be4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008be8:	f10a 0a01 	add.w	sl, sl, #1
 8008bec:	9304      	str	r3, [sp, #16]
 8008bee:	9307      	str	r3, [sp, #28]
 8008bf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bf6:	4654      	mov	r4, sl
 8008bf8:	2205      	movs	r2, #5
 8008bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bfe:	4853      	ldr	r0, [pc, #332]	@ (8008d4c <_vfiprintf_r+0x21c>)
 8008c00:	f7f7 faee 	bl	80001e0 <memchr>
 8008c04:	9a04      	ldr	r2, [sp, #16]
 8008c06:	b9d8      	cbnz	r0, 8008c40 <_vfiprintf_r+0x110>
 8008c08:	06d1      	lsls	r1, r2, #27
 8008c0a:	bf44      	itt	mi
 8008c0c:	2320      	movmi	r3, #32
 8008c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c12:	0713      	lsls	r3, r2, #28
 8008c14:	bf44      	itt	mi
 8008c16:	232b      	movmi	r3, #43	@ 0x2b
 8008c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c20:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c22:	d015      	beq.n	8008c50 <_vfiprintf_r+0x120>
 8008c24:	9a07      	ldr	r2, [sp, #28]
 8008c26:	4654      	mov	r4, sl
 8008c28:	2000      	movs	r0, #0
 8008c2a:	f04f 0c0a 	mov.w	ip, #10
 8008c2e:	4621      	mov	r1, r4
 8008c30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c34:	3b30      	subs	r3, #48	@ 0x30
 8008c36:	2b09      	cmp	r3, #9
 8008c38:	d94b      	bls.n	8008cd2 <_vfiprintf_r+0x1a2>
 8008c3a:	b1b0      	cbz	r0, 8008c6a <_vfiprintf_r+0x13a>
 8008c3c:	9207      	str	r2, [sp, #28]
 8008c3e:	e014      	b.n	8008c6a <_vfiprintf_r+0x13a>
 8008c40:	eba0 0308 	sub.w	r3, r0, r8
 8008c44:	fa09 f303 	lsl.w	r3, r9, r3
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	9304      	str	r3, [sp, #16]
 8008c4c:	46a2      	mov	sl, r4
 8008c4e:	e7d2      	b.n	8008bf6 <_vfiprintf_r+0xc6>
 8008c50:	9b03      	ldr	r3, [sp, #12]
 8008c52:	1d19      	adds	r1, r3, #4
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	9103      	str	r1, [sp, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bfbb      	ittet	lt
 8008c5c:	425b      	neglt	r3, r3
 8008c5e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c62:	9307      	strge	r3, [sp, #28]
 8008c64:	9307      	strlt	r3, [sp, #28]
 8008c66:	bfb8      	it	lt
 8008c68:	9204      	strlt	r2, [sp, #16]
 8008c6a:	7823      	ldrb	r3, [r4, #0]
 8008c6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c6e:	d10a      	bne.n	8008c86 <_vfiprintf_r+0x156>
 8008c70:	7863      	ldrb	r3, [r4, #1]
 8008c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c74:	d132      	bne.n	8008cdc <_vfiprintf_r+0x1ac>
 8008c76:	9b03      	ldr	r3, [sp, #12]
 8008c78:	1d1a      	adds	r2, r3, #4
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	9203      	str	r2, [sp, #12]
 8008c7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c82:	3402      	adds	r4, #2
 8008c84:	9305      	str	r3, [sp, #20]
 8008c86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d5c <_vfiprintf_r+0x22c>
 8008c8a:	7821      	ldrb	r1, [r4, #0]
 8008c8c:	2203      	movs	r2, #3
 8008c8e:	4650      	mov	r0, sl
 8008c90:	f7f7 faa6 	bl	80001e0 <memchr>
 8008c94:	b138      	cbz	r0, 8008ca6 <_vfiprintf_r+0x176>
 8008c96:	9b04      	ldr	r3, [sp, #16]
 8008c98:	eba0 000a 	sub.w	r0, r0, sl
 8008c9c:	2240      	movs	r2, #64	@ 0x40
 8008c9e:	4082      	lsls	r2, r0
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	3401      	adds	r4, #1
 8008ca4:	9304      	str	r3, [sp, #16]
 8008ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008caa:	4829      	ldr	r0, [pc, #164]	@ (8008d50 <_vfiprintf_r+0x220>)
 8008cac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cb0:	2206      	movs	r2, #6
 8008cb2:	f7f7 fa95 	bl	80001e0 <memchr>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d03f      	beq.n	8008d3a <_vfiprintf_r+0x20a>
 8008cba:	4b26      	ldr	r3, [pc, #152]	@ (8008d54 <_vfiprintf_r+0x224>)
 8008cbc:	bb1b      	cbnz	r3, 8008d06 <_vfiprintf_r+0x1d6>
 8008cbe:	9b03      	ldr	r3, [sp, #12]
 8008cc0:	3307      	adds	r3, #7
 8008cc2:	f023 0307 	bic.w	r3, r3, #7
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	9303      	str	r3, [sp, #12]
 8008cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ccc:	443b      	add	r3, r7
 8008cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cd0:	e76a      	b.n	8008ba8 <_vfiprintf_r+0x78>
 8008cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	2001      	movs	r0, #1
 8008cda:	e7a8      	b.n	8008c2e <_vfiprintf_r+0xfe>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	3401      	adds	r4, #1
 8008ce0:	9305      	str	r3, [sp, #20]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	f04f 0c0a 	mov.w	ip, #10
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cee:	3a30      	subs	r2, #48	@ 0x30
 8008cf0:	2a09      	cmp	r2, #9
 8008cf2:	d903      	bls.n	8008cfc <_vfiprintf_r+0x1cc>
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d0c6      	beq.n	8008c86 <_vfiprintf_r+0x156>
 8008cf8:	9105      	str	r1, [sp, #20]
 8008cfa:	e7c4      	b.n	8008c86 <_vfiprintf_r+0x156>
 8008cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d00:	4604      	mov	r4, r0
 8008d02:	2301      	movs	r3, #1
 8008d04:	e7f0      	b.n	8008ce8 <_vfiprintf_r+0x1b8>
 8008d06:	ab03      	add	r3, sp, #12
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	462a      	mov	r2, r5
 8008d0c:	4b12      	ldr	r3, [pc, #72]	@ (8008d58 <_vfiprintf_r+0x228>)
 8008d0e:	a904      	add	r1, sp, #16
 8008d10:	4630      	mov	r0, r6
 8008d12:	f7fd fbd9 	bl	80064c8 <_printf_float>
 8008d16:	4607      	mov	r7, r0
 8008d18:	1c78      	adds	r0, r7, #1
 8008d1a:	d1d6      	bne.n	8008cca <_vfiprintf_r+0x19a>
 8008d1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d1e:	07d9      	lsls	r1, r3, #31
 8008d20:	d405      	bmi.n	8008d2e <_vfiprintf_r+0x1fe>
 8008d22:	89ab      	ldrh	r3, [r5, #12]
 8008d24:	059a      	lsls	r2, r3, #22
 8008d26:	d402      	bmi.n	8008d2e <_vfiprintf_r+0x1fe>
 8008d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d2a:	f7fe f929 	bl	8006f80 <__retarget_lock_release_recursive>
 8008d2e:	89ab      	ldrh	r3, [r5, #12]
 8008d30:	065b      	lsls	r3, r3, #25
 8008d32:	f53f af1f 	bmi.w	8008b74 <_vfiprintf_r+0x44>
 8008d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d38:	e71e      	b.n	8008b78 <_vfiprintf_r+0x48>
 8008d3a:	ab03      	add	r3, sp, #12
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	462a      	mov	r2, r5
 8008d40:	4b05      	ldr	r3, [pc, #20]	@ (8008d58 <_vfiprintf_r+0x228>)
 8008d42:	a904      	add	r1, sp, #16
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7fd fe57 	bl	80069f8 <_printf_i>
 8008d4a:	e7e4      	b.n	8008d16 <_vfiprintf_r+0x1e6>
 8008d4c:	08009348 	.word	0x08009348
 8008d50:	08009352 	.word	0x08009352
 8008d54:	080064c9 	.word	0x080064c9
 8008d58:	08008b0d 	.word	0x08008b0d
 8008d5c:	0800934e 	.word	0x0800934e

08008d60 <__swbuf_r>:
 8008d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d62:	460e      	mov	r6, r1
 8008d64:	4614      	mov	r4, r2
 8008d66:	4605      	mov	r5, r0
 8008d68:	b118      	cbz	r0, 8008d72 <__swbuf_r+0x12>
 8008d6a:	6a03      	ldr	r3, [r0, #32]
 8008d6c:	b90b      	cbnz	r3, 8008d72 <__swbuf_r+0x12>
 8008d6e:	f7fd ffef 	bl	8006d50 <__sinit>
 8008d72:	69a3      	ldr	r3, [r4, #24]
 8008d74:	60a3      	str	r3, [r4, #8]
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	071a      	lsls	r2, r3, #28
 8008d7a:	d501      	bpl.n	8008d80 <__swbuf_r+0x20>
 8008d7c:	6923      	ldr	r3, [r4, #16]
 8008d7e:	b943      	cbnz	r3, 8008d92 <__swbuf_r+0x32>
 8008d80:	4621      	mov	r1, r4
 8008d82:	4628      	mov	r0, r5
 8008d84:	f000 f82a 	bl	8008ddc <__swsetup_r>
 8008d88:	b118      	cbz	r0, 8008d92 <__swbuf_r+0x32>
 8008d8a:	f04f 37ff 	mov.w	r7, #4294967295
 8008d8e:	4638      	mov	r0, r7
 8008d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	6922      	ldr	r2, [r4, #16]
 8008d96:	1a98      	subs	r0, r3, r2
 8008d98:	6963      	ldr	r3, [r4, #20]
 8008d9a:	b2f6      	uxtb	r6, r6
 8008d9c:	4283      	cmp	r3, r0
 8008d9e:	4637      	mov	r7, r6
 8008da0:	dc05      	bgt.n	8008dae <__swbuf_r+0x4e>
 8008da2:	4621      	mov	r1, r4
 8008da4:	4628      	mov	r0, r5
 8008da6:	f7ff fd99 	bl	80088dc <_fflush_r>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d1ed      	bne.n	8008d8a <__swbuf_r+0x2a>
 8008dae:	68a3      	ldr	r3, [r4, #8]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	60a3      	str	r3, [r4, #8]
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	6022      	str	r2, [r4, #0]
 8008dba:	701e      	strb	r6, [r3, #0]
 8008dbc:	6962      	ldr	r2, [r4, #20]
 8008dbe:	1c43      	adds	r3, r0, #1
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d004      	beq.n	8008dce <__swbuf_r+0x6e>
 8008dc4:	89a3      	ldrh	r3, [r4, #12]
 8008dc6:	07db      	lsls	r3, r3, #31
 8008dc8:	d5e1      	bpl.n	8008d8e <__swbuf_r+0x2e>
 8008dca:	2e0a      	cmp	r6, #10
 8008dcc:	d1df      	bne.n	8008d8e <__swbuf_r+0x2e>
 8008dce:	4621      	mov	r1, r4
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f7ff fd83 	bl	80088dc <_fflush_r>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d0d9      	beq.n	8008d8e <__swbuf_r+0x2e>
 8008dda:	e7d6      	b.n	8008d8a <__swbuf_r+0x2a>

08008ddc <__swsetup_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4b29      	ldr	r3, [pc, #164]	@ (8008e84 <__swsetup_r+0xa8>)
 8008de0:	4605      	mov	r5, r0
 8008de2:	6818      	ldr	r0, [r3, #0]
 8008de4:	460c      	mov	r4, r1
 8008de6:	b118      	cbz	r0, 8008df0 <__swsetup_r+0x14>
 8008de8:	6a03      	ldr	r3, [r0, #32]
 8008dea:	b90b      	cbnz	r3, 8008df0 <__swsetup_r+0x14>
 8008dec:	f7fd ffb0 	bl	8006d50 <__sinit>
 8008df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df4:	0719      	lsls	r1, r3, #28
 8008df6:	d422      	bmi.n	8008e3e <__swsetup_r+0x62>
 8008df8:	06da      	lsls	r2, r3, #27
 8008dfa:	d407      	bmi.n	8008e0c <__swsetup_r+0x30>
 8008dfc:	2209      	movs	r2, #9
 8008dfe:	602a      	str	r2, [r5, #0]
 8008e00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e04:	81a3      	strh	r3, [r4, #12]
 8008e06:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0a:	e033      	b.n	8008e74 <__swsetup_r+0x98>
 8008e0c:	0758      	lsls	r0, r3, #29
 8008e0e:	d512      	bpl.n	8008e36 <__swsetup_r+0x5a>
 8008e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e12:	b141      	cbz	r1, 8008e26 <__swsetup_r+0x4a>
 8008e14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e18:	4299      	cmp	r1, r3
 8008e1a:	d002      	beq.n	8008e22 <__swsetup_r+0x46>
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f7fe feff 	bl	8007c20 <_free_r>
 8008e22:	2300      	movs	r3, #0
 8008e24:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e2c:	81a3      	strh	r3, [r4, #12]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	6063      	str	r3, [r4, #4]
 8008e32:	6923      	ldr	r3, [r4, #16]
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	89a3      	ldrh	r3, [r4, #12]
 8008e38:	f043 0308 	orr.w	r3, r3, #8
 8008e3c:	81a3      	strh	r3, [r4, #12]
 8008e3e:	6923      	ldr	r3, [r4, #16]
 8008e40:	b94b      	cbnz	r3, 8008e56 <__swsetup_r+0x7a>
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e4c:	d003      	beq.n	8008e56 <__swsetup_r+0x7a>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4628      	mov	r0, r5
 8008e52:	f000 f883 	bl	8008f5c <__smakebuf_r>
 8008e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e5a:	f013 0201 	ands.w	r2, r3, #1
 8008e5e:	d00a      	beq.n	8008e76 <__swsetup_r+0x9a>
 8008e60:	2200      	movs	r2, #0
 8008e62:	60a2      	str	r2, [r4, #8]
 8008e64:	6962      	ldr	r2, [r4, #20]
 8008e66:	4252      	negs	r2, r2
 8008e68:	61a2      	str	r2, [r4, #24]
 8008e6a:	6922      	ldr	r2, [r4, #16]
 8008e6c:	b942      	cbnz	r2, 8008e80 <__swsetup_r+0xa4>
 8008e6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e72:	d1c5      	bne.n	8008e00 <__swsetup_r+0x24>
 8008e74:	bd38      	pop	{r3, r4, r5, pc}
 8008e76:	0799      	lsls	r1, r3, #30
 8008e78:	bf58      	it	pl
 8008e7a:	6962      	ldrpl	r2, [r4, #20]
 8008e7c:	60a2      	str	r2, [r4, #8]
 8008e7e:	e7f4      	b.n	8008e6a <__swsetup_r+0x8e>
 8008e80:	2000      	movs	r0, #0
 8008e82:	e7f7      	b.n	8008e74 <__swsetup_r+0x98>
 8008e84:	20000018 	.word	0x20000018

08008e88 <_raise_r>:
 8008e88:	291f      	cmp	r1, #31
 8008e8a:	b538      	push	{r3, r4, r5, lr}
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	d904      	bls.n	8008e9c <_raise_r+0x14>
 8008e92:	2316      	movs	r3, #22
 8008e94:	6003      	str	r3, [r0, #0]
 8008e96:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9a:	bd38      	pop	{r3, r4, r5, pc}
 8008e9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e9e:	b112      	cbz	r2, 8008ea6 <_raise_r+0x1e>
 8008ea0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ea4:	b94b      	cbnz	r3, 8008eba <_raise_r+0x32>
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 f830 	bl	8008f0c <_getpid_r>
 8008eac:	4622      	mov	r2, r4
 8008eae:	4601      	mov	r1, r0
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eb6:	f000 b817 	b.w	8008ee8 <_kill_r>
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d00a      	beq.n	8008ed4 <_raise_r+0x4c>
 8008ebe:	1c59      	adds	r1, r3, #1
 8008ec0:	d103      	bne.n	8008eca <_raise_r+0x42>
 8008ec2:	2316      	movs	r3, #22
 8008ec4:	6003      	str	r3, [r0, #0]
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e7e7      	b.n	8008e9a <_raise_r+0x12>
 8008eca:	2100      	movs	r1, #0
 8008ecc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	4798      	blx	r3
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	e7e0      	b.n	8008e9a <_raise_r+0x12>

08008ed8 <raise>:
 8008ed8:	4b02      	ldr	r3, [pc, #8]	@ (8008ee4 <raise+0xc>)
 8008eda:	4601      	mov	r1, r0
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	f7ff bfd3 	b.w	8008e88 <_raise_r>
 8008ee2:	bf00      	nop
 8008ee4:	20000018 	.word	0x20000018

08008ee8 <_kill_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d07      	ldr	r5, [pc, #28]	@ (8008f08 <_kill_r+0x20>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	602b      	str	r3, [r5, #0]
 8008ef6:	f7f8 faa3 	bl	8001440 <_kill>
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	d102      	bne.n	8008f04 <_kill_r+0x1c>
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	b103      	cbz	r3, 8008f04 <_kill_r+0x1c>
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	bd38      	pop	{r3, r4, r5, pc}
 8008f06:	bf00      	nop
 8008f08:	200004ec 	.word	0x200004ec

08008f0c <_getpid_r>:
 8008f0c:	f7f8 ba90 	b.w	8001430 <_getpid>

08008f10 <__swhatbuf_r>:
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	460c      	mov	r4, r1
 8008f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f18:	2900      	cmp	r1, #0
 8008f1a:	b096      	sub	sp, #88	@ 0x58
 8008f1c:	4615      	mov	r5, r2
 8008f1e:	461e      	mov	r6, r3
 8008f20:	da0d      	bge.n	8008f3e <__swhatbuf_r+0x2e>
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f28:	f04f 0100 	mov.w	r1, #0
 8008f2c:	bf14      	ite	ne
 8008f2e:	2340      	movne	r3, #64	@ 0x40
 8008f30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f34:	2000      	movs	r0, #0
 8008f36:	6031      	str	r1, [r6, #0]
 8008f38:	602b      	str	r3, [r5, #0]
 8008f3a:	b016      	add	sp, #88	@ 0x58
 8008f3c:	bd70      	pop	{r4, r5, r6, pc}
 8008f3e:	466a      	mov	r2, sp
 8008f40:	f000 f848 	bl	8008fd4 <_fstat_r>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	dbec      	blt.n	8008f22 <__swhatbuf_r+0x12>
 8008f48:	9901      	ldr	r1, [sp, #4]
 8008f4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f52:	4259      	negs	r1, r3
 8008f54:	4159      	adcs	r1, r3
 8008f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f5a:	e7eb      	b.n	8008f34 <__swhatbuf_r+0x24>

08008f5c <__smakebuf_r>:
 8008f5c:	898b      	ldrh	r3, [r1, #12]
 8008f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f60:	079d      	lsls	r5, r3, #30
 8008f62:	4606      	mov	r6, r0
 8008f64:	460c      	mov	r4, r1
 8008f66:	d507      	bpl.n	8008f78 <__smakebuf_r+0x1c>
 8008f68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	6123      	str	r3, [r4, #16]
 8008f70:	2301      	movs	r3, #1
 8008f72:	6163      	str	r3, [r4, #20]
 8008f74:	b003      	add	sp, #12
 8008f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f78:	ab01      	add	r3, sp, #4
 8008f7a:	466a      	mov	r2, sp
 8008f7c:	f7ff ffc8 	bl	8008f10 <__swhatbuf_r>
 8008f80:	9f00      	ldr	r7, [sp, #0]
 8008f82:	4605      	mov	r5, r0
 8008f84:	4639      	mov	r1, r7
 8008f86:	4630      	mov	r0, r6
 8008f88:	f7fe febe 	bl	8007d08 <_malloc_r>
 8008f8c:	b948      	cbnz	r0, 8008fa2 <__smakebuf_r+0x46>
 8008f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f92:	059a      	lsls	r2, r3, #22
 8008f94:	d4ee      	bmi.n	8008f74 <__smakebuf_r+0x18>
 8008f96:	f023 0303 	bic.w	r3, r3, #3
 8008f9a:	f043 0302 	orr.w	r3, r3, #2
 8008f9e:	81a3      	strh	r3, [r4, #12]
 8008fa0:	e7e2      	b.n	8008f68 <__smakebuf_r+0xc>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	6020      	str	r0, [r4, #0]
 8008fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008faa:	81a3      	strh	r3, [r4, #12]
 8008fac:	9b01      	ldr	r3, [sp, #4]
 8008fae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008fb2:	b15b      	cbz	r3, 8008fcc <__smakebuf_r+0x70>
 8008fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f000 f81d 	bl	8008ff8 <_isatty_r>
 8008fbe:	b128      	cbz	r0, 8008fcc <__smakebuf_r+0x70>
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	f023 0303 	bic.w	r3, r3, #3
 8008fc6:	f043 0301 	orr.w	r3, r3, #1
 8008fca:	81a3      	strh	r3, [r4, #12]
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	431d      	orrs	r5, r3
 8008fd0:	81a5      	strh	r5, [r4, #12]
 8008fd2:	e7cf      	b.n	8008f74 <__smakebuf_r+0x18>

08008fd4 <_fstat_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4d07      	ldr	r5, [pc, #28]	@ (8008ff4 <_fstat_r+0x20>)
 8008fd8:	2300      	movs	r3, #0
 8008fda:	4604      	mov	r4, r0
 8008fdc:	4608      	mov	r0, r1
 8008fde:	4611      	mov	r1, r2
 8008fe0:	602b      	str	r3, [r5, #0]
 8008fe2:	f7f8 fa8d 	bl	8001500 <_fstat>
 8008fe6:	1c43      	adds	r3, r0, #1
 8008fe8:	d102      	bne.n	8008ff0 <_fstat_r+0x1c>
 8008fea:	682b      	ldr	r3, [r5, #0]
 8008fec:	b103      	cbz	r3, 8008ff0 <_fstat_r+0x1c>
 8008fee:	6023      	str	r3, [r4, #0]
 8008ff0:	bd38      	pop	{r3, r4, r5, pc}
 8008ff2:	bf00      	nop
 8008ff4:	200004ec 	.word	0x200004ec

08008ff8 <_isatty_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d06      	ldr	r5, [pc, #24]	@ (8009014 <_isatty_r+0x1c>)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4604      	mov	r4, r0
 8009000:	4608      	mov	r0, r1
 8009002:	602b      	str	r3, [r5, #0]
 8009004:	f7f8 fa8c 	bl	8001520 <_isatty>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	d102      	bne.n	8009012 <_isatty_r+0x1a>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	b103      	cbz	r3, 8009012 <_isatty_r+0x1a>
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	200004ec 	.word	0x200004ec

08009018 <_init>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	bf00      	nop
 800901c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901e:	bc08      	pop	{r3}
 8009020:	469e      	mov	lr, r3
 8009022:	4770      	bx	lr

08009024 <_fini>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	bf00      	nop
 8009028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902a:	bc08      	pop	{r3}
 800902c:	469e      	mov	lr, r3
 800902e:	4770      	bx	lr
